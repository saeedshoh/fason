/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/compressorjs/dist/compressor.js":
/*!******************************************************!*\
  !*** ./node_modules/compressorjs/dist/compressor.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\n * Compressor.js v1.0.7\n * https://fengyuanchen.github.io/compressorjs\n *\n * Copyright 2018-present Chen Fengyuan\n * Released under the MIT license\n *\n * Date: 2020-11-28T07:13:17.754Z\n */\n\n(function (global, factory) {\n   true ? module.exports = factory() :\n  undefined;\n}(this, (function () { 'use strict';\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function _extends() {\n    _extends = Object.assign || function (target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n\n      return target;\n    };\n\n    return _extends.apply(this, arguments);\n  }\n\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      if (enumerableOnly) symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n      keys.push.apply(keys, symbols);\n    }\n\n    return keys;\n  }\n\n  function _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n\n      if (i % 2) {\n        ownKeys(Object(source), true).forEach(function (key) {\n          _defineProperty(target, key, source[key]);\n        });\n      } else if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n      } else {\n        ownKeys(Object(source)).forEach(function (key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n    }\n\n    return target;\n  }\n\n  function createCommonjsModule(fn, basedir, module) {\n  \treturn module = {\n  \t\tpath: basedir,\n  \t\texports: {},\n  \t\trequire: function (path, base) {\n  \t\t\treturn commonjsRequire(path, (base === undefined || base === null) ? module.path : base);\n  \t\t}\n  \t}, fn(module, module.exports), module.exports;\n  }\n\n  function commonjsRequire () {\n  \tthrow new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');\n  }\n\n  var canvasToBlob = createCommonjsModule(function (module) {\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    (function (window) {\n\n      var CanvasPrototype = window.HTMLCanvasElement && window.HTMLCanvasElement.prototype;\n\n      var hasBlobConstructor = window.Blob && function () {\n        try {\n          return Boolean(new Blob());\n        } catch (e) {\n          return false;\n        }\n      }();\n\n      var hasArrayBufferViewSupport = hasBlobConstructor && window.Uint8Array && function () {\n        try {\n          return new Blob([new Uint8Array(100)]).size === 100;\n        } catch (e) {\n          return false;\n        }\n      }();\n\n      var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n      var dataURIPattern = /^data:((.*?)(;charset=.*?)?)(;base64)?,/;\n\n      var dataURLtoBlob = (hasBlobConstructor || BlobBuilder) && window.atob && window.ArrayBuffer && window.Uint8Array && function (dataURI) {\n        var matches, mediaType, isBase64, dataString, byteString, arrayBuffer, intArray, i, bb; // Parse the dataURI components as per RFC 2397\n\n        matches = dataURI.match(dataURIPattern);\n\n        if (!matches) {\n          throw new Error('invalid data URI');\n        } // Default to text/plain;charset=US-ASCII\n\n\n        mediaType = matches[2] ? matches[1] : 'text/plain' + (matches[3] || ';charset=US-ASCII');\n        isBase64 = !!matches[4];\n        dataString = dataURI.slice(matches[0].length);\n\n        if (isBase64) {\n          // Convert base64 to raw binary data held in a string:\n          byteString = atob(dataString);\n        } else {\n          // Convert base64/URLEncoded data component to raw binary:\n          byteString = decodeURIComponent(dataString);\n        } // Write the bytes of the string to an ArrayBuffer:\n\n\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n\n        for (i = 0; i < byteString.length; i += 1) {\n          intArray[i] = byteString.charCodeAt(i);\n        } // Write the ArrayBuffer (or ArrayBufferView) to a blob:\n\n\n        if (hasBlobConstructor) {\n          return new Blob([hasArrayBufferViewSupport ? intArray : arrayBuffer], {\n            type: mediaType\n          });\n        }\n\n        bb = new BlobBuilder();\n        bb.append(arrayBuffer);\n        return bb.getBlob(mediaType);\n      };\n\n      if (window.HTMLCanvasElement && !CanvasPrototype.toBlob) {\n        if (CanvasPrototype.mozGetAsFile) {\n          CanvasPrototype.toBlob = function (callback, type, quality) {\n            var self = this;\n            setTimeout(function () {\n              if (quality && CanvasPrototype.toDataURL && dataURLtoBlob) {\n                callback(dataURLtoBlob(self.toDataURL(type, quality)));\n              } else {\n                callback(self.mozGetAsFile('blob', type));\n              }\n            });\n          };\n        } else if (CanvasPrototype.toDataURL && dataURLtoBlob) {\n          if (CanvasPrototype.msToBlob) {\n            CanvasPrototype.toBlob = function (callback, type, quality) {\n              var self = this;\n              setTimeout(function () {\n                if ((type && type !== 'image/png' || quality) && CanvasPrototype.toDataURL && dataURLtoBlob) {\n                  callback(dataURLtoBlob(self.toDataURL(type, quality)));\n                } else {\n                  callback(self.msToBlob(type));\n                }\n              });\n            };\n          } else {\n            CanvasPrototype.toBlob = function (callback, type, quality) {\n              var self = this;\n              setTimeout(function () {\n                callback(dataURLtoBlob(self.toDataURL(type, quality)));\n              });\n            };\n          }\n        }\n      }\n\n      if ( module.exports) {\n        module.exports = dataURLtoBlob;\n      } else {\n        window.dataURLtoBlob = dataURLtoBlob;\n      }\n    })(window);\n  });\n\n  var isBlob = function isBlob(value) {\n    if (typeof Blob === 'undefined') {\n      return false;\n    }\n\n    return value instanceof Blob || Object.prototype.toString.call(value) === '[object Blob]';\n  };\n\n  var DEFAULTS = {\n    /**\n     * Indicates if output the original image instead of the compressed one\n     * when the size of the compressed image is greater than the original one's\n     * @type {boolean}\n     */\n    strict: true,\n\n    /**\n     * Indicates if read the image's Exif Orientation information,\n     * and then rotate or flip the image automatically.\n     * @type {boolean}\n     */\n    checkOrientation: true,\n\n    /**\n     * The max width of the output image.\n     * @type {number}\n     */\n    maxWidth: Infinity,\n\n    /**\n     * The max height of the output image.\n     * @type {number}\n     */\n    maxHeight: Infinity,\n\n    /**\n     * The min width of the output image.\n     * @type {number}\n     */\n    minWidth: 0,\n\n    /**\n     * The min height of the output image.\n     * @type {number}\n     */\n    minHeight: 0,\n\n    /**\n     * The width of the output image.\n     * If not specified, the natural width of the source image will be used.\n     * @type {number}\n     */\n    width: undefined,\n\n    /**\n     * The height of the output image.\n     * If not specified, the natural height of the source image will be used.\n     * @type {number}\n     */\n    height: undefined,\n\n    /**\n     * The quality of the output image.\n     * It must be a number between `0` and `1`,\n     * and only available for `image/jpeg` and `image/webp` images.\n     * Check out {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob canvas.toBlob}.\n     * @type {number}\n     */\n    quality: 0.8,\n\n    /**\n     * The mime type of the output image.\n     * By default, the original mime type of the source image file will be used.\n     * @type {string}\n     */\n    mimeType: 'auto',\n\n    /**\n     * PNG files over this value (5 MB by default) will be converted to JPEGs.\n     * To disable this, just set the value to `Infinity`.\n     * @type {number}\n     */\n    convertSize: 5000000,\n\n    /**\n     * The hook function to execute before draw the image into the canvas for compression.\n     * @type {Function}\n     * @param {CanvasRenderingContext2D} context - The 2d rendering context of the canvas.\n     * @param {HTMLCanvasElement} canvas - The canvas for compression.\n     * @example\n     * function (context, canvas) {\n     *   context.fillStyle = '#fff';\n     * }\n     */\n    beforeDraw: null,\n\n    /**\n     * The hook function to execute after drew the image into the canvas for compression.\n     * @type {Function}\n     * @param {CanvasRenderingContext2D} context - The 2d rendering context of the canvas.\n     * @param {HTMLCanvasElement} canvas - The canvas for compression.\n     * @example\n     * function (context, canvas) {\n     *   context.filter = 'grayscale(100%)';\n     * }\n     */\n    drew: null,\n\n    /**\n     * The hook function to execute when success to compress the image.\n     * @type {Function}\n     * @param {File} file - The compressed image File object.\n     * @example\n     * function (file) {\n     *   console.log(file);\n     * }\n     */\n    success: null,\n\n    /**\n     * The hook function to execute when fail to compress the image.\n     * @type {Function}\n     * @param {Error} err - An Error object.\n     * @example\n     * function (err) {\n     *   console.log(err.message);\n     * }\n     */\n    error: null\n  };\n\n  var IS_BROWSER = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n  var WINDOW = IS_BROWSER ? window : {};\n\n  var slice = Array.prototype.slice;\n  /**\n   * Convert array-like or iterable object to an array.\n   * @param {*} value - The value to convert.\n   * @returns {Array} Returns a new array.\n   */\n\n  function toArray(value) {\n    return Array.from ? Array.from(value) : slice.call(value);\n  }\n  var REGEXP_IMAGE_TYPE = /^image\\/.+$/;\n  /**\n   * Check if the given value is a mime type of image.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given is a mime type of image, else `false`.\n   */\n\n  function isImageType(value) {\n    return REGEXP_IMAGE_TYPE.test(value);\n  }\n  /**\n   * Convert image type to extension.\n   * @param {string} value - The image type to convert.\n   * @returns {boolean} Returns the image extension.\n   */\n\n  function imageTypeToExtension(value) {\n    var extension = isImageType(value) ? value.substr(6) : '';\n\n    if (extension === 'jpeg') {\n      extension = 'jpg';\n    }\n\n    return \".\".concat(extension);\n  }\n  var fromCharCode = String.fromCharCode;\n  /**\n   * Get string from char code in data view.\n   * @param {DataView} dataView - The data view for read.\n   * @param {number} start - The start index.\n   * @param {number} length - The read length.\n   * @returns {string} The read result.\n   */\n\n  function getStringFromCharCode(dataView, start, length) {\n    var str = '';\n    var i;\n    length += start;\n\n    for (i = start; i < length; i += 1) {\n      str += fromCharCode(dataView.getUint8(i));\n    }\n\n    return str;\n  }\n  var btoa = WINDOW.btoa;\n  /**\n   * Transform array buffer to Data URL.\n   * @param {ArrayBuffer} arrayBuffer - The array buffer to transform.\n   * @param {string} mimeType - The mime type of the Data URL.\n   * @returns {string} The result Data URL.\n   */\n\n  function arrayBufferToDataURL(arrayBuffer, mimeType) {\n    var chunks = [];\n    var chunkSize = 8192;\n    var uint8 = new Uint8Array(arrayBuffer);\n\n    while (uint8.length > 0) {\n      // XXX: Babel's `toConsumableArray` helper will throw error in IE or Safari 9\n      // eslint-disable-next-line prefer-spread\n      chunks.push(fromCharCode.apply(null, toArray(uint8.subarray(0, chunkSize))));\n      uint8 = uint8.subarray(chunkSize);\n    }\n\n    return \"data:\".concat(mimeType, \";base64,\").concat(btoa(chunks.join('')));\n  }\n  /**\n   * Get orientation value from given array buffer.\n   * @param {ArrayBuffer} arrayBuffer - The array buffer to read.\n   * @returns {number} The read orientation value.\n   */\n\n  function resetAndGetOrientation(arrayBuffer) {\n    var dataView = new DataView(arrayBuffer);\n    var orientation; // Ignores range error when the image does not have correct Exif information\n\n    try {\n      var littleEndian;\n      var app1Start;\n      var ifdStart; // Only handle JPEG image (start by 0xFFD8)\n\n      if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {\n        var length = dataView.byteLength;\n        var offset = 2;\n\n        while (offset + 1 < length) {\n          if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {\n            app1Start = offset;\n            break;\n          }\n\n          offset += 1;\n        }\n      }\n\n      if (app1Start) {\n        var exifIDCode = app1Start + 4;\n        var tiffOffset = app1Start + 10;\n\n        if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {\n          var endianness = dataView.getUint16(tiffOffset);\n          littleEndian = endianness === 0x4949;\n\n          if (littleEndian || endianness === 0x4D4D\n          /* bigEndian */\n          ) {\n              if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {\n                var firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);\n\n                if (firstIFDOffset >= 0x00000008) {\n                  ifdStart = tiffOffset + firstIFDOffset;\n                }\n              }\n            }\n        }\n      }\n\n      if (ifdStart) {\n        var _length = dataView.getUint16(ifdStart, littleEndian);\n\n        var _offset;\n\n        var i;\n\n        for (i = 0; i < _length; i += 1) {\n          _offset = ifdStart + i * 12 + 2;\n\n          if (dataView.getUint16(_offset, littleEndian) === 0x0112\n          /* Orientation */\n          ) {\n              // 8 is the offset of the current tag's value\n              _offset += 8; // Get the original orientation value\n\n              orientation = dataView.getUint16(_offset, littleEndian); // Override the orientation with its default value\n\n              dataView.setUint16(_offset, 1, littleEndian);\n              break;\n            }\n        }\n      }\n    } catch (e) {\n      orientation = 1;\n    }\n\n    return orientation;\n  }\n  /**\n   * Parse Exif Orientation value.\n   * @param {number} orientation - The orientation to parse.\n   * @returns {Object} The parsed result.\n   */\n\n  function parseOrientation(orientation) {\n    var rotate = 0;\n    var scaleX = 1;\n    var scaleY = 1;\n\n    switch (orientation) {\n      // Flip horizontal\n      case 2:\n        scaleX = -1;\n        break;\n      // Rotate left 180°\n\n      case 3:\n        rotate = -180;\n        break;\n      // Flip vertical\n\n      case 4:\n        scaleY = -1;\n        break;\n      // Flip vertical and rotate right 90°\n\n      case 5:\n        rotate = 90;\n        scaleY = -1;\n        break;\n      // Rotate right 90°\n\n      case 6:\n        rotate = 90;\n        break;\n      // Flip horizontal and rotate right 90°\n\n      case 7:\n        rotate = 90;\n        scaleX = -1;\n        break;\n      // Rotate left 90°\n\n      case 8:\n        rotate = -90;\n        break;\n    }\n\n    return {\n      rotate: rotate,\n      scaleX: scaleX,\n      scaleY: scaleY\n    };\n  }\n  var REGEXP_DECIMALS = /\\.\\d*(?:0|9){12}\\d*$/;\n  /**\n   * Normalize decimal number.\n   * Check out {@link https://0.30000000000000004.com/}\n   * @param {number} value - The value to normalize.\n   * @param {number} [times=100000000000] - The times for normalizing.\n   * @returns {number} Returns the normalized number.\n   */\n\n  function normalizeDecimalNumber(value) {\n    var times = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100000000000;\n    return REGEXP_DECIMALS.test(value) ? Math.round(value * times) / times : value;\n  }\n\n  var ArrayBuffer$1 = WINDOW.ArrayBuffer,\n      FileReader = WINDOW.FileReader;\n  var URL = WINDOW.URL || WINDOW.webkitURL;\n  var REGEXP_EXTENSION = /\\.\\w+$/;\n  var AnotherCompressor = WINDOW.Compressor;\n  /**\n   * Creates a new image compressor.\n   * @class\n   */\n\n  var Compressor = /*#__PURE__*/function () {\n    /**\n     * The constructor of Compressor.\n     * @param {File|Blob} file - The target image file for compressing.\n     * @param {Object} [options] - The options for compressing.\n     */\n    function Compressor(file, options) {\n      _classCallCheck(this, Compressor);\n\n      this.file = file;\n      this.image = new Image();\n      this.options = _objectSpread2(_objectSpread2({}, DEFAULTS), options);\n      this.aborted = false;\n      this.result = null;\n      this.init();\n    }\n\n    _createClass(Compressor, [{\n      key: \"init\",\n      value: function init() {\n        var _this = this;\n\n        var file = this.file,\n            options = this.options;\n\n        if (!isBlob(file)) {\n          this.fail(new Error('The first argument must be a File or Blob object.'));\n          return;\n        }\n\n        var mimeType = file.type;\n\n        if (!isImageType(mimeType)) {\n          this.fail(new Error('The first argument must be an image File or Blob object.'));\n          return;\n        }\n\n        if (!URL || !FileReader) {\n          this.fail(new Error('The current browser does not support image compression.'));\n          return;\n        }\n\n        if (!ArrayBuffer$1) {\n          options.checkOrientation = false;\n        }\n\n        if (URL && !options.checkOrientation) {\n          this.load({\n            url: URL.createObjectURL(file)\n          });\n        } else {\n          var reader = new FileReader();\n          var checkOrientation = options.checkOrientation && mimeType === 'image/jpeg';\n          this.reader = reader;\n\n          reader.onload = function (_ref) {\n            var target = _ref.target;\n            var result = target.result;\n            var data = {};\n\n            if (checkOrientation) {\n              // Reset the orientation value to its default value 1\n              // as some iOS browsers will render image with its orientation\n              var orientation = resetAndGetOrientation(result);\n\n              if (orientation > 1 || !URL) {\n                // Generate a new URL which has the default orientation value\n                data.url = arrayBufferToDataURL(result, mimeType);\n\n                if (orientation > 1) {\n                  _extends(data, parseOrientation(orientation));\n                }\n              } else {\n                data.url = URL.createObjectURL(file);\n              }\n            } else {\n              data.url = result;\n            }\n\n            _this.load(data);\n          };\n\n          reader.onabort = function () {\n            _this.fail(new Error('Aborted to read the image with FileReader.'));\n          };\n\n          reader.onerror = function () {\n            _this.fail(new Error('Failed to read the image with FileReader.'));\n          };\n\n          reader.onloadend = function () {\n            _this.reader = null;\n          };\n\n          if (checkOrientation) {\n            reader.readAsArrayBuffer(file);\n          } else {\n            reader.readAsDataURL(file);\n          }\n        }\n      }\n    }, {\n      key: \"load\",\n      value: function load(data) {\n        var _this2 = this;\n\n        var file = this.file,\n            image = this.image;\n\n        image.onload = function () {\n          _this2.draw(_objectSpread2(_objectSpread2({}, data), {}, {\n            naturalWidth: image.naturalWidth,\n            naturalHeight: image.naturalHeight\n          }));\n        };\n\n        image.onabort = function () {\n          _this2.fail(new Error('Aborted to load the image.'));\n        };\n\n        image.onerror = function () {\n          _this2.fail(new Error('Failed to load the image.'));\n        }; // Match all browsers that use WebKit as the layout engine in iOS devices,\n        // such as Safari for iOS, Chrome for iOS, and in-app browsers.\n\n\n        if (WINDOW.navigator && /(?:iPad|iPhone|iPod).*?AppleWebKit/i.test(WINDOW.navigator.userAgent)) {\n          // Fix the `The operation is insecure` error (#57)\n          image.crossOrigin = 'anonymous';\n        }\n\n        image.alt = file.name;\n        image.src = data.url;\n      }\n    }, {\n      key: \"draw\",\n      value: function draw(_ref2) {\n        var _this3 = this;\n\n        var naturalWidth = _ref2.naturalWidth,\n            naturalHeight = _ref2.naturalHeight,\n            _ref2$rotate = _ref2.rotate,\n            rotate = _ref2$rotate === void 0 ? 0 : _ref2$rotate,\n            _ref2$scaleX = _ref2.scaleX,\n            scaleX = _ref2$scaleX === void 0 ? 1 : _ref2$scaleX,\n            _ref2$scaleY = _ref2.scaleY,\n            scaleY = _ref2$scaleY === void 0 ? 1 : _ref2$scaleY;\n        var file = this.file,\n            image = this.image,\n            options = this.options;\n        var canvas = document.createElement('canvas');\n        var context = canvas.getContext('2d');\n        var aspectRatio = naturalWidth / naturalHeight;\n        var is90DegreesRotated = Math.abs(rotate) % 180 === 90;\n        var maxWidth = Math.max(options.maxWidth, 0) || Infinity;\n        var maxHeight = Math.max(options.maxHeight, 0) || Infinity;\n        var minWidth = Math.max(options.minWidth, 0) || 0;\n        var minHeight = Math.max(options.minHeight, 0) || 0;\n        var width = Math.max(options.width, 0) || naturalWidth;\n        var height = Math.max(options.height, 0) || naturalHeight;\n\n        if (is90DegreesRotated) {\n          var _ref3 = [maxHeight, maxWidth];\n          maxWidth = _ref3[0];\n          maxHeight = _ref3[1];\n          var _ref4 = [minHeight, minWidth];\n          minWidth = _ref4[0];\n          minHeight = _ref4[1];\n          var _ref5 = [height, width];\n          width = _ref5[0];\n          height = _ref5[1];\n        }\n\n        if (maxWidth < Infinity && maxHeight < Infinity) {\n          if (maxHeight * aspectRatio > maxWidth) {\n            maxHeight = maxWidth / aspectRatio;\n          } else {\n            maxWidth = maxHeight * aspectRatio;\n          }\n        } else if (maxWidth < Infinity) {\n          maxHeight = maxWidth / aspectRatio;\n        } else if (maxHeight < Infinity) {\n          maxWidth = maxHeight * aspectRatio;\n        }\n\n        if (minWidth > 0 && minHeight > 0) {\n          if (minHeight * aspectRatio > minWidth) {\n            minHeight = minWidth / aspectRatio;\n          } else {\n            minWidth = minHeight * aspectRatio;\n          }\n        } else if (minWidth > 0) {\n          minHeight = minWidth / aspectRatio;\n        } else if (minHeight > 0) {\n          minWidth = minHeight * aspectRatio;\n        }\n\n        if (height * aspectRatio > width) {\n          height = width / aspectRatio;\n        } else {\n          width = height * aspectRatio;\n        }\n\n        width = Math.floor(normalizeDecimalNumber(Math.min(Math.max(width, minWidth), maxWidth)));\n        height = Math.floor(normalizeDecimalNumber(Math.min(Math.max(height, minHeight), maxHeight)));\n        var destX = -width / 2;\n        var destY = -height / 2;\n        var destWidth = width;\n        var destHeight = height;\n\n        if (is90DegreesRotated) {\n          var _ref6 = [height, width];\n          width = _ref6[0];\n          height = _ref6[1];\n        }\n\n        canvas.width = width;\n        canvas.height = height;\n\n        if (!isImageType(options.mimeType)) {\n          options.mimeType = file.type;\n        }\n\n        var fillStyle = 'transparent'; // Converts PNG files over the `convertSize` to JPEGs.\n\n        if (file.size > options.convertSize && options.mimeType === 'image/png') {\n          fillStyle = '#fff';\n          options.mimeType = 'image/jpeg';\n        } // Override the default fill color (#000, black)\n\n\n        context.fillStyle = fillStyle;\n        context.fillRect(0, 0, width, height);\n\n        if (options.beforeDraw) {\n          options.beforeDraw.call(this, context, canvas);\n        }\n\n        if (this.aborted) {\n          return;\n        }\n\n        context.save();\n        context.translate(width / 2, height / 2);\n        context.rotate(rotate * Math.PI / 180);\n        context.scale(scaleX, scaleY);\n        context.drawImage(image, destX, destY, destWidth, destHeight);\n        context.restore();\n\n        if (options.drew) {\n          options.drew.call(this, context, canvas);\n        }\n\n        if (this.aborted) {\n          return;\n        }\n\n        var done = function done(result) {\n          if (!_this3.aborted) {\n            _this3.done({\n              naturalWidth: naturalWidth,\n              naturalHeight: naturalHeight,\n              result: result\n            });\n          }\n        };\n\n        if (canvas.toBlob) {\n          canvas.toBlob(done, options.mimeType, options.quality);\n        } else {\n          done(canvasToBlob(canvas.toDataURL(options.mimeType, options.quality)));\n        }\n      }\n    }, {\n      key: \"done\",\n      value: function done(_ref7) {\n        var naturalWidth = _ref7.naturalWidth,\n            naturalHeight = _ref7.naturalHeight,\n            result = _ref7.result;\n        var file = this.file,\n            image = this.image,\n            options = this.options;\n\n        if (URL && !options.checkOrientation) {\n          URL.revokeObjectURL(image.src);\n        }\n\n        if (result) {\n          // Returns original file if the result is greater than it and without size related options\n          if (options.strict && result.size > file.size && options.mimeType === file.type && !(options.width > naturalWidth || options.height > naturalHeight || options.minWidth > naturalWidth || options.minHeight > naturalHeight)) {\n            result = file;\n          } else {\n            var date = new Date();\n            result.lastModified = date.getTime();\n            result.lastModifiedDate = date;\n            result.name = file.name; // Convert the extension to match its type\n\n            if (result.name && result.type !== file.type) {\n              result.name = result.name.replace(REGEXP_EXTENSION, imageTypeToExtension(result.type));\n            }\n          }\n        } else {\n          // Returns original file if the result is null in some cases.\n          result = file;\n        }\n\n        this.result = result;\n\n        if (options.success) {\n          options.success.call(this, result);\n        }\n      }\n    }, {\n      key: \"fail\",\n      value: function fail(err) {\n        var options = this.options;\n\n        if (options.error) {\n          options.error.call(this, err);\n        } else {\n          throw err;\n        }\n      }\n    }, {\n      key: \"abort\",\n      value: function abort() {\n        if (!this.aborted) {\n          this.aborted = true;\n\n          if (this.reader) {\n            this.reader.abort();\n          } else if (!this.image.complete) {\n            this.image.onload = null;\n            this.image.onabort();\n          } else {\n            this.fail(new Error('The compression process has been aborted.'));\n          }\n        }\n      }\n      /**\n       * Get the no conflict compressor class.\n       * @returns {Compressor} The compressor class.\n       */\n\n    }], [{\n      key: \"noConflict\",\n      value: function noConflict() {\n        window.Compressor = AnotherCompressor;\n        return Compressor;\n      }\n      /**\n       * Change the default options.\n       * @param {Object} options - The new default options.\n       */\n\n    }, {\n      key: \"setDefaults\",\n      value: function setDefaults(options) {\n        _extends(DEFAULTS, options);\n      }\n    }]);\n\n    return Compressor;\n  }();\n\n  return Compressor;\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/compressorjs/dist/compressor.js\n");

/***/ }),

/***/ "./node_modules/sweetalert2/dist/sweetalert2.all.js":
/*!**********************************************************!*\
  !*** ./node_modules/sweetalert2/dist/sweetalert2.all.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\n* sweetalert2 v10.15.5\n* Released under the MIT License.\n*/\n(function (global, factory) {\n   true ? module.exports = factory() :\n  undefined;\n}(this, function () { 'use strict';\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _extends() {\n    _extends = Object.assign || function (target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n\n      return target;\n    };\n\n    return _extends.apply(this, arguments);\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n  }\n\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  function _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function _construct(Parent, args, Class) {\n    if (_isNativeReflectConstruct()) {\n      _construct = Reflect.construct;\n    } else {\n      _construct = function _construct(Parent, args, Class) {\n        var a = [null];\n        a.push.apply(a, args);\n        var Constructor = Function.bind.apply(Parent, a);\n        var instance = new Constructor();\n        if (Class) _setPrototypeOf(instance, Class.prototype);\n        return instance;\n      };\n    }\n\n    return _construct.apply(null, arguments);\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  function _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n      return call;\n    }\n\n    return _assertThisInitialized(self);\n  }\n\n  function _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n    return function _createSuperInternal() {\n      var Super = _getPrototypeOf(Derived),\n          result;\n\n      if (hasNativeReflectConstruct) {\n        var NewTarget = _getPrototypeOf(this).constructor;\n\n        result = Reflect.construct(Super, arguments, NewTarget);\n      } else {\n        result = Super.apply(this, arguments);\n      }\n\n      return _possibleConstructorReturn(this, result);\n    };\n  }\n\n  function _superPropBase(object, property) {\n    while (!Object.prototype.hasOwnProperty.call(object, property)) {\n      object = _getPrototypeOf(object);\n      if (object === null) break;\n    }\n\n    return object;\n  }\n\n  function _get(target, property, receiver) {\n    if (typeof Reflect !== \"undefined\" && Reflect.get) {\n      _get = Reflect.get;\n    } else {\n      _get = function _get(target, property, receiver) {\n        var base = _superPropBase(target, property);\n\n        if (!base) return;\n        var desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.get) {\n          return desc.get.call(receiver);\n        }\n\n        return desc.value;\n      };\n    }\n\n    return _get(target, property, receiver || target);\n  }\n\n  var consolePrefix = 'SweetAlert2:';\n  /**\n   * Filter the unique values into a new array\n   * @param arr\n   */\n\n  var uniqueArray = function uniqueArray(arr) {\n    var result = [];\n\n    for (var i = 0; i < arr.length; i++) {\n      if (result.indexOf(arr[i]) === -1) {\n        result.push(arr[i]);\n      }\n    }\n\n    return result;\n  };\n  /**\n   * Capitalize the first letter of a string\n   * @param str\n   */\n\n  var capitalizeFirstLetter = function capitalizeFirstLetter(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  };\n  /**\n   * Returns the array of object values (Object.values isn't supported in IE11)\n   * @param obj\n   */\n\n  var objectValues = function objectValues(obj) {\n    return Object.keys(obj).map(function (key) {\n      return obj[key];\n    });\n  };\n  /**\n   * Convert NodeList to Array\n   * @param nodeList\n   */\n\n  var toArray = function toArray(nodeList) {\n    return Array.prototype.slice.call(nodeList);\n  };\n  /**\n   * Standardise console warnings\n   * @param message\n   */\n\n  var warn = function warn(message) {\n    console.warn(\"\".concat(consolePrefix, \" \").concat(_typeof(message) === 'object' ? message.join(' ') : message));\n  };\n  /**\n   * Standardise console errors\n   * @param message\n   */\n\n  var error = function error(message) {\n    console.error(\"\".concat(consolePrefix, \" \").concat(message));\n  };\n  /**\n   * Private global state for `warnOnce`\n   * @type {Array}\n   * @private\n   */\n\n  var previousWarnOnceMessages = [];\n  /**\n   * Show a console warning, but only if it hasn't already been shown\n   * @param message\n   */\n\n  var warnOnce = function warnOnce(message) {\n    if (!(previousWarnOnceMessages.indexOf(message) !== -1)) {\n      previousWarnOnceMessages.push(message);\n      warn(message);\n    }\n  };\n  /**\n   * Show a one-time console warning about deprecated params/methods\n   */\n\n  var warnAboutDeprecation = function warnAboutDeprecation(deprecatedParam, useInstead) {\n    warnOnce(\"\\\"\".concat(deprecatedParam, \"\\\" is deprecated and will be removed in the next major release. Please use \\\"\").concat(useInstead, \"\\\" instead.\"));\n  };\n  /**\n   * If `arg` is a function, call it (with no arguments or context) and return the result.\n   * Otherwise, just pass the value through\n   * @param arg\n   */\n\n  var callIfFunction = function callIfFunction(arg) {\n    return typeof arg === 'function' ? arg() : arg;\n  };\n  var hasToPromiseFn = function hasToPromiseFn(arg) {\n    return arg && typeof arg.toPromise === 'function';\n  };\n  var asPromise = function asPromise(arg) {\n    return hasToPromiseFn(arg) ? arg.toPromise() : Promise.resolve(arg);\n  };\n  var isPromise = function isPromise(arg) {\n    return arg && Promise.resolve(arg) === arg;\n  };\n\n  var DismissReason = Object.freeze({\n    cancel: 'cancel',\n    backdrop: 'backdrop',\n    close: 'close',\n    esc: 'esc',\n    timer: 'timer'\n  });\n\n  var isJqueryElement = function isJqueryElement(elem) {\n    return _typeof(elem) === 'object' && elem.jquery;\n  };\n\n  var isElement = function isElement(elem) {\n    return elem instanceof Element || isJqueryElement(elem);\n  };\n\n  var argsToParams = function argsToParams(args) {\n    var params = {};\n\n    if (_typeof(args[0]) === 'object' && !isElement(args[0])) {\n      _extends(params, args[0]);\n    } else {\n      ['title', 'html', 'icon'].forEach(function (name, index) {\n        var arg = args[index];\n\n        if (typeof arg === 'string' || isElement(arg)) {\n          params[name] = arg;\n        } else if (arg !== undefined) {\n          error(\"Unexpected type of \".concat(name, \"! Expected \\\"string\\\" or \\\"Element\\\", got \").concat(_typeof(arg)));\n        }\n      });\n    }\n\n    return params;\n  };\n\n  var swalPrefix = 'swal2-';\n  var prefix = function prefix(items) {\n    var result = {};\n\n    for (var i in items) {\n      result[items[i]] = swalPrefix + items[i];\n    }\n\n    return result;\n  };\n  var swalClasses = prefix(['container', 'shown', 'height-auto', 'iosfix', 'popup', 'modal', 'no-backdrop', 'no-transition', 'toast', 'toast-shown', 'toast-column', 'show', 'hide', 'close', 'title', 'header', 'content', 'html-container', 'actions', 'confirm', 'deny', 'cancel', 'footer', 'icon', 'icon-content', 'image', 'input', 'file', 'range', 'select', 'radio', 'checkbox', 'label', 'textarea', 'inputerror', 'input-label', 'validation-message', 'progress-steps', 'active-progress-step', 'progress-step', 'progress-step-line', 'loader', 'loading', 'styled', 'top', 'top-start', 'top-end', 'top-left', 'top-right', 'center', 'center-start', 'center-end', 'center-left', 'center-right', 'bottom', 'bottom-start', 'bottom-end', 'bottom-left', 'bottom-right', 'grow-row', 'grow-column', 'grow-fullscreen', 'rtl', 'timer-progress-bar', 'timer-progress-bar-container', 'scrollbar-measure', 'icon-success', 'icon-warning', 'icon-info', 'icon-question', 'icon-error']);\n  var iconTypes = prefix(['success', 'warning', 'info', 'question', 'error']);\n\n  var getContainer = function getContainer() {\n    return document.body.querySelector(\".\".concat(swalClasses.container));\n  };\n  var elementBySelector = function elementBySelector(selectorString) {\n    var container = getContainer();\n    return container ? container.querySelector(selectorString) : null;\n  };\n\n  var elementByClass = function elementByClass(className) {\n    return elementBySelector(\".\".concat(className));\n  };\n\n  var getPopup = function getPopup() {\n    return elementByClass(swalClasses.popup);\n  };\n  var getIcon = function getIcon() {\n    return elementByClass(swalClasses.icon);\n  };\n  var getTitle = function getTitle() {\n    return elementByClass(swalClasses.title);\n  };\n  var getContent = function getContent() {\n    return elementByClass(swalClasses.content);\n  };\n  var getHtmlContainer = function getHtmlContainer() {\n    return elementByClass(swalClasses['html-container']);\n  };\n  var getImage = function getImage() {\n    return elementByClass(swalClasses.image);\n  };\n  var getProgressSteps = function getProgressSteps() {\n    return elementByClass(swalClasses['progress-steps']);\n  };\n  var getValidationMessage = function getValidationMessage() {\n    return elementByClass(swalClasses['validation-message']);\n  };\n  var getConfirmButton = function getConfirmButton() {\n    return elementBySelector(\".\".concat(swalClasses.actions, \" .\").concat(swalClasses.confirm));\n  };\n  var getDenyButton = function getDenyButton() {\n    return elementBySelector(\".\".concat(swalClasses.actions, \" .\").concat(swalClasses.deny));\n  };\n  var getInputLabel = function getInputLabel() {\n    return elementByClass(swalClasses['input-label']);\n  };\n  var getLoader = function getLoader() {\n    return elementBySelector(\".\".concat(swalClasses.loader));\n  };\n  var getCancelButton = function getCancelButton() {\n    return elementBySelector(\".\".concat(swalClasses.actions, \" .\").concat(swalClasses.cancel));\n  };\n  var getActions = function getActions() {\n    return elementByClass(swalClasses.actions);\n  };\n  var getHeader = function getHeader() {\n    return elementByClass(swalClasses.header);\n  };\n  var getFooter = function getFooter() {\n    return elementByClass(swalClasses.footer);\n  };\n  var getTimerProgressBar = function getTimerProgressBar() {\n    return elementByClass(swalClasses['timer-progress-bar']);\n  };\n  var getCloseButton = function getCloseButton() {\n    return elementByClass(swalClasses.close);\n  }; // https://github.com/jkup/focusable/blob/master/index.js\n\n  var focusable = \"\\n  a[href],\\n  area[href],\\n  input:not([disabled]),\\n  select:not([disabled]),\\n  textarea:not([disabled]),\\n  button:not([disabled]),\\n  iframe,\\n  object,\\n  embed,\\n  [tabindex=\\\"0\\\"],\\n  [contenteditable],\\n  audio[controls],\\n  video[controls],\\n  summary\\n\";\n  var getFocusableElements = function getFocusableElements() {\n    var focusableElementsWithTabindex = toArray(getPopup().querySelectorAll('[tabindex]:not([tabindex=\"-1\"]):not([tabindex=\"0\"])')) // sort according to tabindex\n    .sort(function (a, b) {\n      a = parseInt(a.getAttribute('tabindex'));\n      b = parseInt(b.getAttribute('tabindex'));\n\n      if (a > b) {\n        return 1;\n      } else if (a < b) {\n        return -1;\n      }\n\n      return 0;\n    });\n    var otherFocusableElements = toArray(getPopup().querySelectorAll(focusable)).filter(function (el) {\n      return el.getAttribute('tabindex') !== '-1';\n    });\n    return uniqueArray(focusableElementsWithTabindex.concat(otherFocusableElements)).filter(function (el) {\n      return isVisible(el);\n    });\n  };\n  var isModal = function isModal() {\n    return !isToast() && !document.body.classList.contains(swalClasses['no-backdrop']);\n  };\n  var isToast = function isToast() {\n    return document.body.classList.contains(swalClasses['toast-shown']);\n  };\n  var isLoading = function isLoading() {\n    return getPopup().hasAttribute('data-loading');\n  };\n\n  var states = {\n    previousBodyPadding: null\n  };\n  var setInnerHtml = function setInnerHtml(elem, html) {\n    // #1926\n    elem.textContent = '';\n\n    if (html) {\n      var parser = new DOMParser();\n      var parsed = parser.parseFromString(html, \"text/html\");\n      toArray(parsed.querySelector('head').childNodes).forEach(function (child) {\n        elem.appendChild(child);\n      });\n      toArray(parsed.querySelector('body').childNodes).forEach(function (child) {\n        elem.appendChild(child);\n      });\n    }\n  };\n  var hasClass = function hasClass(elem, className) {\n    if (!className) {\n      return false;\n    }\n\n    var classList = className.split(/\\s+/);\n\n    for (var i = 0; i < classList.length; i++) {\n      if (!elem.classList.contains(classList[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  var removeCustomClasses = function removeCustomClasses(elem, params) {\n    toArray(elem.classList).forEach(function (className) {\n      if (!(objectValues(swalClasses).indexOf(className) !== -1) && !(objectValues(iconTypes).indexOf(className) !== -1) && !(objectValues(params.showClass).indexOf(className) !== -1)) {\n        elem.classList.remove(className);\n      }\n    });\n  };\n\n  var applyCustomClass = function applyCustomClass(elem, params, className) {\n    removeCustomClasses(elem, params);\n\n    if (params.customClass && params.customClass[className]) {\n      if (typeof params.customClass[className] !== 'string' && !params.customClass[className].forEach) {\n        return warn(\"Invalid type of customClass.\".concat(className, \"! Expected string or iterable object, got \\\"\").concat(_typeof(params.customClass[className]), \"\\\"\"));\n      }\n\n      addClass(elem, params.customClass[className]);\n    }\n  };\n  function getInput(content, inputType) {\n    if (!inputType) {\n      return null;\n    }\n\n    switch (inputType) {\n      case 'select':\n      case 'textarea':\n      case 'file':\n        return getChildByClass(content, swalClasses[inputType]);\n\n      case 'checkbox':\n        return content.querySelector(\".\".concat(swalClasses.checkbox, \" input\"));\n\n      case 'radio':\n        return content.querySelector(\".\".concat(swalClasses.radio, \" input:checked\")) || content.querySelector(\".\".concat(swalClasses.radio, \" input:first-child\"));\n\n      case 'range':\n        return content.querySelector(\".\".concat(swalClasses.range, \" input\"));\n\n      default:\n        return getChildByClass(content, swalClasses.input);\n    }\n  }\n  var focusInput = function focusInput(input) {\n    input.focus(); // place cursor at end of text in text input\n\n    if (input.type !== 'file') {\n      // http://stackoverflow.com/a/2345915\n      var val = input.value;\n      input.value = '';\n      input.value = val;\n    }\n  };\n  var toggleClass = function toggleClass(target, classList, condition) {\n    if (!target || !classList) {\n      return;\n    }\n\n    if (typeof classList === 'string') {\n      classList = classList.split(/\\s+/).filter(Boolean);\n    }\n\n    classList.forEach(function (className) {\n      if (target.forEach) {\n        target.forEach(function (elem) {\n          condition ? elem.classList.add(className) : elem.classList.remove(className);\n        });\n      } else {\n        condition ? target.classList.add(className) : target.classList.remove(className);\n      }\n    });\n  };\n  var addClass = function addClass(target, classList) {\n    toggleClass(target, classList, true);\n  };\n  var removeClass = function removeClass(target, classList) {\n    toggleClass(target, classList, false);\n  };\n  var getChildByClass = function getChildByClass(elem, className) {\n    for (var i = 0; i < elem.childNodes.length; i++) {\n      if (hasClass(elem.childNodes[i], className)) {\n        return elem.childNodes[i];\n      }\n    }\n  };\n  var applyNumericalStyle = function applyNumericalStyle(elem, property, value) {\n    if (value === \"\".concat(parseInt(value))) {\n      value = parseInt(value);\n    }\n\n    if (value || parseInt(value) === 0) {\n      elem.style[property] = typeof value === 'number' ? \"\".concat(value, \"px\") : value;\n    } else {\n      elem.style.removeProperty(property);\n    }\n  };\n  var show = function show(elem) {\n    var display = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'flex';\n    elem.style.display = display;\n  };\n  var hide = function hide(elem) {\n    elem.style.display = 'none';\n  };\n  var setStyle = function setStyle(parent, selector, property, value) {\n    var el = parent.querySelector(selector);\n\n    if (el) {\n      el.style[property] = value;\n    }\n  };\n  var toggle = function toggle(elem, condition, display) {\n    condition ? show(elem, display) : hide(elem);\n  }; // borrowed from jquery $(elem).is(':visible') implementation\n\n  var isVisible = function isVisible(elem) {\n    return !!(elem && (elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length));\n  };\n  var allButtonsAreHidden = function allButtonsAreHidden() {\n    return !isVisible(getConfirmButton()) && !isVisible(getDenyButton()) && !isVisible(getCancelButton());\n  };\n  var isScrollable = function isScrollable(elem) {\n    return !!(elem.scrollHeight > elem.clientHeight);\n  }; // borrowed from https://stackoverflow.com/a/46352119\n\n  var hasCssAnimation = function hasCssAnimation(elem) {\n    var style = window.getComputedStyle(elem);\n    var animDuration = parseFloat(style.getPropertyValue('animation-duration') || '0');\n    var transDuration = parseFloat(style.getPropertyValue('transition-duration') || '0');\n    return animDuration > 0 || transDuration > 0;\n  };\n  var contains = function contains(haystack, needle) {\n    if (typeof haystack.contains === 'function') {\n      return haystack.contains(needle);\n    }\n  };\n  var animateTimerProgressBar = function animateTimerProgressBar(timer) {\n    var reset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var timerProgressBar = getTimerProgressBar();\n\n    if (isVisible(timerProgressBar)) {\n      if (reset) {\n        timerProgressBar.style.transition = 'none';\n        timerProgressBar.style.width = '100%';\n      }\n\n      setTimeout(function () {\n        timerProgressBar.style.transition = \"width \".concat(timer / 1000, \"s linear\");\n        timerProgressBar.style.width = '0%';\n      }, 10);\n    }\n  };\n  var stopTimerProgressBar = function stopTimerProgressBar() {\n    var timerProgressBar = getTimerProgressBar();\n    var timerProgressBarWidth = parseInt(window.getComputedStyle(timerProgressBar).width);\n    timerProgressBar.style.removeProperty('transition');\n    timerProgressBar.style.width = '100%';\n    var timerProgressBarFullWidth = parseInt(window.getComputedStyle(timerProgressBar).width);\n    var timerProgressBarPercent = parseInt(timerProgressBarWidth / timerProgressBarFullWidth * 100);\n    timerProgressBar.style.removeProperty('transition');\n    timerProgressBar.style.width = \"\".concat(timerProgressBarPercent, \"%\");\n  };\n\n  // Detect Node env\n  var isNodeEnv = function isNodeEnv() {\n    return typeof window === 'undefined' || typeof document === 'undefined';\n  };\n\n  var sweetHTML = \"\\n <div aria-labelledby=\\\"\".concat(swalClasses.title, \"\\\" aria-describedby=\\\"\").concat(swalClasses.content, \"\\\" class=\\\"\").concat(swalClasses.popup, \"\\\" tabindex=\\\"-1\\\">\\n   <div class=\\\"\").concat(swalClasses.header, \"\\\">\\n     <ul class=\\\"\").concat(swalClasses['progress-steps'], \"\\\"></ul>\\n     <div class=\\\"\").concat(swalClasses.icon, \"\\\"></div>\\n     <img class=\\\"\").concat(swalClasses.image, \"\\\" />\\n     <h2 class=\\\"\").concat(swalClasses.title, \"\\\" id=\\\"\").concat(swalClasses.title, \"\\\"></h2>\\n     <button type=\\\"button\\\" class=\\\"\").concat(swalClasses.close, \"\\\"></button>\\n   </div>\\n   <div class=\\\"\").concat(swalClasses.content, \"\\\">\\n     <div id=\\\"\").concat(swalClasses.content, \"\\\" class=\\\"\").concat(swalClasses['html-container'], \"\\\"></div>\\n     <input class=\\\"\").concat(swalClasses.input, \"\\\" />\\n     <input type=\\\"file\\\" class=\\\"\").concat(swalClasses.file, \"\\\" />\\n     <div class=\\\"\").concat(swalClasses.range, \"\\\">\\n       <input type=\\\"range\\\" />\\n       <output></output>\\n     </div>\\n     <select class=\\\"\").concat(swalClasses.select, \"\\\"></select>\\n     <div class=\\\"\").concat(swalClasses.radio, \"\\\"></div>\\n     <label for=\\\"\").concat(swalClasses.checkbox, \"\\\" class=\\\"\").concat(swalClasses.checkbox, \"\\\">\\n       <input type=\\\"checkbox\\\" />\\n       <span class=\\\"\").concat(swalClasses.label, \"\\\"></span>\\n     </label>\\n     <textarea class=\\\"\").concat(swalClasses.textarea, \"\\\"></textarea>\\n     <div class=\\\"\").concat(swalClasses['validation-message'], \"\\\" id=\\\"\").concat(swalClasses['validation-message'], \"\\\"></div>\\n   </div>\\n   <div class=\\\"\").concat(swalClasses.actions, \"\\\">\\n     <div class=\\\"\").concat(swalClasses.loader, \"\\\"></div>\\n     <button type=\\\"button\\\" class=\\\"\").concat(swalClasses.confirm, \"\\\"></button>\\n     <button type=\\\"button\\\" class=\\\"\").concat(swalClasses.deny, \"\\\"></button>\\n     <button type=\\\"button\\\" class=\\\"\").concat(swalClasses.cancel, \"\\\"></button>\\n   </div>\\n   <div class=\\\"\").concat(swalClasses.footer, \"\\\"></div>\\n   <div class=\\\"\").concat(swalClasses['timer-progress-bar-container'], \"\\\">\\n     <div class=\\\"\").concat(swalClasses['timer-progress-bar'], \"\\\"></div>\\n   </div>\\n </div>\\n\").replace(/(^|\\n)\\s*/g, '');\n\n  var resetOldContainer = function resetOldContainer() {\n    var oldContainer = getContainer();\n\n    if (!oldContainer) {\n      return false;\n    }\n\n    oldContainer.parentNode.removeChild(oldContainer);\n    removeClass([document.documentElement, document.body], [swalClasses['no-backdrop'], swalClasses['toast-shown'], swalClasses['has-column']]);\n    return true;\n  };\n\n  var oldInputVal; // IE11 workaround, see #1109 for details\n\n  var resetValidationMessage = function resetValidationMessage(e) {\n    if (Swal.isVisible() && oldInputVal !== e.target.value) {\n      Swal.resetValidationMessage();\n    }\n\n    oldInputVal = e.target.value;\n  };\n\n  var addInputChangeListeners = function addInputChangeListeners() {\n    var content = getContent();\n    var input = getChildByClass(content, swalClasses.input);\n    var file = getChildByClass(content, swalClasses.file);\n    var range = content.querySelector(\".\".concat(swalClasses.range, \" input\"));\n    var rangeOutput = content.querySelector(\".\".concat(swalClasses.range, \" output\"));\n    var select = getChildByClass(content, swalClasses.select);\n    var checkbox = content.querySelector(\".\".concat(swalClasses.checkbox, \" input\"));\n    var textarea = getChildByClass(content, swalClasses.textarea);\n    input.oninput = resetValidationMessage;\n    file.onchange = resetValidationMessage;\n    select.onchange = resetValidationMessage;\n    checkbox.onchange = resetValidationMessage;\n    textarea.oninput = resetValidationMessage;\n\n    range.oninput = function (e) {\n      resetValidationMessage(e);\n      rangeOutput.value = range.value;\n    };\n\n    range.onchange = function (e) {\n      resetValidationMessage(e);\n      range.nextSibling.value = range.value;\n    };\n  };\n\n  var getTarget = function getTarget(target) {\n    return typeof target === 'string' ? document.querySelector(target) : target;\n  };\n\n  var setupAccessibility = function setupAccessibility(params) {\n    var popup = getPopup();\n    popup.setAttribute('role', params.toast ? 'alert' : 'dialog');\n    popup.setAttribute('aria-live', params.toast ? 'polite' : 'assertive');\n\n    if (!params.toast) {\n      popup.setAttribute('aria-modal', 'true');\n    }\n  };\n\n  var setupRTL = function setupRTL(targetElement) {\n    if (window.getComputedStyle(targetElement).direction === 'rtl') {\n      addClass(getContainer(), swalClasses.rtl);\n    }\n  };\n  /*\n   * Add modal + backdrop to DOM\n   */\n\n\n  var init = function init(params) {\n    // Clean up the old popup container if it exists\n    var oldContainerExisted = resetOldContainer();\n    /* istanbul ignore if */\n\n    if (isNodeEnv()) {\n      error('SweetAlert2 requires document to initialize');\n      return;\n    }\n\n    var container = document.createElement('div');\n    container.className = swalClasses.container;\n\n    if (oldContainerExisted) {\n      addClass(container, swalClasses['no-transition']);\n    }\n\n    setInnerHtml(container, sweetHTML);\n    var targetElement = getTarget(params.target);\n    targetElement.appendChild(container);\n    setupAccessibility(params);\n    setupRTL(targetElement);\n    addInputChangeListeners();\n  };\n\n  var parseHtmlToContainer = function parseHtmlToContainer(param, target) {\n    // DOM element\n    if (param instanceof HTMLElement) {\n      target.appendChild(param); // Object\n    } else if (_typeof(param) === 'object') {\n      handleObject(param, target); // Plain string\n    } else if (param) {\n      setInnerHtml(target, param);\n    }\n  };\n\n  var handleObject = function handleObject(param, target) {\n    // JQuery element(s)\n    if (param.jquery) {\n      handleJqueryElem(target, param); // For other objects use their string representation\n    } else {\n      setInnerHtml(target, param.toString());\n    }\n  };\n\n  var handleJqueryElem = function handleJqueryElem(target, elem) {\n    target.textContent = '';\n\n    if (0 in elem) {\n      for (var i = 0; (i in elem); i++) {\n        target.appendChild(elem[i].cloneNode(true));\n      }\n    } else {\n      target.appendChild(elem.cloneNode(true));\n    }\n  };\n\n  var animationEndEvent = function () {\n    // Prevent run in Node env\n\n    /* istanbul ignore if */\n    if (isNodeEnv()) {\n      return false;\n    }\n\n    var testEl = document.createElement('div');\n    var transEndEventNames = {\n      WebkitAnimation: 'webkitAnimationEnd',\n      OAnimation: 'oAnimationEnd oanimationend',\n      animation: 'animationend'\n    };\n\n    for (var i in transEndEventNames) {\n      if (Object.prototype.hasOwnProperty.call(transEndEventNames, i) && typeof testEl.style[i] !== 'undefined') {\n        return transEndEventNames[i];\n      }\n    }\n\n    return false;\n  }();\n\n  // https://github.com/twbs/bootstrap/blob/master/js/src/modal.js\n\n  var measureScrollbar = function measureScrollbar() {\n    var scrollDiv = document.createElement('div');\n    scrollDiv.className = swalClasses['scrollbar-measure'];\n    document.body.appendChild(scrollDiv);\n    var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;\n    document.body.removeChild(scrollDiv);\n    return scrollbarWidth;\n  };\n\n  var renderActions = function renderActions(instance, params) {\n    var actions = getActions();\n    var loader = getLoader();\n    var confirmButton = getConfirmButton();\n    var denyButton = getDenyButton();\n    var cancelButton = getCancelButton(); // Actions (buttons) wrapper\n\n    if (!params.showConfirmButton && !params.showDenyButton && !params.showCancelButton) {\n      hide(actions);\n    } // Custom class\n\n\n    applyCustomClass(actions, params, 'actions'); // Render buttons\n\n    renderButton(confirmButton, 'confirm', params);\n    renderButton(denyButton, 'deny', params);\n    renderButton(cancelButton, 'cancel', params);\n    handleButtonsStyling(confirmButton, denyButton, cancelButton, params);\n\n    if (params.reverseButtons) {\n      actions.insertBefore(cancelButton, loader);\n      actions.insertBefore(denyButton, loader);\n      actions.insertBefore(confirmButton, loader);\n    } // Loader\n\n\n    setInnerHtml(loader, params.loaderHtml);\n    applyCustomClass(loader, params, 'loader');\n  };\n\n  function handleButtonsStyling(confirmButton, denyButton, cancelButton, params) {\n    if (!params.buttonsStyling) {\n      return removeClass([confirmButton, denyButton, cancelButton], swalClasses.styled);\n    }\n\n    addClass([confirmButton, denyButton, cancelButton], swalClasses.styled); // Buttons background colors\n\n    if (params.confirmButtonColor) {\n      confirmButton.style.backgroundColor = params.confirmButtonColor;\n    }\n\n    if (params.denyButtonColor) {\n      denyButton.style.backgroundColor = params.denyButtonColor;\n    }\n\n    if (params.cancelButtonColor) {\n      cancelButton.style.backgroundColor = params.cancelButtonColor;\n    }\n  }\n\n  function renderButton(button, buttonType, params) {\n    toggle(button, params[\"show\".concat(capitalizeFirstLetter(buttonType), \"Button\")], 'inline-block');\n    setInnerHtml(button, params[\"\".concat(buttonType, \"ButtonText\")]); // Set caption text\n\n    button.setAttribute('aria-label', params[\"\".concat(buttonType, \"ButtonAriaLabel\")]); // ARIA label\n    // Add buttons custom classes\n\n    button.className = swalClasses[buttonType];\n    applyCustomClass(button, params, \"\".concat(buttonType, \"Button\"));\n    addClass(button, params[\"\".concat(buttonType, \"ButtonClass\")]);\n  }\n\n  function handleBackdropParam(container, backdrop) {\n    if (typeof backdrop === 'string') {\n      container.style.background = backdrop;\n    } else if (!backdrop) {\n      addClass([document.documentElement, document.body], swalClasses['no-backdrop']);\n    }\n  }\n\n  function handlePositionParam(container, position) {\n    if (position in swalClasses) {\n      addClass(container, swalClasses[position]);\n    } else {\n      warn('The \"position\" parameter is not valid, defaulting to \"center\"');\n      addClass(container, swalClasses.center);\n    }\n  }\n\n  function handleGrowParam(container, grow) {\n    if (grow && typeof grow === 'string') {\n      var growClass = \"grow-\".concat(grow);\n\n      if (growClass in swalClasses) {\n        addClass(container, swalClasses[growClass]);\n      }\n    }\n  }\n\n  var renderContainer = function renderContainer(instance, params) {\n    var container = getContainer();\n\n    if (!container) {\n      return;\n    }\n\n    handleBackdropParam(container, params.backdrop);\n\n    if (!params.backdrop && params.allowOutsideClick) {\n      warn('\"allowOutsideClick\" parameter requires `backdrop` parameter to be set to `true`');\n    }\n\n    handlePositionParam(container, params.position);\n    handleGrowParam(container, params.grow); // Custom class\n\n    applyCustomClass(container, params, 'container'); // Set queue step attribute for getQueueStep() method\n\n    var queueStep = document.body.getAttribute('data-swal2-queue-step');\n\n    if (queueStep) {\n      container.setAttribute('data-queue-step', queueStep);\n      document.body.removeAttribute('data-swal2-queue-step');\n    }\n  };\n\n  /**\n   * This module containts `WeakMap`s for each effectively-\"private  property\" that a `Swal` has.\n   * For example, to set the private property \"foo\" of `this` to \"bar\", you can `privateProps.foo.set(this, 'bar')`\n   * This is the approach that Babel will probably take to implement private methods/fields\n   *   https://github.com/tc39/proposal-private-methods\n   *   https://github.com/babel/babel/pull/7555\n   * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*\n   *   then we can use that language feature.\n   */\n  var privateProps = {\n    promise: new WeakMap(),\n    innerParams: new WeakMap(),\n    domCache: new WeakMap()\n  };\n\n  var inputTypes = ['input', 'file', 'range', 'select', 'radio', 'checkbox', 'textarea'];\n  var renderInput = function renderInput(instance, params) {\n    var content = getContent();\n    var innerParams = privateProps.innerParams.get(instance);\n    var rerender = !innerParams || params.input !== innerParams.input;\n    inputTypes.forEach(function (inputType) {\n      var inputClass = swalClasses[inputType];\n      var inputContainer = getChildByClass(content, inputClass); // set attributes\n\n      setAttributes(inputType, params.inputAttributes); // set class\n\n      inputContainer.className = inputClass;\n\n      if (rerender) {\n        hide(inputContainer);\n      }\n    });\n\n    if (params.input) {\n      if (rerender) {\n        showInput(params);\n      } // set custom class\n\n\n      setCustomClass(params);\n    }\n  };\n\n  var showInput = function showInput(params) {\n    if (!renderInputType[params.input]) {\n      return error(\"Unexpected type of input! Expected \\\"text\\\", \\\"email\\\", \\\"password\\\", \\\"number\\\", \\\"tel\\\", \\\"select\\\", \\\"radio\\\", \\\"checkbox\\\", \\\"textarea\\\", \\\"file\\\" or \\\"url\\\", got \\\"\".concat(params.input, \"\\\"\"));\n    }\n\n    var inputContainer = getInputContainer(params.input);\n    var input = renderInputType[params.input](inputContainer, params);\n    show(input); // input autofocus\n\n    setTimeout(function () {\n      focusInput(input);\n    });\n  };\n\n  var removeAttributes = function removeAttributes(input) {\n    for (var i = 0; i < input.attributes.length; i++) {\n      var attrName = input.attributes[i].name;\n\n      if (!(['type', 'value', 'style'].indexOf(attrName) !== -1)) {\n        input.removeAttribute(attrName);\n      }\n    }\n  };\n\n  var setAttributes = function setAttributes(inputType, inputAttributes) {\n    var input = getInput(getContent(), inputType);\n\n    if (!input) {\n      return;\n    }\n\n    removeAttributes(input);\n\n    for (var attr in inputAttributes) {\n      // Do not set a placeholder for <input type=\"range\">\n      // it'll crash Edge, #1298\n      if (inputType === 'range' && attr === 'placeholder') {\n        continue;\n      }\n\n      input.setAttribute(attr, inputAttributes[attr]);\n    }\n  };\n\n  var setCustomClass = function setCustomClass(params) {\n    var inputContainer = getInputContainer(params.input);\n\n    if (params.customClass) {\n      addClass(inputContainer, params.customClass.input);\n    }\n  };\n\n  var setInputPlaceholder = function setInputPlaceholder(input, params) {\n    if (!input.placeholder || params.inputPlaceholder) {\n      input.placeholder = params.inputPlaceholder;\n    }\n  };\n\n  var setInputLabel = function setInputLabel(input, prependTo, params) {\n    if (params.inputLabel) {\n      input.id = swalClasses.input;\n      var label = document.createElement('label');\n      var labelClass = swalClasses['input-label'];\n      label.setAttribute('for', input.id);\n      label.className = labelClass;\n      addClass(label, params.customClass.inputLabel);\n      label.innerText = params.inputLabel;\n      prependTo.insertAdjacentElement('beforebegin', label);\n    }\n  };\n\n  var getInputContainer = function getInputContainer(inputType) {\n    var inputClass = swalClasses[inputType] ? swalClasses[inputType] : swalClasses.input;\n    return getChildByClass(getContent(), inputClass);\n  };\n\n  var renderInputType = {};\n\n  renderInputType.text = renderInputType.email = renderInputType.password = renderInputType.number = renderInputType.tel = renderInputType.url = function (input, params) {\n    if (typeof params.inputValue === 'string' || typeof params.inputValue === 'number') {\n      input.value = params.inputValue;\n    } else if (!isPromise(params.inputValue)) {\n      warn(\"Unexpected type of inputValue! Expected \\\"string\\\", \\\"number\\\" or \\\"Promise\\\", got \\\"\".concat(_typeof(params.inputValue), \"\\\"\"));\n    }\n\n    setInputLabel(input, input, params);\n    setInputPlaceholder(input, params);\n    input.type = params.input;\n    return input;\n  };\n\n  renderInputType.file = function (input, params) {\n    setInputLabel(input, input, params);\n    setInputPlaceholder(input, params);\n    return input;\n  };\n\n  renderInputType.range = function (range, params) {\n    var rangeInput = range.querySelector('input');\n    var rangeOutput = range.querySelector('output');\n    rangeInput.value = params.inputValue;\n    rangeInput.type = params.input;\n    rangeOutput.value = params.inputValue;\n    setInputLabel(rangeInput, range, params);\n    return range;\n  };\n\n  renderInputType.select = function (select, params) {\n    select.textContent = '';\n\n    if (params.inputPlaceholder) {\n      var placeholder = document.createElement('option');\n      setInnerHtml(placeholder, params.inputPlaceholder);\n      placeholder.value = '';\n      placeholder.disabled = true;\n      placeholder.selected = true;\n      select.appendChild(placeholder);\n    }\n\n    setInputLabel(select, select, params);\n    return select;\n  };\n\n  renderInputType.radio = function (radio) {\n    radio.textContent = '';\n    return radio;\n  };\n\n  renderInputType.checkbox = function (checkboxContainer, params) {\n    var checkbox = getInput(getContent(), 'checkbox');\n    checkbox.value = 1;\n    checkbox.id = swalClasses.checkbox;\n    checkbox.checked = Boolean(params.inputValue);\n    var label = checkboxContainer.querySelector('span');\n    setInnerHtml(label, params.inputPlaceholder);\n    return checkboxContainer;\n  };\n\n  renderInputType.textarea = function (textarea, params) {\n    textarea.value = params.inputValue;\n    setInputPlaceholder(textarea, params);\n    setInputLabel(textarea, textarea, params);\n\n    var getPadding = function getPadding(el) {\n      return parseInt(window.getComputedStyle(el).paddingLeft) + parseInt(window.getComputedStyle(el).paddingRight);\n    };\n\n    if ('MutationObserver' in window) {\n      // #1699\n      var initialPopupWidth = parseInt(window.getComputedStyle(getPopup()).width);\n\n      var outputsize = function outputsize() {\n        var contentWidth = textarea.offsetWidth + getPadding(getPopup()) + getPadding(getContent());\n\n        if (contentWidth > initialPopupWidth) {\n          getPopup().style.width = \"\".concat(contentWidth, \"px\");\n        } else {\n          getPopup().style.width = null;\n        }\n      };\n\n      new MutationObserver(outputsize).observe(textarea, {\n        attributes: true,\n        attributeFilter: ['style']\n      });\n    }\n\n    return textarea;\n  };\n\n  var renderContent = function renderContent(instance, params) {\n    var htmlContainer = getHtmlContainer();\n    applyCustomClass(htmlContainer, params, 'htmlContainer'); // Content as HTML\n\n    if (params.html) {\n      parseHtmlToContainer(params.html, htmlContainer);\n      show(htmlContainer, 'block'); // Content as plain text\n    } else if (params.text) {\n      htmlContainer.textContent = params.text;\n      show(htmlContainer, 'block'); // No content\n    } else {\n      hide(htmlContainer);\n    }\n\n    renderInput(instance, params); // Custom class\n\n    applyCustomClass(getContent(), params, 'content');\n  };\n\n  var renderFooter = function renderFooter(instance, params) {\n    var footer = getFooter();\n    toggle(footer, params.footer);\n\n    if (params.footer) {\n      parseHtmlToContainer(params.footer, footer);\n    } // Custom class\n\n\n    applyCustomClass(footer, params, 'footer');\n  };\n\n  var renderCloseButton = function renderCloseButton(instance, params) {\n    var closeButton = getCloseButton();\n    setInnerHtml(closeButton, params.closeButtonHtml); // Custom class\n\n    applyCustomClass(closeButton, params, 'closeButton');\n    toggle(closeButton, params.showCloseButton);\n    closeButton.setAttribute('aria-label', params.closeButtonAriaLabel);\n  };\n\n  var renderIcon = function renderIcon(instance, params) {\n    var innerParams = privateProps.innerParams.get(instance);\n    var icon = getIcon(); // if the given icon already rendered, apply the styling without re-rendering the icon\n\n    if (innerParams && params.icon === innerParams.icon) {\n      // Custom or default content\n      setContent(icon, params);\n      applyStyles(icon, params);\n      return;\n    }\n\n    if (!params.icon && !params.iconHtml) {\n      return hide(icon);\n    }\n\n    if (params.icon && Object.keys(iconTypes).indexOf(params.icon) === -1) {\n      error(\"Unknown icon! Expected \\\"success\\\", \\\"error\\\", \\\"warning\\\", \\\"info\\\" or \\\"question\\\", got \\\"\".concat(params.icon, \"\\\"\"));\n      return hide(icon);\n    }\n\n    show(icon); // Custom or default content\n\n    setContent(icon, params);\n    applyStyles(icon, params); // Animate icon\n\n    addClass(icon, params.showClass.icon);\n  };\n\n  var applyStyles = function applyStyles(icon, params) {\n    for (var iconType in iconTypes) {\n      if (params.icon !== iconType) {\n        removeClass(icon, iconTypes[iconType]);\n      }\n    }\n\n    addClass(icon, iconTypes[params.icon]); // Icon color\n\n    setColor(icon, params); // Success icon background color\n\n    adjustSuccessIconBackgoundColor(); // Custom class\n\n    applyCustomClass(icon, params, 'icon');\n  }; // Adjust success icon background color to match the popup background color\n\n\n  var adjustSuccessIconBackgoundColor = function adjustSuccessIconBackgoundColor() {\n    var popup = getPopup();\n    var popupBackgroundColor = window.getComputedStyle(popup).getPropertyValue('background-color');\n    var successIconParts = popup.querySelectorAll('[class^=swal2-success-circular-line], .swal2-success-fix');\n\n    for (var i = 0; i < successIconParts.length; i++) {\n      successIconParts[i].style.backgroundColor = popupBackgroundColor;\n    }\n  };\n\n  var setContent = function setContent(icon, params) {\n    icon.textContent = '';\n\n    if (params.iconHtml) {\n      setInnerHtml(icon, iconContent(params.iconHtml));\n    } else if (params.icon === 'success') {\n      setInnerHtml(icon, \"\\n      <div class=\\\"swal2-success-circular-line-left\\\"></div>\\n      <span class=\\\"swal2-success-line-tip\\\"></span> <span class=\\\"swal2-success-line-long\\\"></span>\\n      <div class=\\\"swal2-success-ring\\\"></div> <div class=\\\"swal2-success-fix\\\"></div>\\n      <div class=\\\"swal2-success-circular-line-right\\\"></div>\\n    \");\n    } else if (params.icon === 'error') {\n      setInnerHtml(icon, \"\\n      <span class=\\\"swal2-x-mark\\\">\\n        <span class=\\\"swal2-x-mark-line-left\\\"></span>\\n        <span class=\\\"swal2-x-mark-line-right\\\"></span>\\n      </span>\\n    \");\n    } else {\n      var defaultIconHtml = {\n        question: '?',\n        warning: '!',\n        info: 'i'\n      };\n      setInnerHtml(icon, iconContent(defaultIconHtml[params.icon]));\n    }\n  };\n\n  var setColor = function setColor(icon, params) {\n    if (!params.iconColor) {\n      return;\n    }\n\n    icon.style.color = params.iconColor;\n    icon.style.borderColor = params.iconColor;\n\n    for (var _i = 0, _arr = ['.swal2-success-line-tip', '.swal2-success-line-long', '.swal2-x-mark-line-left', '.swal2-x-mark-line-right']; _i < _arr.length; _i++) {\n      var sel = _arr[_i];\n      setStyle(icon, sel, 'backgroundColor', params.iconColor);\n    }\n\n    setStyle(icon, '.swal2-success-ring', 'borderColor', params.iconColor);\n  };\n\n  var iconContent = function iconContent(content) {\n    return \"<div class=\\\"\".concat(swalClasses['icon-content'], \"\\\">\").concat(content, \"</div>\");\n  };\n\n  var renderImage = function renderImage(instance, params) {\n    var image = getImage();\n\n    if (!params.imageUrl) {\n      return hide(image);\n    }\n\n    show(image, ''); // Src, alt\n\n    image.setAttribute('src', params.imageUrl);\n    image.setAttribute('alt', params.imageAlt); // Width, height\n\n    applyNumericalStyle(image, 'width', params.imageWidth);\n    applyNumericalStyle(image, 'height', params.imageHeight); // Class\n\n    image.className = swalClasses.image;\n    applyCustomClass(image, params, 'image');\n  };\n\n  var currentSteps = [];\n  /*\n   * Global function for chaining sweetAlert popups\n   */\n\n  var queue = function queue(steps) {\n    var Swal = this;\n    currentSteps = steps;\n\n    var resetAndResolve = function resetAndResolve(resolve, value) {\n      currentSteps = [];\n      resolve(value);\n    };\n\n    var queueResult = [];\n    return new Promise(function (resolve) {\n      (function step(i, callback) {\n        if (i < currentSteps.length) {\n          document.body.setAttribute('data-swal2-queue-step', i);\n          Swal.fire(currentSteps[i]).then(function (result) {\n            if (typeof result.value !== 'undefined') {\n              queueResult.push(result.value);\n              step(i + 1, callback);\n            } else {\n              resetAndResolve(resolve, {\n                dismiss: result.dismiss\n              });\n            }\n          });\n        } else {\n          resetAndResolve(resolve, {\n            value: queueResult\n          });\n        }\n      })(0);\n    });\n  };\n  /*\n   * Global function for getting the index of current popup in queue\n   */\n\n  var getQueueStep = function getQueueStep() {\n    return getContainer() && getContainer().getAttribute('data-queue-step');\n  };\n  /*\n   * Global function for inserting a popup to the queue\n   */\n\n  var insertQueueStep = function insertQueueStep(step, index) {\n    if (index && index < currentSteps.length) {\n      return currentSteps.splice(index, 0, step);\n    }\n\n    return currentSteps.push(step);\n  };\n  /*\n   * Global function for deleting a popup from the queue\n   */\n\n  var deleteQueueStep = function deleteQueueStep(index) {\n    if (typeof currentSteps[index] !== 'undefined') {\n      currentSteps.splice(index, 1);\n    }\n  };\n\n  var createStepElement = function createStepElement(step) {\n    var stepEl = document.createElement('li');\n    addClass(stepEl, swalClasses['progress-step']);\n    setInnerHtml(stepEl, step);\n    return stepEl;\n  };\n\n  var createLineElement = function createLineElement(params) {\n    var lineEl = document.createElement('li');\n    addClass(lineEl, swalClasses['progress-step-line']);\n\n    if (params.progressStepsDistance) {\n      lineEl.style.width = params.progressStepsDistance;\n    }\n\n    return lineEl;\n  };\n\n  var renderProgressSteps = function renderProgressSteps(instance, params) {\n    var progressStepsContainer = getProgressSteps();\n\n    if (!params.progressSteps || params.progressSteps.length === 0) {\n      return hide(progressStepsContainer);\n    }\n\n    show(progressStepsContainer);\n    progressStepsContainer.textContent = '';\n    var currentProgressStep = parseInt(params.currentProgressStep === undefined ? getQueueStep() : params.currentProgressStep);\n\n    if (currentProgressStep >= params.progressSteps.length) {\n      warn('Invalid currentProgressStep parameter, it should be less than progressSteps.length ' + '(currentProgressStep like JS arrays starts from 0)');\n    }\n\n    params.progressSteps.forEach(function (step, index) {\n      var stepEl = createStepElement(step);\n      progressStepsContainer.appendChild(stepEl);\n\n      if (index === currentProgressStep) {\n        addClass(stepEl, swalClasses['active-progress-step']);\n      }\n\n      if (index !== params.progressSteps.length - 1) {\n        var lineEl = createLineElement(params);\n        progressStepsContainer.appendChild(lineEl);\n      }\n    });\n  };\n\n  var renderTitle = function renderTitle(instance, params) {\n    var title = getTitle();\n    toggle(title, params.title || params.titleText);\n\n    if (params.title) {\n      parseHtmlToContainer(params.title, title);\n    }\n\n    if (params.titleText) {\n      title.innerText = params.titleText;\n    } // Custom class\n\n\n    applyCustomClass(title, params, 'title');\n  };\n\n  var renderHeader = function renderHeader(instance, params) {\n    var header = getHeader(); // Custom class\n\n    applyCustomClass(header, params, 'header'); // Progress steps\n\n    renderProgressSteps(instance, params); // Icon\n\n    renderIcon(instance, params); // Image\n\n    renderImage(instance, params); // Title\n\n    renderTitle(instance, params); // Close button\n\n    renderCloseButton(instance, params);\n  };\n\n  var renderPopup = function renderPopup(instance, params) {\n    var container = getContainer();\n    var popup = getPopup(); // Width\n\n    if (params.toast) {\n      // #2170\n      applyNumericalStyle(container, 'width', params.width);\n      popup.style.width = '100%';\n    } else {\n      applyNumericalStyle(popup, 'width', params.width);\n    } // Padding\n\n\n    applyNumericalStyle(popup, 'padding', params.padding); // Background\n\n    if (params.background) {\n      popup.style.background = params.background;\n    } // Classes\n\n\n    addClasses(popup, params);\n  };\n\n  var addClasses = function addClasses(popup, params) {\n    // Default Class + showClass when updating Swal.update({})\n    popup.className = \"\".concat(swalClasses.popup, \" \").concat(isVisible(popup) ? params.showClass.popup : '');\n\n    if (params.toast) {\n      addClass([document.documentElement, document.body], swalClasses['toast-shown']);\n      addClass(popup, swalClasses.toast);\n    } else {\n      addClass(popup, swalClasses.modal);\n    } // Custom class\n\n\n    applyCustomClass(popup, params, 'popup');\n\n    if (typeof params.customClass === 'string') {\n      addClass(popup, params.customClass);\n    } // Icon class (#1842)\n\n\n    if (params.icon) {\n      addClass(popup, swalClasses[\"icon-\".concat(params.icon)]);\n    }\n  };\n\n  var render = function render(instance, params) {\n    renderPopup(instance, params);\n    renderContainer(instance, params);\n    renderHeader(instance, params);\n    renderContent(instance, params);\n    renderActions(instance, params);\n    renderFooter(instance, params);\n\n    if (typeof params.didRender === 'function') {\n      params.didRender(getPopup());\n    } else if (typeof params.onRender === 'function') {\n      params.onRender(getPopup()); // @deprecated\n    }\n  };\n\n  /*\n   * Global function to determine if SweetAlert2 popup is shown\n   */\n\n  var isVisible$1 = function isVisible$$1() {\n    return isVisible(getPopup());\n  };\n  /*\n   * Global function to click 'Confirm' button\n   */\n\n  var clickConfirm = function clickConfirm() {\n    return getConfirmButton() && getConfirmButton().click();\n  };\n  /*\n   * Global function to click 'Deny' button\n   */\n\n  var clickDeny = function clickDeny() {\n    return getDenyButton() && getDenyButton().click();\n  };\n  /*\n   * Global function to click 'Cancel' button\n   */\n\n  var clickCancel = function clickCancel() {\n    return getCancelButton() && getCancelButton().click();\n  };\n\n  function fire() {\n    var Swal = this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _construct(Swal, args);\n  }\n\n  /**\n   * Returns an extended version of `Swal` containing `params` as defaults.\n   * Useful for reusing Swal configuration.\n   *\n   * For example:\n   *\n   * Before:\n   * const textPromptOptions = { input: 'text', showCancelButton: true }\n   * const {value: firstName} = await Swal.fire({ ...textPromptOptions, title: 'What is your first name?' })\n   * const {value: lastName} = await Swal.fire({ ...textPromptOptions, title: 'What is your last name?' })\n   *\n   * After:\n   * const TextPrompt = Swal.mixin({ input: 'text', showCancelButton: true })\n   * const {value: firstName} = await TextPrompt('What is your first name?')\n   * const {value: lastName} = await TextPrompt('What is your last name?')\n   *\n   * @param mixinParams\n   */\n  function mixin(mixinParams) {\n    var MixinSwal = /*#__PURE__*/function (_this) {\n      _inherits(MixinSwal, _this);\n\n      var _super = _createSuper(MixinSwal);\n\n      function MixinSwal() {\n        _classCallCheck(this, MixinSwal);\n\n        return _super.apply(this, arguments);\n      }\n\n      _createClass(MixinSwal, [{\n        key: \"_main\",\n        value: function _main(params, priorityMixinParams) {\n          return _get(_getPrototypeOf(MixinSwal.prototype), \"_main\", this).call(this, params, _extends({}, mixinParams, priorityMixinParams));\n        }\n      }]);\n\n      return MixinSwal;\n    }(this);\n\n    return MixinSwal;\n  }\n\n  /**\n   * Shows loader (spinner), this is useful with AJAX requests.\n   * By default the loader be shown instead of the \"Confirm\" button.\n   */\n\n  var showLoading = function showLoading(buttonToReplace) {\n    var popup = getPopup();\n\n    if (!popup) {\n      Swal.fire();\n    }\n\n    popup = getPopup();\n    var actions = getActions();\n    var loader = getLoader();\n\n    if (!buttonToReplace && isVisible(getConfirmButton())) {\n      buttonToReplace = getConfirmButton();\n    }\n\n    show(actions);\n\n    if (buttonToReplace) {\n      hide(buttonToReplace);\n      loader.setAttribute('data-button-to-replace', buttonToReplace.className);\n    }\n\n    loader.parentNode.insertBefore(loader, buttonToReplace);\n    addClass([popup, actions], swalClasses.loading);\n    show(loader);\n    popup.setAttribute('data-loading', true);\n    popup.setAttribute('aria-busy', true);\n    popup.focus();\n  };\n\n  var RESTORE_FOCUS_TIMEOUT = 100;\n\n  var globalState = {};\n\n  var focusPreviousActiveElement = function focusPreviousActiveElement() {\n    if (globalState.previousActiveElement && globalState.previousActiveElement.focus) {\n      globalState.previousActiveElement.focus();\n      globalState.previousActiveElement = null;\n    } else if (document.body) {\n      document.body.focus();\n    }\n  }; // Restore previous active (focused) element\n\n\n  var restoreActiveElement = function restoreActiveElement() {\n    return new Promise(function (resolve) {\n      var x = window.scrollX;\n      var y = window.scrollY;\n      globalState.restoreFocusTimeout = setTimeout(function () {\n        focusPreviousActiveElement();\n        resolve();\n      }, RESTORE_FOCUS_TIMEOUT); // issues/900\n\n      /* istanbul ignore if */\n\n      if (typeof x !== 'undefined' && typeof y !== 'undefined') {\n        // IE doesn't have scrollX/scrollY support\n        window.scrollTo(x, y);\n      }\n    });\n  };\n\n  /**\n   * If `timer` parameter is set, returns number of milliseconds of timer remained.\n   * Otherwise, returns undefined.\n   */\n\n  var getTimerLeft = function getTimerLeft() {\n    return globalState.timeout && globalState.timeout.getTimerLeft();\n  };\n  /**\n   * Stop timer. Returns number of milliseconds of timer remained.\n   * If `timer` parameter isn't set, returns undefined.\n   */\n\n  var stopTimer = function stopTimer() {\n    if (globalState.timeout) {\n      stopTimerProgressBar();\n      return globalState.timeout.stop();\n    }\n  };\n  /**\n   * Resume timer. Returns number of milliseconds of timer remained.\n   * If `timer` parameter isn't set, returns undefined.\n   */\n\n  var resumeTimer = function resumeTimer() {\n    if (globalState.timeout) {\n      var remaining = globalState.timeout.start();\n      animateTimerProgressBar(remaining);\n      return remaining;\n    }\n  };\n  /**\n   * Resume timer. Returns number of milliseconds of timer remained.\n   * If `timer` parameter isn't set, returns undefined.\n   */\n\n  var toggleTimer = function toggleTimer() {\n    var timer = globalState.timeout;\n    return timer && (timer.running ? stopTimer() : resumeTimer());\n  };\n  /**\n   * Increase timer. Returns number of milliseconds of an updated timer.\n   * If `timer` parameter isn't set, returns undefined.\n   */\n\n  var increaseTimer = function increaseTimer(n) {\n    if (globalState.timeout) {\n      var remaining = globalState.timeout.increase(n);\n      animateTimerProgressBar(remaining, true);\n      return remaining;\n    }\n  };\n  /**\n   * Check if timer is running. Returns true if timer is running\n   * or false if timer is paused or stopped.\n   * If `timer` parameter isn't set, returns undefined\n   */\n\n  var isTimerRunning = function isTimerRunning() {\n    return globalState.timeout && globalState.timeout.isRunning();\n  };\n\n  var bodyClickListenerAdded = false;\n  var clickHandlers = {};\n  function bindClickHandler() {\n    var attr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'data-swal-template';\n    clickHandlers[attr] = this;\n\n    if (!bodyClickListenerAdded) {\n      document.body.addEventListener('click', bodyClickListener);\n      bodyClickListenerAdded = true;\n    }\n  }\n\n  var bodyClickListener = function bodyClickListener(event) {\n    // 1. using .parentNode instead of event.path because of better support by old browsers https://stackoverflow.com/a/39245638\n    // 2. using .parentNode instead of .parentElement because of IE11 + SVG https://stackoverflow.com/a/36270354\n    for (var el = event.target; el && el !== document; el = el.parentNode) {\n      for (var attr in clickHandlers) {\n        var template = el.getAttribute(attr);\n\n        if (template) {\n          clickHandlers[attr].fire({\n            template: template\n          });\n          return;\n        }\n      }\n    }\n  };\n\n  var defaultParams = {\n    title: '',\n    titleText: '',\n    text: '',\n    html: '',\n    footer: '',\n    icon: undefined,\n    iconColor: undefined,\n    iconHtml: undefined,\n    template: undefined,\n    toast: false,\n    animation: true,\n    showClass: {\n      popup: 'swal2-show',\n      backdrop: 'swal2-backdrop-show',\n      icon: 'swal2-icon-show'\n    },\n    hideClass: {\n      popup: 'swal2-hide',\n      backdrop: 'swal2-backdrop-hide',\n      icon: 'swal2-icon-hide'\n    },\n    customClass: {},\n    target: 'body',\n    backdrop: true,\n    heightAuto: true,\n    allowOutsideClick: true,\n    allowEscapeKey: true,\n    allowEnterKey: true,\n    stopKeydownPropagation: true,\n    keydownListenerCapture: false,\n    showConfirmButton: true,\n    showDenyButton: false,\n    showCancelButton: false,\n    preConfirm: undefined,\n    preDeny: undefined,\n    confirmButtonText: 'OK',\n    confirmButtonAriaLabel: '',\n    confirmButtonColor: undefined,\n    denyButtonText: 'No',\n    denyButtonAriaLabel: '',\n    denyButtonColor: undefined,\n    cancelButtonText: 'Cancel',\n    cancelButtonAriaLabel: '',\n    cancelButtonColor: undefined,\n    buttonsStyling: true,\n    reverseButtons: false,\n    focusConfirm: true,\n    focusDeny: false,\n    focusCancel: false,\n    showCloseButton: false,\n    closeButtonHtml: '&times;',\n    closeButtonAriaLabel: 'Close this dialog',\n    loaderHtml: '',\n    showLoaderOnConfirm: false,\n    showLoaderOnDeny: false,\n    imageUrl: undefined,\n    imageWidth: undefined,\n    imageHeight: undefined,\n    imageAlt: '',\n    timer: undefined,\n    timerProgressBar: false,\n    width: undefined,\n    padding: undefined,\n    background: undefined,\n    input: undefined,\n    inputPlaceholder: '',\n    inputLabel: '',\n    inputValue: '',\n    inputOptions: {},\n    inputAutoTrim: true,\n    inputAttributes: {},\n    inputValidator: undefined,\n    returnInputValueOnDeny: false,\n    validationMessage: undefined,\n    grow: false,\n    position: 'center',\n    progressSteps: [],\n    currentProgressStep: undefined,\n    progressStepsDistance: undefined,\n    onBeforeOpen: undefined,\n    onOpen: undefined,\n    willOpen: undefined,\n    didOpen: undefined,\n    onRender: undefined,\n    didRender: undefined,\n    onClose: undefined,\n    onAfterClose: undefined,\n    willClose: undefined,\n    didClose: undefined,\n    onDestroy: undefined,\n    didDestroy: undefined,\n    scrollbarPadding: true\n  };\n  var updatableParams = ['allowEscapeKey', 'allowOutsideClick', 'background', 'buttonsStyling', 'cancelButtonAriaLabel', 'cancelButtonColor', 'cancelButtonText', 'closeButtonAriaLabel', 'closeButtonHtml', 'confirmButtonAriaLabel', 'confirmButtonColor', 'confirmButtonText', 'currentProgressStep', 'customClass', 'denyButtonAriaLabel', 'denyButtonColor', 'denyButtonText', 'didClose', 'didDestroy', 'footer', 'hideClass', 'html', 'icon', 'iconColor', 'iconHtml', 'imageAlt', 'imageHeight', 'imageUrl', 'imageWidth', 'onAfterClose', 'onClose', 'onDestroy', 'progressSteps', 'reverseButtons', 'showCancelButton', 'showCloseButton', 'showConfirmButton', 'showDenyButton', 'text', 'title', 'titleText', 'willClose'];\n  var deprecatedParams = {\n    animation: 'showClass\" and \"hideClass',\n    onBeforeOpen: 'willOpen',\n    onOpen: 'didOpen',\n    onRender: 'didRender',\n    onClose: 'willClose',\n    onAfterClose: 'didClose',\n    onDestroy: 'didDestroy'\n  };\n  var toastIncompatibleParams = ['allowOutsideClick', 'allowEnterKey', 'backdrop', 'focusConfirm', 'focusDeny', 'focusCancel', 'heightAuto', 'keydownListenerCapture'];\n  /**\n   * Is valid parameter\n   * @param {String} paramName\n   */\n\n  var isValidParameter = function isValidParameter(paramName) {\n    return Object.prototype.hasOwnProperty.call(defaultParams, paramName);\n  };\n  /**\n   * Is valid parameter for Swal.update() method\n   * @param {String} paramName\n   */\n\n  var isUpdatableParameter = function isUpdatableParameter(paramName) {\n    return updatableParams.indexOf(paramName) !== -1;\n  };\n  /**\n   * Is deprecated parameter\n   * @param {String} paramName\n   */\n\n  var isDeprecatedParameter = function isDeprecatedParameter(paramName) {\n    return deprecatedParams[paramName];\n  };\n\n  var checkIfParamIsValid = function checkIfParamIsValid(param) {\n    if (!isValidParameter(param)) {\n      warn(\"Unknown parameter \\\"\".concat(param, \"\\\"\"));\n    }\n  };\n\n  var checkIfToastParamIsValid = function checkIfToastParamIsValid(param) {\n    if (toastIncompatibleParams.indexOf(param) !== -1) {\n      warn(\"The parameter \\\"\".concat(param, \"\\\" is incompatible with toasts\"));\n    }\n  };\n\n  var checkIfParamIsDeprecated = function checkIfParamIsDeprecated(param) {\n    if (isDeprecatedParameter(param)) {\n      warnAboutDeprecation(param, isDeprecatedParameter(param));\n    }\n  };\n  /**\n   * Show relevant warnings for given params\n   *\n   * @param params\n   */\n\n\n  var showWarningsForParams = function showWarningsForParams(params) {\n    for (var param in params) {\n      checkIfParamIsValid(param);\n\n      if (params.toast) {\n        checkIfToastParamIsValid(param);\n      }\n\n      checkIfParamIsDeprecated(param);\n    }\n  };\n\n\n\n  var staticMethods = /*#__PURE__*/Object.freeze({\n    isValidParameter: isValidParameter,\n    isUpdatableParameter: isUpdatableParameter,\n    isDeprecatedParameter: isDeprecatedParameter,\n    argsToParams: argsToParams,\n    isVisible: isVisible$1,\n    clickConfirm: clickConfirm,\n    clickDeny: clickDeny,\n    clickCancel: clickCancel,\n    getContainer: getContainer,\n    getPopup: getPopup,\n    getTitle: getTitle,\n    getContent: getContent,\n    getHtmlContainer: getHtmlContainer,\n    getImage: getImage,\n    getIcon: getIcon,\n    getInputLabel: getInputLabel,\n    getCloseButton: getCloseButton,\n    getActions: getActions,\n    getConfirmButton: getConfirmButton,\n    getDenyButton: getDenyButton,\n    getCancelButton: getCancelButton,\n    getLoader: getLoader,\n    getHeader: getHeader,\n    getFooter: getFooter,\n    getTimerProgressBar: getTimerProgressBar,\n    getFocusableElements: getFocusableElements,\n    getValidationMessage: getValidationMessage,\n    isLoading: isLoading,\n    fire: fire,\n    mixin: mixin,\n    queue: queue,\n    getQueueStep: getQueueStep,\n    insertQueueStep: insertQueueStep,\n    deleteQueueStep: deleteQueueStep,\n    showLoading: showLoading,\n    enableLoading: showLoading,\n    getTimerLeft: getTimerLeft,\n    stopTimer: stopTimer,\n    resumeTimer: resumeTimer,\n    toggleTimer: toggleTimer,\n    increaseTimer: increaseTimer,\n    isTimerRunning: isTimerRunning,\n    bindClickHandler: bindClickHandler\n  });\n\n  /**\n   * Hides loader and shows back the button which was hidden by .showLoading()\n   */\n\n  function hideLoading() {\n    // do nothing if popup is closed\n    var innerParams = privateProps.innerParams.get(this);\n\n    if (!innerParams) {\n      return;\n    }\n\n    var domCache = privateProps.domCache.get(this);\n    hide(domCache.loader);\n    var buttonToReplace = domCache.popup.getElementsByClassName(domCache.loader.getAttribute('data-button-to-replace'));\n\n    if (buttonToReplace.length) {\n      show(buttonToReplace[0], 'inline-block');\n    } else if (allButtonsAreHidden()) {\n      hide(domCache.actions);\n    }\n\n    removeClass([domCache.popup, domCache.actions], swalClasses.loading);\n    domCache.popup.removeAttribute('aria-busy');\n    domCache.popup.removeAttribute('data-loading');\n    domCache.confirmButton.disabled = false;\n    domCache.denyButton.disabled = false;\n    domCache.cancelButton.disabled = false;\n  }\n\n  function getInput$1(instance) {\n    var innerParams = privateProps.innerParams.get(instance || this);\n    var domCache = privateProps.domCache.get(instance || this);\n\n    if (!domCache) {\n      return null;\n    }\n\n    return getInput(domCache.content, innerParams.input);\n  }\n\n  var fixScrollbar = function fixScrollbar() {\n    // for queues, do not do this more than once\n    if (states.previousBodyPadding !== null) {\n      return;\n    } // if the body has overflow\n\n\n    if (document.body.scrollHeight > window.innerHeight) {\n      // add padding so the content doesn't shift after removal of scrollbar\n      states.previousBodyPadding = parseInt(window.getComputedStyle(document.body).getPropertyValue('padding-right'));\n      document.body.style.paddingRight = \"\".concat(states.previousBodyPadding + measureScrollbar(), \"px\");\n    }\n  };\n  var undoScrollbar = function undoScrollbar() {\n    if (states.previousBodyPadding !== null) {\n      document.body.style.paddingRight = \"\".concat(states.previousBodyPadding, \"px\");\n      states.previousBodyPadding = null;\n    }\n  };\n\n  /* istanbul ignore file */\n\n  var iOSfix = function iOSfix() {\n    var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream || navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1;\n\n    if (iOS && !hasClass(document.body, swalClasses.iosfix)) {\n      var offset = document.body.scrollTop;\n      document.body.style.top = \"\".concat(offset * -1, \"px\");\n      addClass(document.body, swalClasses.iosfix);\n      lockBodyScroll();\n      addBottomPaddingForTallPopups(); // #1948\n    }\n  };\n\n  var addBottomPaddingForTallPopups = function addBottomPaddingForTallPopups() {\n    var safari = !navigator.userAgent.match(/(CriOS|FxiOS|EdgiOS|YaBrowser|UCBrowser)/i);\n\n    if (safari) {\n      var bottomPanelHeight = 44;\n\n      if (getPopup().scrollHeight > window.innerHeight - bottomPanelHeight) {\n        getContainer().style.paddingBottom = \"\".concat(bottomPanelHeight, \"px\");\n      }\n    }\n  };\n\n  var lockBodyScroll = function lockBodyScroll() {\n    // #1246\n    var container = getContainer();\n    var preventTouchMove;\n\n    container.ontouchstart = function (e) {\n      preventTouchMove = shouldPreventTouchMove(e);\n    };\n\n    container.ontouchmove = function (e) {\n      if (preventTouchMove) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    };\n  };\n\n  var shouldPreventTouchMove = function shouldPreventTouchMove(event) {\n    var target = event.target;\n    var container = getContainer();\n\n    if (isStylys(event) || isZoom(event)) {\n      return false;\n    }\n\n    if (target === container) {\n      return true;\n    }\n\n    if (!isScrollable(container) && target.tagName !== 'INPUT' && // #1603\n    !(isScrollable(getContent()) && // #1944\n    getContent().contains(target))) {\n      return true;\n    }\n\n    return false;\n  };\n\n  var isStylys = function isStylys(event) {\n    // #1786\n    return event.touches && event.touches.length && event.touches[0].touchType === 'stylus';\n  };\n\n  var isZoom = function isZoom(event) {\n    // #1891\n    return event.touches && event.touches.length > 1;\n  };\n\n  var undoIOSfix = function undoIOSfix() {\n    if (hasClass(document.body, swalClasses.iosfix)) {\n      var offset = parseInt(document.body.style.top, 10);\n      removeClass(document.body, swalClasses.iosfix);\n      document.body.style.top = '';\n      document.body.scrollTop = offset * -1;\n    }\n  };\n\n  /* istanbul ignore file */\n\n  var isIE11 = function isIE11() {\n    return !!window.MSInputMethodContext && !!document.documentMode;\n  }; // Fix IE11 centering sweetalert2/issues/933\n\n\n  var fixVerticalPositionIE = function fixVerticalPositionIE() {\n    var container = getContainer();\n    var popup = getPopup();\n    container.style.removeProperty('align-items');\n\n    if (popup.offsetTop < 0) {\n      container.style.alignItems = 'flex-start';\n    }\n  };\n\n  var IEfix = function IEfix() {\n    if (typeof window !== 'undefined' && isIE11()) {\n      fixVerticalPositionIE();\n      window.addEventListener('resize', fixVerticalPositionIE);\n    }\n  };\n  var undoIEfix = function undoIEfix() {\n    if (typeof window !== 'undefined' && isIE11()) {\n      window.removeEventListener('resize', fixVerticalPositionIE);\n    }\n  };\n\n  // Adding aria-hidden=\"true\" to elements outside of the active modal dialog ensures that\n  // elements not within the active modal dialog will not be surfaced if a user opens a screen\n  // reader’s list of elements (headings, form controls, landmarks, etc.) in the document.\n\n  var setAriaHidden = function setAriaHidden() {\n    var bodyChildren = toArray(document.body.children);\n    bodyChildren.forEach(function (el) {\n      if (el === getContainer() || contains(el, getContainer())) {\n        return;\n      }\n\n      if (el.hasAttribute('aria-hidden')) {\n        el.setAttribute('data-previous-aria-hidden', el.getAttribute('aria-hidden'));\n      }\n\n      el.setAttribute('aria-hidden', 'true');\n    });\n  };\n  var unsetAriaHidden = function unsetAriaHidden() {\n    var bodyChildren = toArray(document.body.children);\n    bodyChildren.forEach(function (el) {\n      if (el.hasAttribute('data-previous-aria-hidden')) {\n        el.setAttribute('aria-hidden', el.getAttribute('data-previous-aria-hidden'));\n        el.removeAttribute('data-previous-aria-hidden');\n      } else {\n        el.removeAttribute('aria-hidden');\n      }\n    });\n  };\n\n  /**\n   * This module containts `WeakMap`s for each effectively-\"private  property\" that a `Swal` has.\n   * For example, to set the private property \"foo\" of `this` to \"bar\", you can `privateProps.foo.set(this, 'bar')`\n   * This is the approach that Babel will probably take to implement private methods/fields\n   *   https://github.com/tc39/proposal-private-methods\n   *   https://github.com/babel/babel/pull/7555\n   * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*\n   *   then we can use that language feature.\n   */\n  var privateMethods = {\n    swalPromiseResolve: new WeakMap()\n  };\n\n  /*\n   * Instance method to close sweetAlert\n   */\n\n  function removePopupAndResetState(instance, container, isToast$$1, didClose) {\n    if (isToast$$1) {\n      triggerDidCloseAndDispose(instance, didClose);\n    } else {\n      restoreActiveElement().then(function () {\n        return triggerDidCloseAndDispose(instance, didClose);\n      });\n      globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, {\n        capture: globalState.keydownListenerCapture\n      });\n      globalState.keydownHandlerAdded = false;\n    }\n\n    if (container.parentNode && !document.body.getAttribute('data-swal2-queue-step')) {\n      container.parentNode.removeChild(container);\n    }\n\n    if (isModal()) {\n      undoScrollbar();\n      undoIOSfix();\n      undoIEfix();\n      unsetAriaHidden();\n    }\n\n    removeBodyClasses();\n  }\n\n  function removeBodyClasses() {\n    removeClass([document.documentElement, document.body], [swalClasses.shown, swalClasses['height-auto'], swalClasses['no-backdrop'], swalClasses['toast-shown'], swalClasses['toast-column']]);\n  }\n\n  function close(resolveValue) {\n    var popup = getPopup();\n\n    if (!popup) {\n      return;\n    }\n\n    resolveValue = prepareResolveValue(resolveValue);\n    var innerParams = privateProps.innerParams.get(this);\n\n    if (!innerParams || hasClass(popup, innerParams.hideClass.popup)) {\n      return;\n    }\n\n    var swalPromiseResolve = privateMethods.swalPromiseResolve.get(this);\n    removeClass(popup, innerParams.showClass.popup);\n    addClass(popup, innerParams.hideClass.popup);\n    var backdrop = getContainer();\n    removeClass(backdrop, innerParams.showClass.backdrop);\n    addClass(backdrop, innerParams.hideClass.backdrop);\n    handlePopupAnimation(this, popup, innerParams); // Resolve Swal promise\n\n    swalPromiseResolve(resolveValue);\n  }\n\n  var prepareResolveValue = function prepareResolveValue(resolveValue) {\n    // When user calls Swal.close()\n    if (typeof resolveValue === 'undefined') {\n      return {\n        isConfirmed: false,\n        isDenied: false,\n        isDismissed: true\n      };\n    }\n\n    return _extends({\n      isConfirmed: false,\n      isDenied: false,\n      isDismissed: false\n    }, resolveValue);\n  };\n\n  var handlePopupAnimation = function handlePopupAnimation(instance, popup, innerParams) {\n    var container = getContainer(); // If animation is supported, animate\n\n    var animationIsSupported = animationEndEvent && hasCssAnimation(popup);\n    var onClose = innerParams.onClose,\n        onAfterClose = innerParams.onAfterClose,\n        willClose = innerParams.willClose,\n        didClose = innerParams.didClose;\n    runDidClose(popup, willClose, onClose);\n\n    if (animationIsSupported) {\n      animatePopup(instance, popup, container, didClose || onAfterClose);\n    } else {\n      // Otherwise, remove immediately\n      removePopupAndResetState(instance, container, isToast(), didClose || onAfterClose);\n    }\n  };\n\n  var runDidClose = function runDidClose(popup, willClose, onClose) {\n    if (willClose !== null && typeof willClose === 'function') {\n      willClose(popup);\n    } else if (onClose !== null && typeof onClose === 'function') {\n      onClose(popup); // @deprecated\n    }\n  };\n\n  var animatePopup = function animatePopup(instance, popup, container, didClose) {\n    globalState.swalCloseEventFinishedCallback = removePopupAndResetState.bind(null, instance, container, isToast(), didClose);\n    popup.addEventListener(animationEndEvent, function (e) {\n      if (e.target === popup) {\n        globalState.swalCloseEventFinishedCallback();\n        delete globalState.swalCloseEventFinishedCallback;\n      }\n    });\n  };\n\n  var triggerDidCloseAndDispose = function triggerDidCloseAndDispose(instance, didClose) {\n    setTimeout(function () {\n      if (typeof didClose === 'function') {\n        didClose();\n      }\n\n      instance._destroy();\n    });\n  };\n\n  function setButtonsDisabled(instance, buttons, disabled) {\n    var domCache = privateProps.domCache.get(instance);\n    buttons.forEach(function (button) {\n      domCache[button].disabled = disabled;\n    });\n  }\n\n  function setInputDisabled(input, disabled) {\n    if (!input) {\n      return false;\n    }\n\n    if (input.type === 'radio') {\n      var radiosContainer = input.parentNode.parentNode;\n      var radios = radiosContainer.querySelectorAll('input');\n\n      for (var i = 0; i < radios.length; i++) {\n        radios[i].disabled = disabled;\n      }\n    } else {\n      input.disabled = disabled;\n    }\n  }\n\n  function enableButtons() {\n    setButtonsDisabled(this, ['confirmButton', 'denyButton', 'cancelButton'], false);\n  }\n  function disableButtons() {\n    setButtonsDisabled(this, ['confirmButton', 'denyButton', 'cancelButton'], true);\n  }\n  function enableInput() {\n    return setInputDisabled(this.getInput(), false);\n  }\n  function disableInput() {\n    return setInputDisabled(this.getInput(), true);\n  }\n\n  function showValidationMessage(error) {\n    var domCache = privateProps.domCache.get(this);\n    var params = privateProps.innerParams.get(this);\n    setInnerHtml(domCache.validationMessage, error);\n    domCache.validationMessage.className = swalClasses['validation-message'];\n\n    if (params.customClass && params.customClass.validationMessage) {\n      addClass(domCache.validationMessage, params.customClass.validationMessage);\n    }\n\n    show(domCache.validationMessage);\n    var input = this.getInput();\n\n    if (input) {\n      input.setAttribute('aria-invalid', true);\n      input.setAttribute('aria-describedBy', swalClasses['validation-message']);\n      focusInput(input);\n      addClass(input, swalClasses.inputerror);\n    }\n  } // Hide block with validation message\n\n  function resetValidationMessage$1() {\n    var domCache = privateProps.domCache.get(this);\n\n    if (domCache.validationMessage) {\n      hide(domCache.validationMessage);\n    }\n\n    var input = this.getInput();\n\n    if (input) {\n      input.removeAttribute('aria-invalid');\n      input.removeAttribute('aria-describedBy');\n      removeClass(input, swalClasses.inputerror);\n    }\n  }\n\n  function getProgressSteps$1() {\n    var domCache = privateProps.domCache.get(this);\n    return domCache.progressSteps;\n  }\n\n  var Timer = /*#__PURE__*/function () {\n    function Timer(callback, delay) {\n      _classCallCheck(this, Timer);\n\n      this.callback = callback;\n      this.remaining = delay;\n      this.running = false;\n      this.start();\n    }\n\n    _createClass(Timer, [{\n      key: \"start\",\n      value: function start() {\n        if (!this.running) {\n          this.running = true;\n          this.started = new Date();\n          this.id = setTimeout(this.callback, this.remaining);\n        }\n\n        return this.remaining;\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        if (this.running) {\n          this.running = false;\n          clearTimeout(this.id);\n          this.remaining -= new Date() - this.started;\n        }\n\n        return this.remaining;\n      }\n    }, {\n      key: \"increase\",\n      value: function increase(n) {\n        var running = this.running;\n\n        if (running) {\n          this.stop();\n        }\n\n        this.remaining += n;\n\n        if (running) {\n          this.start();\n        }\n\n        return this.remaining;\n      }\n    }, {\n      key: \"getTimerLeft\",\n      value: function getTimerLeft() {\n        if (this.running) {\n          this.stop();\n          this.start();\n        }\n\n        return this.remaining;\n      }\n    }, {\n      key: \"isRunning\",\n      value: function isRunning() {\n        return this.running;\n      }\n    }]);\n\n    return Timer;\n  }();\n\n  var defaultInputValidators = {\n    email: function email(string, validationMessage) {\n      return /^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z0-9-]{2,24}$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid email address');\n    },\n    url: function url(string, validationMessage) {\n      // taken from https://stackoverflow.com/a/3809435 with a small change from #1306 and #2013\n      return /^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-z]{2,63}\\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid URL');\n    }\n  };\n\n  function setDefaultInputValidators(params) {\n    // Use default `inputValidator` for supported input types if not provided\n    if (!params.inputValidator) {\n      Object.keys(defaultInputValidators).forEach(function (key) {\n        if (params.input === key) {\n          params.inputValidator = defaultInputValidators[key];\n        }\n      });\n    }\n  }\n\n  function validateCustomTargetElement(params) {\n    // Determine if the custom target element is valid\n    if (!params.target || typeof params.target === 'string' && !document.querySelector(params.target) || typeof params.target !== 'string' && !params.target.appendChild) {\n      warn('Target parameter is not valid, defaulting to \"body\"');\n      params.target = 'body';\n    }\n  }\n  /**\n   * Set type, text and actions on popup\n   *\n   * @param params\n   * @returns {boolean}\n   */\n\n\n  function setParameters(params) {\n    setDefaultInputValidators(params); // showLoaderOnConfirm && preConfirm\n\n    if (params.showLoaderOnConfirm && !params.preConfirm) {\n      warn('showLoaderOnConfirm is set to true, but preConfirm is not defined.\\n' + 'showLoaderOnConfirm should be used together with preConfirm, see usage example:\\n' + 'https://sweetalert2.github.io/#ajax-request');\n    } // params.animation will be actually used in renderPopup.js\n    // but in case when params.animation is a function, we need to call that function\n    // before popup (re)initialization, so it'll be possible to check Swal.isVisible()\n    // inside the params.animation function\n\n\n    params.animation = callIfFunction(params.animation);\n    validateCustomTargetElement(params); // Replace newlines with <br> in title\n\n    if (typeof params.title === 'string') {\n      params.title = params.title.split('\\n').join('<br />');\n    }\n\n    init(params);\n  }\n\n  var swalStringParams = ['swal-title', 'swal-html', 'swal-footer'];\n  var getTemplateParams = function getTemplateParams(params) {\n    var template = typeof params.template === 'string' ? document.querySelector(params.template) : params.template;\n\n    if (!template) {\n      return {};\n    }\n\n    var templateContent = template.content || template; // IE11\n\n    showWarningsForElements(templateContent);\n\n    var result = _extends(getSwalParams(templateContent), getSwalButtons(templateContent), getSwalImage(templateContent), getSwalIcon(templateContent), getSwalInput(templateContent), getSwalStringParams(templateContent, swalStringParams));\n\n    return result;\n  };\n\n  var getSwalParams = function getSwalParams(templateContent) {\n    var result = {};\n    toArray(templateContent.querySelectorAll('swal-param')).forEach(function (param) {\n      showWarningsForAttributes(param, ['name', 'value']);\n      var paramName = param.getAttribute('name');\n      var value = param.getAttribute('value');\n\n      if (typeof defaultParams[paramName] === 'boolean' && value === 'false') {\n        value = false;\n      }\n\n      if (_typeof(defaultParams[paramName]) === 'object') {\n        value = JSON.parse(value);\n      }\n\n      result[paramName] = value;\n    });\n    return result;\n  };\n\n  var getSwalButtons = function getSwalButtons(templateContent) {\n    var result = {};\n    toArray(templateContent.querySelectorAll('swal-button')).forEach(function (button) {\n      showWarningsForAttributes(button, ['type', 'color', 'aria-label']);\n      var type = button.getAttribute('type');\n      result[\"\".concat(type, \"ButtonText\")] = button.innerHTML;\n      result[\"show\".concat(capitalizeFirstLetter(type), \"Button\")] = true;\n\n      if (button.hasAttribute('color')) {\n        result[\"\".concat(type, \"ButtonColor\")] = button.getAttribute('color');\n      }\n\n      if (button.hasAttribute('aria-label')) {\n        result[\"\".concat(type, \"ButtonAriaLabel\")] = button.getAttribute('aria-label');\n      }\n    });\n    return result;\n  };\n\n  var getSwalImage = function getSwalImage(templateContent) {\n    var result = {};\n    var image = templateContent.querySelector('swal-image');\n\n    if (image) {\n      showWarningsForAttributes(image, ['src', 'width', 'height', 'alt']);\n\n      if (image.hasAttribute('src')) {\n        result.imageUrl = image.getAttribute('src');\n      }\n\n      if (image.hasAttribute('width')) {\n        result.imageWidth = image.getAttribute('width');\n      }\n\n      if (image.hasAttribute('height')) {\n        result.imageHeight = image.getAttribute('height');\n      }\n\n      if (image.hasAttribute('alt')) {\n        result.imageAlt = image.getAttribute('alt');\n      }\n    }\n\n    return result;\n  };\n\n  var getSwalIcon = function getSwalIcon(templateContent) {\n    var result = {};\n    var icon = templateContent.querySelector('swal-icon');\n\n    if (icon) {\n      showWarningsForAttributes(icon, ['type', 'color']);\n\n      if (icon.hasAttribute('type')) {\n        result.icon = icon.getAttribute('type');\n      }\n\n      if (icon.hasAttribute('color')) {\n        result.iconColor = icon.getAttribute('color');\n      }\n\n      result.iconHtml = icon.innerHTML;\n    }\n\n    return result;\n  };\n\n  var getSwalInput = function getSwalInput(templateContent) {\n    var result = {};\n    var input = templateContent.querySelector('swal-input');\n\n    if (input) {\n      showWarningsForAttributes(input, ['type', 'label', 'placeholder', 'value']);\n      result.input = input.getAttribute('type') || 'text';\n\n      if (input.hasAttribute('label')) {\n        result.inputLabel = input.getAttribute('label');\n      }\n\n      if (input.hasAttribute('placeholder')) {\n        result.inputPlaceholder = input.getAttribute('placeholder');\n      }\n\n      if (input.hasAttribute('value')) {\n        result.inputValue = input.getAttribute('value');\n      }\n    }\n\n    var inputOptions = templateContent.querySelectorAll('swal-input-option');\n\n    if (inputOptions.length) {\n      result.inputOptions = {};\n      toArray(inputOptions).forEach(function (option) {\n        showWarningsForAttributes(option, ['value']);\n        var optionValue = option.getAttribute('value');\n        var optionName = option.innerHTML;\n        result.inputOptions[optionValue] = optionName;\n      });\n    }\n\n    return result;\n  };\n\n  var getSwalStringParams = function getSwalStringParams(templateContent, paramNames) {\n    var result = {};\n\n    for (var i in paramNames) {\n      var paramName = paramNames[i];\n      var tag = templateContent.querySelector(paramName);\n\n      if (tag) {\n        showWarningsForAttributes(tag, []);\n        result[paramName.replace(/^swal-/, '')] = tag.innerHTML;\n      }\n    }\n\n    return result;\n  };\n\n  var showWarningsForElements = function showWarningsForElements(template) {\n    var allowedElements = swalStringParams.concat(['swal-param', 'swal-button', 'swal-image', 'swal-icon', 'swal-input', 'swal-input-option']);\n    toArray(template.querySelectorAll('*')).forEach(function (el) {\n      if (el.parentNode !== template) {\n        // can't use template.children because of IE11\n        return;\n      }\n\n      var tagName = el.tagName.toLowerCase();\n\n      if (allowedElements.indexOf(tagName) === -1) {\n        warn(\"Unrecognized element <\".concat(tagName, \">\"));\n      }\n    });\n  };\n\n  var showWarningsForAttributes = function showWarningsForAttributes(el, allowedAttributes) {\n    toArray(el.attributes).forEach(function (attribute) {\n      if (allowedAttributes.indexOf(attribute.name) === -1) {\n        warn([\"Unrecognized attribute \\\"\".concat(attribute.name, \"\\\" on <\").concat(el.tagName.toLowerCase(), \">.\"), \"\".concat(allowedAttributes.length ? \"Allowed attributes are: \".concat(allowedAttributes.join(', ')) : 'To set the value, use HTML within the element.')]);\n      }\n    });\n  };\n\n  var SHOW_CLASS_TIMEOUT = 10;\n  /**\n   * Open popup, add necessary classes and styles, fix scrollbar\n   *\n   * @param params\n   */\n\n  var openPopup = function openPopup(params) {\n    var container = getContainer();\n    var popup = getPopup();\n\n    if (typeof params.willOpen === 'function') {\n      params.willOpen(popup);\n    } else if (typeof params.onBeforeOpen === 'function') {\n      params.onBeforeOpen(popup); // @deprecated\n    }\n\n    var bodyStyles = window.getComputedStyle(document.body);\n    var initialBodyOverflow = bodyStyles.overflowY;\n    addClasses$1(container, popup, params); // scrolling is 'hidden' until animation is done, after that 'auto'\n\n    setTimeout(function () {\n      setScrollingVisibility(container, popup);\n    }, SHOW_CLASS_TIMEOUT);\n\n    if (isModal()) {\n      fixScrollContainer(container, params.scrollbarPadding, initialBodyOverflow);\n      setAriaHidden();\n    }\n\n    if (!isToast() && !globalState.previousActiveElement) {\n      globalState.previousActiveElement = document.activeElement;\n    }\n\n    runDidOpen(popup, params);\n    removeClass(container, swalClasses['no-transition']);\n  };\n\n  var runDidOpen = function runDidOpen(popup, params) {\n    if (typeof params.didOpen === 'function') {\n      setTimeout(function () {\n        return params.didOpen(popup);\n      });\n    } else if (typeof params.onOpen === 'function') {\n      setTimeout(function () {\n        return params.onOpen(popup);\n      }); // @deprecated\n    }\n  };\n\n  var swalOpenAnimationFinished = function swalOpenAnimationFinished(event) {\n    var popup = getPopup();\n\n    if (event.target !== popup) {\n      return;\n    }\n\n    var container = getContainer();\n    popup.removeEventListener(animationEndEvent, swalOpenAnimationFinished);\n    container.style.overflowY = 'auto';\n  };\n\n  var setScrollingVisibility = function setScrollingVisibility(container, popup) {\n    if (animationEndEvent && hasCssAnimation(popup)) {\n      container.style.overflowY = 'hidden';\n      popup.addEventListener(animationEndEvent, swalOpenAnimationFinished);\n    } else {\n      container.style.overflowY = 'auto';\n    }\n  };\n\n  var fixScrollContainer = function fixScrollContainer(container, scrollbarPadding, initialBodyOverflow) {\n    iOSfix();\n    IEfix();\n\n    if (scrollbarPadding && initialBodyOverflow !== 'hidden') {\n      fixScrollbar();\n    } // sweetalert2/issues/1247\n\n\n    setTimeout(function () {\n      container.scrollTop = 0;\n    });\n  };\n\n  var addClasses$1 = function addClasses(container, popup, params) {\n    addClass(container, params.showClass.backdrop); // the workaround with setting/unsetting opacity is needed for #2019 and 2059\n\n    popup.style.setProperty('opacity', '0', 'important');\n    show(popup);\n    setTimeout(function () {\n      // Animate popup right after showing it\n      addClass(popup, params.showClass.popup); // and remove the opacity workaround\n\n      popup.style.removeProperty('opacity');\n    }, SHOW_CLASS_TIMEOUT); // 10ms in order to fix #2062\n\n    addClass([document.documentElement, document.body], swalClasses.shown);\n\n    if (params.heightAuto && params.backdrop && !params.toast) {\n      addClass([document.documentElement, document.body], swalClasses['height-auto']);\n    }\n  };\n\n  var handleInputOptionsAndValue = function handleInputOptionsAndValue(instance, params) {\n    if (params.input === 'select' || params.input === 'radio') {\n      handleInputOptions(instance, params);\n    } else if (['text', 'email', 'number', 'tel', 'textarea'].indexOf(params.input) !== -1 && (hasToPromiseFn(params.inputValue) || isPromise(params.inputValue))) {\n      handleInputValue(instance, params);\n    }\n  };\n  var getInputValue = function getInputValue(instance, innerParams) {\n    var input = instance.getInput();\n\n    if (!input) {\n      return null;\n    }\n\n    switch (innerParams.input) {\n      case 'checkbox':\n        return getCheckboxValue(input);\n\n      case 'radio':\n        return getRadioValue(input);\n\n      case 'file':\n        return getFileValue(input);\n\n      default:\n        return innerParams.inputAutoTrim ? input.value.trim() : input.value;\n    }\n  };\n\n  var getCheckboxValue = function getCheckboxValue(input) {\n    return input.checked ? 1 : 0;\n  };\n\n  var getRadioValue = function getRadioValue(input) {\n    return input.checked ? input.value : null;\n  };\n\n  var getFileValue = function getFileValue(input) {\n    return input.files.length ? input.getAttribute('multiple') !== null ? input.files : input.files[0] : null;\n  };\n\n  var handleInputOptions = function handleInputOptions(instance, params) {\n    var content = getContent();\n\n    var processInputOptions = function processInputOptions(inputOptions) {\n      return populateInputOptions[params.input](content, formatInputOptions(inputOptions), params);\n    };\n\n    if (hasToPromiseFn(params.inputOptions) || isPromise(params.inputOptions)) {\n      showLoading(getConfirmButton());\n      asPromise(params.inputOptions).then(function (inputOptions) {\n        instance.hideLoading();\n        processInputOptions(inputOptions);\n      });\n    } else if (_typeof(params.inputOptions) === 'object') {\n      processInputOptions(params.inputOptions);\n    } else {\n      error(\"Unexpected type of inputOptions! Expected object, Map or Promise, got \".concat(_typeof(params.inputOptions)));\n    }\n  };\n\n  var handleInputValue = function handleInputValue(instance, params) {\n    var input = instance.getInput();\n    hide(input);\n    asPromise(params.inputValue).then(function (inputValue) {\n      input.value = params.input === 'number' ? parseFloat(inputValue) || 0 : \"\".concat(inputValue);\n      show(input);\n      input.focus();\n      instance.hideLoading();\n    })[\"catch\"](function (err) {\n      error(\"Error in inputValue promise: \".concat(err));\n      input.value = '';\n      show(input);\n      input.focus();\n      instance.hideLoading();\n    });\n  };\n\n  var populateInputOptions = {\n    select: function select(content, inputOptions, params) {\n      var select = getChildByClass(content, swalClasses.select);\n\n      var renderOption = function renderOption(parent, optionLabel, optionValue) {\n        var option = document.createElement('option');\n        option.value = optionValue;\n        setInnerHtml(option, optionLabel);\n        option.selected = isSelected(optionValue, params.inputValue);\n        parent.appendChild(option);\n      };\n\n      inputOptions.forEach(function (inputOption) {\n        var optionValue = inputOption[0];\n        var optionLabel = inputOption[1]; // <optgroup> spec:\n        // https://www.w3.org/TR/html401/interact/forms.html#h-17.6\n        // \"...all OPTGROUP elements must be specified directly within a SELECT element (i.e., groups may not be nested)...\"\n        // check whether this is a <optgroup>\n\n        if (Array.isArray(optionLabel)) {\n          // if it is an array, then it is an <optgroup>\n          var optgroup = document.createElement('optgroup');\n          optgroup.label = optionValue;\n          optgroup.disabled = false; // not configurable for now\n\n          select.appendChild(optgroup);\n          optionLabel.forEach(function (o) {\n            return renderOption(optgroup, o[1], o[0]);\n          });\n        } else {\n          // case of <option>\n          renderOption(select, optionLabel, optionValue);\n        }\n      });\n      select.focus();\n    },\n    radio: function radio(content, inputOptions, params) {\n      var radio = getChildByClass(content, swalClasses.radio);\n      inputOptions.forEach(function (inputOption) {\n        var radioValue = inputOption[0];\n        var radioLabel = inputOption[1];\n        var radioInput = document.createElement('input');\n        var radioLabelElement = document.createElement('label');\n        radioInput.type = 'radio';\n        radioInput.name = swalClasses.radio;\n        radioInput.value = radioValue;\n\n        if (isSelected(radioValue, params.inputValue)) {\n          radioInput.checked = true;\n        }\n\n        var label = document.createElement('span');\n        setInnerHtml(label, radioLabel);\n        label.className = swalClasses.label;\n        radioLabelElement.appendChild(radioInput);\n        radioLabelElement.appendChild(label);\n        radio.appendChild(radioLabelElement);\n      });\n      var radios = radio.querySelectorAll('input');\n\n      if (radios.length) {\n        radios[0].focus();\n      }\n    }\n  };\n  /**\n   * Converts `inputOptions` into an array of `[value, label]`s\n   * @param inputOptions\n   */\n\n  var formatInputOptions = function formatInputOptions(inputOptions) {\n    var result = [];\n\n    if (typeof Map !== 'undefined' && inputOptions instanceof Map) {\n      inputOptions.forEach(function (value, key) {\n        var valueFormatted = value;\n\n        if (_typeof(valueFormatted) === 'object') {\n          // case of <optgroup>\n          valueFormatted = formatInputOptions(valueFormatted);\n        }\n\n        result.push([key, valueFormatted]);\n      });\n    } else {\n      Object.keys(inputOptions).forEach(function (key) {\n        var valueFormatted = inputOptions[key];\n\n        if (_typeof(valueFormatted) === 'object') {\n          // case of <optgroup>\n          valueFormatted = formatInputOptions(valueFormatted);\n        }\n\n        result.push([key, valueFormatted]);\n      });\n    }\n\n    return result;\n  };\n\n  var isSelected = function isSelected(optionValue, inputValue) {\n    return inputValue && inputValue.toString() === optionValue.toString();\n  };\n\n  var handleConfirmButtonClick = function handleConfirmButtonClick(instance, innerParams) {\n    instance.disableButtons();\n\n    if (innerParams.input) {\n      handleConfirmOrDenyWithInput(instance, innerParams, 'confirm');\n    } else {\n      confirm(instance, innerParams, true);\n    }\n  };\n  var handleDenyButtonClick = function handleDenyButtonClick(instance, innerParams) {\n    instance.disableButtons();\n\n    if (innerParams.returnInputValueOnDeny) {\n      handleConfirmOrDenyWithInput(instance, innerParams, 'deny');\n    } else {\n      deny(instance, innerParams, false);\n    }\n  };\n  var handleCancelButtonClick = function handleCancelButtonClick(instance, dismissWith) {\n    instance.disableButtons();\n    dismissWith(DismissReason.cancel);\n  };\n\n  var handleConfirmOrDenyWithInput = function handleConfirmOrDenyWithInput(instance, innerParams, type\n  /* type is either 'confirm' or 'deny' */\n  ) {\n    var inputValue = getInputValue(instance, innerParams);\n\n    if (innerParams.inputValidator) {\n      handleInputValidator(instance, innerParams, inputValue);\n    } else if (!instance.getInput().checkValidity()) {\n      instance.enableButtons();\n      instance.showValidationMessage(innerParams.validationMessage);\n    } else if (type === 'deny') {\n      deny(instance, innerParams, inputValue);\n    } else {\n      confirm(instance, innerParams, inputValue);\n    }\n  };\n\n  var handleInputValidator = function handleInputValidator(instance, innerParams, inputValue) {\n    instance.disableInput();\n    var validationPromise = Promise.resolve().then(function () {\n      return asPromise(innerParams.inputValidator(inputValue, innerParams.validationMessage));\n    });\n    validationPromise.then(function (validationMessage) {\n      instance.enableButtons();\n      instance.enableInput();\n\n      if (validationMessage) {\n        instance.showValidationMessage(validationMessage);\n      } else {\n        confirm(instance, innerParams, inputValue);\n      }\n    });\n  };\n\n  var deny = function deny(instance, innerParams, value) {\n    if (innerParams.showLoaderOnDeny) {\n      showLoading(getDenyButton());\n    }\n\n    if (innerParams.preDeny) {\n      var preDenyPromise = Promise.resolve().then(function () {\n        return asPromise(innerParams.preDeny(value, innerParams.validationMessage));\n      });\n      preDenyPromise.then(function (preDenyValue) {\n        if (preDenyValue === false) {\n          instance.hideLoading();\n        } else {\n          instance.closePopup({\n            isDenied: true,\n            value: typeof preDenyValue === 'undefined' ? value : preDenyValue\n          });\n        }\n      });\n    } else {\n      instance.closePopup({\n        isDenied: true,\n        value: value\n      });\n    }\n  };\n\n  var succeedWith = function succeedWith(instance, value) {\n    instance.closePopup({\n      isConfirmed: true,\n      value: value\n    });\n  };\n\n  var confirm = function confirm(instance, innerParams, value) {\n    if (innerParams.showLoaderOnConfirm) {\n      showLoading(); // TODO: make showLoading an *instance* method\n    }\n\n    if (innerParams.preConfirm) {\n      instance.resetValidationMessage();\n      var preConfirmPromise = Promise.resolve().then(function () {\n        return asPromise(innerParams.preConfirm(value, innerParams.validationMessage));\n      });\n      preConfirmPromise.then(function (preConfirmValue) {\n        if (isVisible(getValidationMessage()) || preConfirmValue === false) {\n          instance.hideLoading();\n        } else {\n          succeedWith(instance, typeof preConfirmValue === 'undefined' ? value : preConfirmValue);\n        }\n      });\n    } else {\n      succeedWith(instance, value);\n    }\n  };\n\n  var addKeydownHandler = function addKeydownHandler(instance, globalState, innerParams, dismissWith) {\n    if (globalState.keydownTarget && globalState.keydownHandlerAdded) {\n      globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, {\n        capture: globalState.keydownListenerCapture\n      });\n      globalState.keydownHandlerAdded = false;\n    }\n\n    if (!innerParams.toast) {\n      globalState.keydownHandler = function (e) {\n        return keydownHandler(instance, e, dismissWith);\n      };\n\n      globalState.keydownTarget = innerParams.keydownListenerCapture ? window : getPopup();\n      globalState.keydownListenerCapture = innerParams.keydownListenerCapture;\n      globalState.keydownTarget.addEventListener('keydown', globalState.keydownHandler, {\n        capture: globalState.keydownListenerCapture\n      });\n      globalState.keydownHandlerAdded = true;\n    }\n  }; // Focus handling\n\n  var setFocus = function setFocus(innerParams, index, increment) {\n    var focusableElements = getFocusableElements(); // search for visible elements and select the next possible match\n\n    if (focusableElements.length) {\n      index = index + increment; // rollover to first item\n\n      if (index === focusableElements.length) {\n        index = 0; // go to last item\n      } else if (index === -1) {\n        index = focusableElements.length - 1;\n      }\n\n      return focusableElements[index].focus();\n    } // no visible focusable elements, focus the popup\n\n\n    getPopup().focus();\n  };\n  var arrowKeysNextButton = ['ArrowRight', 'ArrowDown', 'Right', 'Down' // IE11\n  ];\n  var arrowKeysPreviousButton = ['ArrowLeft', 'ArrowUp', 'Left', 'Up' // IE11\n  ];\n  var escKeys = ['Escape', 'Esc' // IE11\n  ];\n\n  var keydownHandler = function keydownHandler(instance, e, dismissWith) {\n    var innerParams = privateProps.innerParams.get(instance);\n\n    if (innerParams.stopKeydownPropagation) {\n      e.stopPropagation();\n    } // ENTER\n\n\n    if (e.key === 'Enter') {\n      handleEnter(instance, e, innerParams); // TAB\n    } else if (e.key === 'Tab') {\n      handleTab(e, innerParams); // ARROWS - switch focus between buttons\n    } else if ([].concat(arrowKeysNextButton, arrowKeysPreviousButton).indexOf(e.key) !== -1) {\n      handleArrows(e.key); // ESC\n    } else if (escKeys.indexOf(e.key) !== -1) {\n      handleEsc(e, innerParams, dismissWith);\n    }\n  };\n\n  var handleEnter = function handleEnter(instance, e, innerParams) {\n    // #720 #721\n    if (e.isComposing) {\n      return;\n    }\n\n    if (e.target && instance.getInput() && e.target.outerHTML === instance.getInput().outerHTML) {\n      if (['textarea', 'file'].indexOf(innerParams.input) !== -1) {\n        return; // do not submit\n      }\n\n      clickConfirm();\n      e.preventDefault();\n    }\n  };\n\n  var handleTab = function handleTab(e, innerParams) {\n    var targetElement = e.target;\n    var focusableElements = getFocusableElements();\n    var btnIndex = -1;\n\n    for (var i = 0; i < focusableElements.length; i++) {\n      if (targetElement === focusableElements[i]) {\n        btnIndex = i;\n        break;\n      }\n    }\n\n    if (!e.shiftKey) {\n      // Cycle to the next button\n      setFocus(innerParams, btnIndex, 1);\n    } else {\n      // Cycle to the prev button\n      setFocus(innerParams, btnIndex, -1);\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n  };\n\n  var handleArrows = function handleArrows(key) {\n    var confirmButton = getConfirmButton();\n    var denyButton = getDenyButton();\n    var cancelButton = getCancelButton();\n\n    if (!([confirmButton, denyButton, cancelButton].indexOf(document.activeElement) !== -1)) {\n      return;\n    }\n\n    var sibling = arrowKeysNextButton.indexOf(key) !== -1 ? 'nextElementSibling' : 'previousElementSibling';\n    var buttonToFocus = document.activeElement[sibling];\n\n    if (buttonToFocus) {\n      buttonToFocus.focus();\n    }\n  };\n\n  var handleEsc = function handleEsc(e, innerParams, dismissWith) {\n    if (callIfFunction(innerParams.allowEscapeKey)) {\n      e.preventDefault();\n      dismissWith(DismissReason.esc);\n    }\n  };\n\n  var handlePopupClick = function handlePopupClick(instance, domCache, dismissWith) {\n    var innerParams = privateProps.innerParams.get(instance);\n\n    if (innerParams.toast) {\n      handleToastClick(instance, domCache, dismissWith);\n    } else {\n      // Ignore click events that had mousedown on the popup but mouseup on the container\n      // This can happen when the user drags a slider\n      handleModalMousedown(domCache); // Ignore click events that had mousedown on the container but mouseup on the popup\n\n      handleContainerMousedown(domCache);\n      handleModalClick(instance, domCache, dismissWith);\n    }\n  };\n\n  var handleToastClick = function handleToastClick(instance, domCache, dismissWith) {\n    // Closing toast by internal click\n    domCache.popup.onclick = function () {\n      var innerParams = privateProps.innerParams.get(instance);\n\n      if (innerParams.showConfirmButton || innerParams.showDenyButton || innerParams.showCancelButton || innerParams.showCloseButton || innerParams.timer || innerParams.input) {\n        return;\n      }\n\n      dismissWith(DismissReason.close);\n    };\n  };\n\n  var ignoreOutsideClick = false;\n\n  var handleModalMousedown = function handleModalMousedown(domCache) {\n    domCache.popup.onmousedown = function () {\n      domCache.container.onmouseup = function (e) {\n        domCache.container.onmouseup = undefined; // We only check if the mouseup target is the container because usually it doesn't\n        // have any other direct children aside of the popup\n\n        if (e.target === domCache.container) {\n          ignoreOutsideClick = true;\n        }\n      };\n    };\n  };\n\n  var handleContainerMousedown = function handleContainerMousedown(domCache) {\n    domCache.container.onmousedown = function () {\n      domCache.popup.onmouseup = function (e) {\n        domCache.popup.onmouseup = undefined; // We also need to check if the mouseup target is a child of the popup\n\n        if (e.target === domCache.popup || domCache.popup.contains(e.target)) {\n          ignoreOutsideClick = true;\n        }\n      };\n    };\n  };\n\n  var handleModalClick = function handleModalClick(instance, domCache, dismissWith) {\n    domCache.container.onclick = function (e) {\n      var innerParams = privateProps.innerParams.get(instance);\n\n      if (ignoreOutsideClick) {\n        ignoreOutsideClick = false;\n        return;\n      }\n\n      if (e.target === domCache.container && callIfFunction(innerParams.allowOutsideClick)) {\n        dismissWith(DismissReason.backdrop);\n      }\n    };\n  };\n\n  function _main(userParams) {\n    var mixinParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    showWarningsForParams(_extends({}, mixinParams, userParams));\n\n    if (globalState.currentInstance) {\n      globalState.currentInstance._destroy();\n    }\n\n    globalState.currentInstance = this;\n    var innerParams = prepareParams(userParams, mixinParams);\n    setParameters(innerParams);\n    Object.freeze(innerParams); // clear the previous timer\n\n    if (globalState.timeout) {\n      globalState.timeout.stop();\n      delete globalState.timeout;\n    } // clear the restore focus timeout\n\n\n    clearTimeout(globalState.restoreFocusTimeout);\n    var domCache = populateDomCache(this);\n    render(this, innerParams);\n    privateProps.innerParams.set(this, innerParams);\n    return swalPromise(this, domCache, innerParams);\n  }\n\n  var prepareParams = function prepareParams(userParams, mixinParams) {\n    var templateParams = getTemplateParams(userParams);\n\n    var showClass = _extends({}, defaultParams.showClass, mixinParams.showClass, templateParams.showClass, userParams.showClass);\n\n    var hideClass = _extends({}, defaultParams.hideClass, mixinParams.hideClass, templateParams.hideClass, userParams.hideClass);\n\n    var params = _extends({}, defaultParams, mixinParams, templateParams, userParams); // precedence is described in #2131\n\n\n    params.showClass = showClass;\n    params.hideClass = hideClass; // @deprecated\n\n    if (userParams.animation === false) {\n      params.showClass = {\n        popup: 'swal2-noanimation',\n        backdrop: 'swal2-noanimation'\n      };\n      params.hideClass = {};\n    }\n\n    return params;\n  };\n\n  var swalPromise = function swalPromise(instance, domCache, innerParams) {\n    return new Promise(function (resolve) {\n      // functions to handle all closings/dismissals\n      var dismissWith = function dismissWith(dismiss) {\n        instance.closePopup({\n          isDismissed: true,\n          dismiss: dismiss\n        });\n      };\n\n      privateMethods.swalPromiseResolve.set(instance, resolve);\n\n      domCache.confirmButton.onclick = function () {\n        return handleConfirmButtonClick(instance, innerParams);\n      };\n\n      domCache.denyButton.onclick = function () {\n        return handleDenyButtonClick(instance, innerParams);\n      };\n\n      domCache.cancelButton.onclick = function () {\n        return handleCancelButtonClick(instance, dismissWith);\n      };\n\n      domCache.closeButton.onclick = function () {\n        return dismissWith(DismissReason.close);\n      };\n\n      handlePopupClick(instance, domCache, dismissWith);\n      addKeydownHandler(instance, globalState, innerParams, dismissWith);\n\n      if (innerParams.toast && (innerParams.input || innerParams.footer || innerParams.showCloseButton)) {\n        addClass(document.body, swalClasses['toast-column']);\n      } else {\n        removeClass(document.body, swalClasses['toast-column']);\n      }\n\n      handleInputOptionsAndValue(instance, innerParams);\n      openPopup(innerParams);\n      setupTimer(globalState, innerParams, dismissWith);\n      initFocus(domCache, innerParams); // Scroll container to top on open (#1247, #1946)\n\n      setTimeout(function () {\n        domCache.container.scrollTop = 0;\n      });\n    });\n  };\n\n  var populateDomCache = function populateDomCache(instance) {\n    var domCache = {\n      popup: getPopup(),\n      container: getContainer(),\n      content: getContent(),\n      actions: getActions(),\n      confirmButton: getConfirmButton(),\n      denyButton: getDenyButton(),\n      cancelButton: getCancelButton(),\n      loader: getLoader(),\n      closeButton: getCloseButton(),\n      validationMessage: getValidationMessage(),\n      progressSteps: getProgressSteps()\n    };\n    privateProps.domCache.set(instance, domCache);\n    return domCache;\n  };\n\n  var setupTimer = function setupTimer(globalState$$1, innerParams, dismissWith) {\n    var timerProgressBar = getTimerProgressBar();\n    hide(timerProgressBar);\n\n    if (innerParams.timer) {\n      globalState$$1.timeout = new Timer(function () {\n        dismissWith('timer');\n        delete globalState$$1.timeout;\n      }, innerParams.timer);\n\n      if (innerParams.timerProgressBar) {\n        show(timerProgressBar);\n        setTimeout(function () {\n          if (globalState$$1.timeout && globalState$$1.timeout.running) {\n            // timer can be already stopped or unset at this point\n            animateTimerProgressBar(innerParams.timer);\n          }\n        });\n      }\n    }\n  };\n\n  var initFocus = function initFocus(domCache, innerParams) {\n    if (innerParams.toast) {\n      return;\n    }\n\n    if (!callIfFunction(innerParams.allowEnterKey)) {\n      return blurActiveElement();\n    }\n\n    if (!focusButton(domCache, innerParams)) {\n      setFocus(innerParams, -1, 1);\n    }\n  };\n\n  var focusButton = function focusButton(domCache, innerParams) {\n    if (innerParams.focusDeny && isVisible(domCache.denyButton)) {\n      domCache.denyButton.focus();\n      return true;\n    }\n\n    if (innerParams.focusCancel && isVisible(domCache.cancelButton)) {\n      domCache.cancelButton.focus();\n      return true;\n    }\n\n    if (innerParams.focusConfirm && isVisible(domCache.confirmButton)) {\n      domCache.confirmButton.focus();\n      return true;\n    }\n\n    return false;\n  };\n\n  var blurActiveElement = function blurActiveElement() {\n    if (document.activeElement && typeof document.activeElement.blur === 'function') {\n      document.activeElement.blur();\n    }\n  };\n\n  /**\n   * Updates popup parameters.\n   */\n\n  function update(params) {\n    var popup = getPopup();\n    var innerParams = privateProps.innerParams.get(this);\n\n    if (!popup || hasClass(popup, innerParams.hideClass.popup)) {\n      return warn(\"You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.\");\n    }\n\n    var validUpdatableParams = {}; // assign valid params from `params` to `defaults`\n\n    Object.keys(params).forEach(function (param) {\n      if (Swal.isUpdatableParameter(param)) {\n        validUpdatableParams[param] = params[param];\n      } else {\n        warn(\"Invalid parameter to update: \\\"\".concat(param, \"\\\". Updatable params are listed here: https://github.com/sweetalert2/sweetalert2/blob/master/src/utils/params.js\\n\\nIf you think this parameter should be updatable, request it here: https://github.com/sweetalert2/sweetalert2/issues/new?template=02_feature_request.md\"));\n      }\n    });\n\n    var updatedParams = _extends({}, innerParams, validUpdatableParams);\n\n    render(this, updatedParams);\n    privateProps.innerParams.set(this, updatedParams);\n    Object.defineProperties(this, {\n      params: {\n        value: _extends({}, this.params, params),\n        writable: false,\n        enumerable: true\n      }\n    });\n  }\n\n  function _destroy() {\n    var domCache = privateProps.domCache.get(this);\n    var innerParams = privateProps.innerParams.get(this);\n\n    if (!innerParams) {\n      return; // This instance has already been destroyed\n    } // Check if there is another Swal closing\n\n\n    if (domCache.popup && globalState.swalCloseEventFinishedCallback) {\n      globalState.swalCloseEventFinishedCallback();\n      delete globalState.swalCloseEventFinishedCallback;\n    } // Check if there is a swal disposal defer timer\n\n\n    if (globalState.deferDisposalTimer) {\n      clearTimeout(globalState.deferDisposalTimer);\n      delete globalState.deferDisposalTimer;\n    }\n\n    runDidDestroy(innerParams);\n    disposeSwal(this);\n  }\n\n  var runDidDestroy = function runDidDestroy(innerParams) {\n    if (typeof innerParams.didDestroy === 'function') {\n      innerParams.didDestroy();\n    } else if (typeof innerParams.onDestroy === 'function') {\n      innerParams.onDestroy(); // @deprecated\n    }\n  };\n\n  var disposeSwal = function disposeSwal(instance) {\n    // Unset this.params so GC will dispose it (#1569)\n    delete instance.params; // Unset globalState props so GC will dispose globalState (#1569)\n\n    delete globalState.keydownHandler;\n    delete globalState.keydownTarget; // Unset WeakMaps so GC will be able to dispose them (#1569)\n\n    unsetWeakMaps(privateProps);\n    unsetWeakMaps(privateMethods);\n  };\n\n  var unsetWeakMaps = function unsetWeakMaps(obj) {\n    for (var i in obj) {\n      obj[i] = new WeakMap();\n    }\n  };\n\n\n\n  var instanceMethods = /*#__PURE__*/Object.freeze({\n    hideLoading: hideLoading,\n    disableLoading: hideLoading,\n    getInput: getInput$1,\n    close: close,\n    closePopup: close,\n    closeModal: close,\n    closeToast: close,\n    enableButtons: enableButtons,\n    disableButtons: disableButtons,\n    enableInput: enableInput,\n    disableInput: disableInput,\n    showValidationMessage: showValidationMessage,\n    resetValidationMessage: resetValidationMessage$1,\n    getProgressSteps: getProgressSteps$1,\n    _main: _main,\n    update: update,\n    _destroy: _destroy\n  });\n\n  var currentInstance;\n\n  var SweetAlert = /*#__PURE__*/function () {\n    function SweetAlert() {\n      _classCallCheck(this, SweetAlert);\n\n      // Prevent run in Node env\n      if (typeof window === 'undefined') {\n        return;\n      } // Check for the existence of Promise\n\n\n      if (typeof Promise === 'undefined') {\n        error('This package requires a Promise library, please include a shim to enable it in this browser (See: https://github.com/sweetalert2/sweetalert2/wiki/Migration-from-SweetAlert-to-SweetAlert2#1-ie-support)');\n      }\n\n      currentInstance = this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var outerParams = Object.freeze(this.constructor.argsToParams(args));\n      Object.defineProperties(this, {\n        params: {\n          value: outerParams,\n          writable: false,\n          enumerable: true,\n          configurable: true\n        }\n      });\n\n      var promise = this._main(this.params);\n\n      privateProps.promise.set(this, promise);\n    } // `catch` cannot be the name of a module export, so we define our thenable methods here instead\n\n\n    _createClass(SweetAlert, [{\n      key: \"then\",\n      value: function then(onFulfilled) {\n        var promise = privateProps.promise.get(this);\n        return promise.then(onFulfilled);\n      }\n    }, {\n      key: \"finally\",\n      value: function _finally(onFinally) {\n        var promise = privateProps.promise.get(this);\n        return promise[\"finally\"](onFinally);\n      }\n    }]);\n\n    return SweetAlert;\n  }(); // Assign instance methods from src/instanceMethods/*.js to prototype\n\n\n  _extends(SweetAlert.prototype, instanceMethods); // Assign static methods from src/staticMethods/*.js to constructor\n\n\n  _extends(SweetAlert, staticMethods); // Proxy to instance methods to constructor, for now, for backwards compatibility\n\n\n  Object.keys(instanceMethods).forEach(function (key) {\n    SweetAlert[key] = function () {\n      if (currentInstance) {\n        var _currentInstance;\n\n        return (_currentInstance = currentInstance)[key].apply(_currentInstance, arguments);\n      }\n    };\n  });\n  SweetAlert.DismissReason = DismissReason;\n  SweetAlert.version = '10.15.5';\n\n  var Swal = SweetAlert;\n  Swal[\"default\"] = Swal;\n\n  return Swal;\n\n}));\nif (typeof this !== 'undefined' && this.Sweetalert2){  this.swal = this.sweetAlert = this.Swal = this.SweetAlert = this.Sweetalert2}\n\n\"undefined\"!=typeof document&&function(e,t){var n=e.createElement(\"style\");if(e.getElementsByTagName(\"head\")[0].appendChild(n),n.styleSheet)n.styleSheet.disabled||(n.styleSheet.cssText=t);else try{n.innerHTML=t}catch(e){n.innerText=t}}(document,\".swal2-popup.swal2-toast{flex-direction:row;align-items:center;width:auto;padding:.625em;overflow-y:hidden;background:#fff;box-shadow:0 0 .625em #d9d9d9}.swal2-popup.swal2-toast .swal2-header{flex-direction:row;padding:0}.swal2-popup.swal2-toast .swal2-title{flex-grow:1;justify-content:flex-start;margin:0 .6em;font-size:1em}.swal2-popup.swal2-toast .swal2-footer{margin:.5em 0 0;padding:.5em 0 0;font-size:.8em}.swal2-popup.swal2-toast .swal2-close{position:static;width:.8em;height:.8em;line-height:.8}.swal2-popup.swal2-toast .swal2-content{justify-content:flex-start;padding:0;font-size:1em}.swal2-popup.swal2-toast .swal2-icon{width:2em;min-width:2em;height:2em;margin:0}.swal2-popup.swal2-toast .swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:1.8em;font-weight:700}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-popup.swal2-toast .swal2-icon .swal2-icon-content{font-size:.25em}}.swal2-popup.swal2-toast .swal2-icon.swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line]{top:.875em;width:1.375em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:.3125em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:.3125em}.swal2-popup.swal2-toast .swal2-actions{flex-basis:auto!important;width:auto;height:auto;margin:0 .3125em;padding:0}.swal2-popup.swal2-toast .swal2-styled{margin:.125em .3125em;padding:.3125em .625em;font-size:1em}.swal2-popup.swal2-toast .swal2-styled:focus{box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(100,150,200,.5)}.swal2-popup.swal2-toast .swal2-success{border-color:#a5dc86}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line]{position:absolute;width:1.6em;height:3em;transform:rotate(45deg);border-radius:50%}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=left]{top:-.8em;left:-.5em;transform:rotate(-45deg);transform-origin:2em 2em;border-radius:4em 0 0 4em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=right]{top:-.25em;left:.9375em;transform-origin:0 1.5em;border-radius:0 4em 4em 0}.swal2-popup.swal2-toast .swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-success .swal2-success-fix{top:0;left:.4375em;width:.4375em;height:2.6875em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line]{height:.3125em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=tip]{top:1.125em;left:.1875em;width:.75em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=long]{top:.9375em;right:.1875em;width:1.375em}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-tip{-webkit-animation:swal2-toast-animate-success-line-tip .75s;animation:swal2-toast-animate-success-line-tip .75s}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-long{-webkit-animation:swal2-toast-animate-success-line-long .75s;animation:swal2-toast-animate-success-line-long .75s}.swal2-popup.swal2-toast.swal2-show{-webkit-animation:swal2-toast-show .5s;animation:swal2-toast-show .5s}.swal2-popup.swal2-toast.swal2-hide{-webkit-animation:swal2-toast-hide .1s forwards;animation:swal2-toast-hide .1s forwards}.swal2-container{display:flex;position:fixed;z-index:1060;top:0;right:0;bottom:0;left:0;flex-direction:row;align-items:center;justify-content:center;padding:.625em;overflow-x:hidden;transition:background-color .1s;-webkit-overflow-scrolling:touch}.swal2-container.swal2-backdrop-show,.swal2-container.swal2-noanimation{background:rgba(0,0,0,.4)}.swal2-container.swal2-backdrop-hide{background:0 0!important}.swal2-container.swal2-top{align-items:flex-start}.swal2-container.swal2-top-left,.swal2-container.swal2-top-start{align-items:flex-start;justify-content:flex-start}.swal2-container.swal2-top-end,.swal2-container.swal2-top-right{align-items:flex-start;justify-content:flex-end}.swal2-container.swal2-center{align-items:center}.swal2-container.swal2-center-left,.swal2-container.swal2-center-start{align-items:center;justify-content:flex-start}.swal2-container.swal2-center-end,.swal2-container.swal2-center-right{align-items:center;justify-content:flex-end}.swal2-container.swal2-bottom{align-items:flex-end}.swal2-container.swal2-bottom-left,.swal2-container.swal2-bottom-start{align-items:flex-end;justify-content:flex-start}.swal2-container.swal2-bottom-end,.swal2-container.swal2-bottom-right{align-items:flex-end;justify-content:flex-end}.swal2-container.swal2-bottom-end>:first-child,.swal2-container.swal2-bottom-left>:first-child,.swal2-container.swal2-bottom-right>:first-child,.swal2-container.swal2-bottom-start>:first-child,.swal2-container.swal2-bottom>:first-child{margin-top:auto}.swal2-container.swal2-grow-fullscreen>.swal2-modal{display:flex!important;flex:1;align-self:stretch;justify-content:center}.swal2-container.swal2-grow-row>.swal2-modal{display:flex!important;flex:1;align-content:center;justify-content:center}.swal2-container.swal2-grow-column{flex:1;flex-direction:column}.swal2-container.swal2-grow-column.swal2-bottom,.swal2-container.swal2-grow-column.swal2-center,.swal2-container.swal2-grow-column.swal2-top{align-items:center}.swal2-container.swal2-grow-column.swal2-bottom-left,.swal2-container.swal2-grow-column.swal2-bottom-start,.swal2-container.swal2-grow-column.swal2-center-left,.swal2-container.swal2-grow-column.swal2-center-start,.swal2-container.swal2-grow-column.swal2-top-left,.swal2-container.swal2-grow-column.swal2-top-start{align-items:flex-start}.swal2-container.swal2-grow-column.swal2-bottom-end,.swal2-container.swal2-grow-column.swal2-bottom-right,.swal2-container.swal2-grow-column.swal2-center-end,.swal2-container.swal2-grow-column.swal2-center-right,.swal2-container.swal2-grow-column.swal2-top-end,.swal2-container.swal2-grow-column.swal2-top-right{align-items:flex-end}.swal2-container.swal2-grow-column>.swal2-modal{display:flex!important;flex:1;align-content:center;justify-content:center}.swal2-container.swal2-no-transition{transition:none!important}.swal2-container:not(.swal2-top):not(.swal2-top-start):not(.swal2-top-end):not(.swal2-top-left):not(.swal2-top-right):not(.swal2-center-start):not(.swal2-center-end):not(.swal2-center-left):not(.swal2-center-right):not(.swal2-bottom):not(.swal2-bottom-start):not(.swal2-bottom-end):not(.swal2-bottom-left):not(.swal2-bottom-right):not(.swal2-grow-fullscreen)>.swal2-modal{margin:auto}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-container .swal2-modal{margin:0!important}}.swal2-popup{display:none;position:relative;box-sizing:border-box;flex-direction:column;justify-content:center;width:32em;max-width:100%;padding:1.25em;border:none;border-radius:5px;background:#fff;font-family:inherit;font-size:1rem}.swal2-popup:focus{outline:0}.swal2-popup.swal2-loading{overflow-y:hidden}.swal2-header{display:flex;flex-direction:column;align-items:center;padding:0 1.8em}.swal2-title{position:relative;max-width:100%;margin:0 0 .4em;padding:0;color:#595959;font-size:1.875em;font-weight:600;text-align:center;text-transform:none;word-wrap:break-word}.swal2-actions{display:flex;z-index:1;box-sizing:border-box;flex-wrap:wrap;align-items:center;justify-content:center;width:100%;margin:1.25em auto 0;padding:0 1.6em}.swal2-actions:not(.swal2-loading) .swal2-styled[disabled]{opacity:.4}.swal2-actions:not(.swal2-loading) .swal2-styled:hover{background-image:linear-gradient(rgba(0,0,0,.1),rgba(0,0,0,.1))}.swal2-actions:not(.swal2-loading) .swal2-styled:active{background-image:linear-gradient(rgba(0,0,0,.2),rgba(0,0,0,.2))}.swal2-loader{display:none;align-items:center;justify-content:center;width:2.2em;height:2.2em;margin:0 1.875em;-webkit-animation:swal2-rotate-loading 1.5s linear 0s infinite normal;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border-width:.25em;border-style:solid;border-radius:100%;border-color:#2778c4 transparent #2778c4 transparent}.swal2-styled{margin:.3125em;padding:.625em 1.1em;box-shadow:none;font-weight:500}.swal2-styled:not([disabled]){cursor:pointer}.swal2-styled.swal2-confirm{border:0;border-radius:.25em;background:initial;background-color:#2778c4;color:#fff;font-size:1.0625em}.swal2-styled.swal2-deny{border:0;border-radius:.25em;background:initial;background-color:#d14529;color:#fff;font-size:1.0625em}.swal2-styled.swal2-cancel{border:0;border-radius:.25em;background:initial;background-color:#757575;color:#fff;font-size:1.0625em}.swal2-styled:focus{outline:0;box-shadow:0 0 0 3px rgba(100,150,200,.5)}.swal2-styled::-moz-focus-inner{border:0}.swal2-footer{justify-content:center;margin:1.25em 0 0;padding:1em 0 0;border-top:1px solid #eee;color:#545454;font-size:1em}.swal2-timer-progress-bar-container{position:absolute;right:0;bottom:0;left:0;height:.25em;overflow:hidden;border-bottom-right-radius:5px;border-bottom-left-radius:5px}.swal2-timer-progress-bar{width:100%;height:.25em;background:rgba(0,0,0,.2)}.swal2-image{max-width:100%;margin:1.25em auto}.swal2-close{position:absolute;z-index:2;top:0;right:0;align-items:center;justify-content:center;width:1.2em;height:1.2em;padding:0;overflow:hidden;transition:color .1s ease-out;border:none;border-radius:5px;background:0 0;color:#ccc;font-family:serif;font-size:2.5em;line-height:1.2;cursor:pointer}.swal2-close:hover{transform:none;background:0 0;color:#f27474}.swal2-close:focus{outline:0;box-shadow:inset 0 0 0 3px rgba(100,150,200,.5)}.swal2-close::-moz-focus-inner{border:0}.swal2-content{z-index:1;justify-content:center;margin:0;padding:0 1.6em;color:#545454;font-size:1.125em;font-weight:400;line-height:normal;text-align:center;word-wrap:break-word}.swal2-checkbox,.swal2-file,.swal2-input,.swal2-radio,.swal2-select,.swal2-textarea{margin:1em auto}.swal2-file,.swal2-input,.swal2-textarea{box-sizing:border-box;width:100%;transition:border-color .3s,box-shadow .3s;border:1px solid #d9d9d9;border-radius:.1875em;background:inherit;box-shadow:inset 0 1px 1px rgba(0,0,0,.06);color:inherit;font-size:1.125em}.swal2-file.swal2-inputerror,.swal2-input.swal2-inputerror,.swal2-textarea.swal2-inputerror{border-color:#f27474!important;box-shadow:0 0 2px #f27474!important}.swal2-file:focus,.swal2-input:focus,.swal2-textarea:focus{border:1px solid #b4dbed;outline:0;box-shadow:0 0 0 3px rgba(100,150,200,.5)}.swal2-file::-moz-placeholder,.swal2-input::-moz-placeholder,.swal2-textarea::-moz-placeholder{color:#ccc}.swal2-file:-ms-input-placeholder,.swal2-input:-ms-input-placeholder,.swal2-textarea:-ms-input-placeholder{color:#ccc}.swal2-file::placeholder,.swal2-input::placeholder,.swal2-textarea::placeholder{color:#ccc}.swal2-range{margin:1em auto;background:#fff}.swal2-range input{width:80%}.swal2-range output{width:20%;color:inherit;font-weight:600;text-align:center}.swal2-range input,.swal2-range output{height:2.625em;padding:0;font-size:1.125em;line-height:2.625em}.swal2-input{height:2.625em;padding:0 .75em}.swal2-input[type=number]{max-width:10em}.swal2-file{background:inherit;font-size:1.125em}.swal2-textarea{height:6.75em;padding:.75em}.swal2-select{min-width:50%;max-width:100%;padding:.375em .625em;background:inherit;color:inherit;font-size:1.125em}.swal2-checkbox,.swal2-radio{align-items:center;justify-content:center;background:#fff;color:inherit}.swal2-checkbox label,.swal2-radio label{margin:0 .6em;font-size:1.125em}.swal2-checkbox input,.swal2-radio input{margin:0 .4em}.swal2-input-label{display:flex;justify-content:center;margin:1em auto}.swal2-validation-message{display:none;align-items:center;justify-content:center;margin:0 -2.7em;padding:.625em;overflow:hidden;background:#f0f0f0;color:#666;font-size:1em;font-weight:300}.swal2-validation-message::before{content:\\\"!\\\";display:inline-block;width:1.5em;min-width:1.5em;height:1.5em;margin:0 .625em;border-radius:50%;background-color:#f27474;color:#fff;font-weight:600;line-height:1.5em;text-align:center}.swal2-icon{position:relative;box-sizing:content-box;justify-content:center;width:5em;height:5em;margin:1.25em auto 1.875em;border:.25em solid transparent;border-radius:50%;border-color:#000;font-family:inherit;line-height:5em;cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:3.75em}.swal2-icon.swal2-error{border-color:#f27474;color:#f27474}.swal2-icon.swal2-error .swal2-x-mark{position:relative;flex-grow:1}.swal2-icon.swal2-error [class^=swal2-x-mark-line]{display:block;position:absolute;top:2.3125em;width:2.9375em;height:.3125em;border-radius:.125em;background-color:#f27474}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:1.0625em;transform:rotate(45deg)}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:1em;transform:rotate(-45deg)}.swal2-icon.swal2-error.swal2-icon-show{-webkit-animation:swal2-animate-error-icon .5s;animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-error.swal2-icon-show .swal2-x-mark{-webkit-animation:swal2-animate-error-x-mark .5s;animation:swal2-animate-error-x-mark .5s}.swal2-icon.swal2-warning{border-color:#facea8;color:#f8bb86}.swal2-icon.swal2-info{border-color:#9de0f6;color:#3fc3ee}.swal2-icon.swal2-question{border-color:#c9dae1;color:#87adbd}.swal2-icon.swal2-success{border-color:#a5dc86;color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-circular-line]{position:absolute;width:3.75em;height:7.5em;transform:rotate(45deg);border-radius:50%}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=left]{top:-.4375em;left:-2.0635em;transform:rotate(-45deg);transform-origin:3.75em 3.75em;border-radius:7.5em 0 0 7.5em}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=right]{top:-.6875em;left:1.875em;transform:rotate(-45deg);transform-origin:0 3.75em;border-radius:0 7.5em 7.5em 0}.swal2-icon.swal2-success .swal2-success-ring{position:absolute;z-index:2;top:-.25em;left:-.25em;box-sizing:content-box;width:100%;height:100%;border:.25em solid rgba(165,220,134,.3);border-radius:50%}.swal2-icon.swal2-success .swal2-success-fix{position:absolute;z-index:1;top:.5em;left:1.625em;width:.4375em;height:5.625em;transform:rotate(-45deg)}.swal2-icon.swal2-success [class^=swal2-success-line]{display:block;position:absolute;z-index:2;height:.3125em;border-radius:.125em;background-color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-line][class$=tip]{top:2.875em;left:.8125em;width:1.5625em;transform:rotate(45deg)}.swal2-icon.swal2-success [class^=swal2-success-line][class$=long]{top:2.375em;right:.5em;width:2.9375em;transform:rotate(-45deg)}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-tip{-webkit-animation:swal2-animate-success-line-tip .75s;animation:swal2-animate-success-line-tip .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-long{-webkit-animation:swal2-animate-success-line-long .75s;animation:swal2-animate-success-line-long .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-circular-line-right{-webkit-animation:swal2-rotate-success-circular-line 4.25s ease-in;animation:swal2-rotate-success-circular-line 4.25s ease-in}.swal2-progress-steps{flex-wrap:wrap;align-items:center;max-width:100%;margin:0 0 1.25em;padding:0;background:inherit;font-weight:600}.swal2-progress-steps li{display:inline-block;position:relative}.swal2-progress-steps .swal2-progress-step{z-index:20;flex-shrink:0;width:2em;height:2em;border-radius:2em;background:#2778c4;color:#fff;line-height:2em;text-align:center}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step{background:#2778c4}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step{background:#add8e6;color:#fff}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step-line{background:#add8e6}.swal2-progress-steps .swal2-progress-step-line{z-index:10;flex-shrink:0;width:2.5em;height:.4em;margin:0 -1px;background:#2778c4}[class^=swal2]{-webkit-tap-highlight-color:transparent}.swal2-show{-webkit-animation:swal2-show .3s;animation:swal2-show .3s}.swal2-hide{-webkit-animation:swal2-hide .15s forwards;animation:swal2-hide .15s forwards}.swal2-noanimation{transition:none}.swal2-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}.swal2-rtl .swal2-close{right:auto;left:0}.swal2-rtl .swal2-timer-progress-bar{right:0;left:auto}@supports (-ms-accelerator:true){.swal2-range input{width:100%!important}.swal2-range output{display:none}}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-range input{width:100%!important}.swal2-range output{display:none}}@-webkit-keyframes swal2-toast-show{0%{transform:translateY(-.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0)}}@keyframes swal2-toast-show{0%{transform:translateY(-.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0)}}@-webkit-keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@-webkit-keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@-webkit-keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@-webkit-keyframes swal2-show{0%{transform:scale(.7)}45%{transform:scale(1.05)}80%{transform:scale(.95)}100%{transform:scale(1)}}@keyframes swal2-show{0%{transform:scale(.7)}45%{transform:scale(1.05)}80%{transform:scale(.95)}100%{transform:scale(1)}}@-webkit-keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(.5);opacity:0}}@keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(.5);opacity:0}}@-webkit-keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@-webkit-keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@-webkit-keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@-webkit-keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(.4);opacity:0}50%{margin-top:1.625em;transform:scale(.4);opacity:0}80%{margin-top:-.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(.4);opacity:0}50%{margin-top:1.625em;transform:scale(.4);opacity:0}80%{margin-top:-.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@-webkit-keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0);opacity:1}}@keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0);opacity:1}}@-webkit-keyframes swal2-rotate-loading{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes swal2-rotate-loading{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow:hidden}body.swal2-height-auto{height:auto!important}body.swal2-no-backdrop .swal2-container{top:auto;right:auto;bottom:auto;left:auto;max-width:calc(100% - .625em * 2);background-color:transparent!important}body.swal2-no-backdrop .swal2-container>.swal2-modal{box-shadow:0 0 10px rgba(0,0,0,.4)}body.swal2-no-backdrop .swal2-container.swal2-top{top:0;left:50%;transform:translateX(-50%)}body.swal2-no-backdrop .swal2-container.swal2-top-left,body.swal2-no-backdrop .swal2-container.swal2-top-start{top:0;left:0}body.swal2-no-backdrop .swal2-container.swal2-top-end,body.swal2-no-backdrop .swal2-container.swal2-top-right{top:0;right:0}body.swal2-no-backdrop .swal2-container.swal2-center{top:50%;left:50%;transform:translate(-50%,-50%)}body.swal2-no-backdrop .swal2-container.swal2-center-left,body.swal2-no-backdrop .swal2-container.swal2-center-start{top:50%;left:0;transform:translateY(-50%)}body.swal2-no-backdrop .swal2-container.swal2-center-end,body.swal2-no-backdrop .swal2-container.swal2-center-right{top:50%;right:0;transform:translateY(-50%)}body.swal2-no-backdrop .swal2-container.swal2-bottom{bottom:0;left:50%;transform:translateX(-50%)}body.swal2-no-backdrop .swal2-container.swal2-bottom-left,body.swal2-no-backdrop .swal2-container.swal2-bottom-start{bottom:0;left:0}body.swal2-no-backdrop .swal2-container.swal2-bottom-end,body.swal2-no-backdrop .swal2-container.swal2-bottom-right{right:0;bottom:0}@media print{body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow-y:scroll!important}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown)>[aria-hidden=true]{display:none}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown) .swal2-container{position:static!important}}body.swal2-toast-shown .swal2-container{background-color:transparent}body.swal2-toast-shown .swal2-container.swal2-top{top:0;right:auto;bottom:auto;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-top-end,body.swal2-toast-shown .swal2-container.swal2-top-right{top:0;right:0;bottom:auto;left:auto}body.swal2-toast-shown .swal2-container.swal2-top-left,body.swal2-toast-shown .swal2-container.swal2-top-start{top:0;right:auto;bottom:auto;left:0}body.swal2-toast-shown .swal2-container.swal2-center-left,body.swal2-toast-shown .swal2-container.swal2-center-start{top:50%;right:auto;bottom:auto;left:0;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-center{top:50%;right:auto;bottom:auto;left:50%;transform:translate(-50%,-50%)}body.swal2-toast-shown .swal2-container.swal2-center-end,body.swal2-toast-shown .swal2-container.swal2-center-right{top:50%;right:0;bottom:auto;left:auto;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-left,body.swal2-toast-shown .swal2-container.swal2-bottom-start{top:auto;right:auto;bottom:0;left:0}body.swal2-toast-shown .swal2-container.swal2-bottom{top:auto;right:auto;bottom:0;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-end,body.swal2-toast-shown .swal2-container.swal2-bottom-right{top:auto;right:0;bottom:0;left:auto}body.swal2-toast-column .swal2-toast{flex-direction:column;align-items:stretch}body.swal2-toast-column .swal2-toast .swal2-actions{flex:1;align-self:stretch;height:2.2em;margin-top:.3125em}body.swal2-toast-column .swal2-toast .swal2-loading{justify-content:center}body.swal2-toast-column .swal2-toast .swal2-input{height:2em;margin:.3125em auto;font-size:1em}body.swal2-toast-column .swal2-toast .swal2-validation-message{font-size:1em}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sweetalert2/dist/sweetalert2.all.js\n");

/***/ }),

/***/ "./resources/js/jquery.inputmask.bundle.js":
/*!*************************************************!*\
  !*** ./resources/js/jquery.inputmask.bundle.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof2(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\n!function (modules) {\n  function __webpack_require__(moduleId) {\n    if (installedModules[moduleId]) return installedModules[moduleId].exports;\n    var module = installedModules[moduleId] = {\n      i: moduleId,\n      l: !1,\n      exports: {}\n    };\n    return modules[moduleId].call(module.exports, module, module.exports, __webpack_require__), module.l = !0, module.exports;\n  }\n\n  var installedModules = {};\n  __webpack_require__.m = modules, __webpack_require__.c = installedModules, __webpack_require__.d = function (exports, name, getter) {\n    __webpack_require__.o(exports, name) || Object.defineProperty(exports, name, {\n      configurable: !1,\n      enumerable: !0,\n      get: getter\n    });\n  }, __webpack_require__.n = function (module) {\n    var getter = module && module.__esModule ? function () {\n      return module[\"default\"];\n    } : function () {\n      return module;\n    };\n    return __webpack_require__.d(getter, \"a\", getter), getter;\n  }, __webpack_require__.o = function (object, property) {\n    return Object.prototype.hasOwnProperty.call(object, property);\n  }, __webpack_require__.p = \"\", __webpack_require__(__webpack_require__.s = 3);\n}([function (module, exports, __webpack_require__) {\n  \"use strict\";\n\n  var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n  \"function\" == typeof Symbol && Symbol.iterator;\n  !function (factory) {\n    __WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], void 0 !== (__WEBPACK_AMD_DEFINE_RESULT__ = \"function\" == typeof (__WEBPACK_AMD_DEFINE_FACTORY__ = factory) ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__) && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__);\n  }(function ($) {\n    return $;\n  });\n}, function (module, exports, __webpack_require__) {\n  \"use strict\";\n\n  var __WEBPACK_AMD_DEFINE_FACTORY__,\n      __WEBPACK_AMD_DEFINE_ARRAY__,\n      __WEBPACK_AMD_DEFINE_RESULT__,\n      _typeof = \"function\" == typeof Symbol && \"symbol\" == _typeof2(Symbol.iterator) ? function (obj) {\n    return _typeof2(obj);\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n  };\n\n  !function (factory) {\n    __WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(10), __webpack_require__(11)], void 0 !== (__WEBPACK_AMD_DEFINE_RESULT__ = \"function\" == typeof (__WEBPACK_AMD_DEFINE_FACTORY__ = factory) ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__) && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__);\n  }(function ($, window, document, undefined) {\n    function Inputmask(alias, options, internal) {\n      if (!(this instanceof Inputmask)) return new Inputmask(alias, options, internal);\n      this.el = undefined, this.events = {}, this.maskset = undefined, this.refreshValue = !1, !0 !== internal && ($.isPlainObject(alias) ? options = alias : (options = options || {}).alias = alias, this.opts = $.extend(!0, {}, this.defaults, options), this.noMasksCache = options && options.definitions !== undefined, this.userOptions = options || {}, this.isRTL = this.opts.numericInput, resolveAlias(this.opts.alias, options, this.opts));\n    }\n\n    function resolveAlias(aliasStr, options, opts) {\n      var aliasDefinition = Inputmask.prototype.aliases[aliasStr];\n      return aliasDefinition ? (aliasDefinition.alias && resolveAlias(aliasDefinition.alias, undefined, opts), $.extend(!0, opts, aliasDefinition), $.extend(!0, opts, options), !0) : (null === opts.mask && (opts.mask = aliasStr), !1);\n    }\n\n    function generateMaskSet(opts, nocache) {\n      function generateMask(mask, metadata, opts) {\n        var regexMask = !1;\n\n        if (null !== mask && \"\" !== mask || ((regexMask = null !== opts.regex) ? mask = (mask = opts.regex).replace(/^(\\^)(.*)(\\$)$/, \"$2\") : (regexMask = !0, mask = \".*\")), 1 === mask.length && !1 === opts.greedy && 0 !== opts.repeat && (opts.placeholder = \"\"), opts.repeat > 0 || \"*\" === opts.repeat || \"+\" === opts.repeat) {\n          var repeatStart = \"*\" === opts.repeat ? 0 : \"+\" === opts.repeat ? 1 : opts.repeat;\n          mask = opts.groupmarker.start + mask + opts.groupmarker.end + opts.quantifiermarker.start + repeatStart + \",\" + opts.repeat + opts.quantifiermarker.end;\n        }\n\n        var masksetDefinition,\n            maskdefKey = regexMask ? \"regex_\" + opts.regex : opts.numericInput ? mask.split(\"\").reverse().join(\"\") : mask;\n        return Inputmask.prototype.masksCache[maskdefKey] === undefined || !0 === nocache ? (masksetDefinition = {\n          mask: mask,\n          maskToken: Inputmask.prototype.analyseMask(mask, regexMask, opts),\n          validPositions: {},\n          _buffer: undefined,\n          buffer: undefined,\n          tests: {},\n          metadata: metadata,\n          maskLength: undefined\n        }, !0 !== nocache && (Inputmask.prototype.masksCache[maskdefKey] = masksetDefinition, masksetDefinition = $.extend(!0, {}, Inputmask.prototype.masksCache[maskdefKey]))) : masksetDefinition = $.extend(!0, {}, Inputmask.prototype.masksCache[maskdefKey]), masksetDefinition;\n      }\n\n      if ($.isFunction(opts.mask) && (opts.mask = opts.mask(opts)), $.isArray(opts.mask)) {\n        if (opts.mask.length > 1) {\n          opts.keepStatic = null === opts.keepStatic || opts.keepStatic;\n          var altMask = opts.groupmarker.start;\n          return $.each(opts.numericInput ? opts.mask.reverse() : opts.mask, function (ndx, msk) {\n            altMask.length > 1 && (altMask += opts.groupmarker.end + opts.alternatormarker + opts.groupmarker.start), msk.mask === undefined || $.isFunction(msk.mask) ? altMask += msk : altMask += msk.mask;\n          }), altMask += opts.groupmarker.end, generateMask(altMask, opts.mask, opts);\n        }\n\n        opts.mask = opts.mask.pop();\n      }\n\n      return opts.mask && opts.mask.mask !== undefined && !$.isFunction(opts.mask.mask) ? generateMask(opts.mask.mask, opts.mask, opts) : generateMask(opts.mask, opts.mask, opts);\n    }\n\n    function maskScope(actionObj, maskset, opts) {\n      function getMaskTemplate(baseOnInput, minimalPos, includeMode) {\n        minimalPos = minimalPos || 0;\n        var ndxIntlzr,\n            test,\n            testPos,\n            maskTemplate = [],\n            pos = 0,\n            lvp = getLastValidPosition();\n\n        do {\n          !0 === baseOnInput && getMaskSet().validPositions[pos] ? (test = (testPos = getMaskSet().validPositions[pos]).match, ndxIntlzr = testPos.locator.slice(), maskTemplate.push(!0 === includeMode ? testPos.input : !1 === includeMode ? test.nativeDef : getPlaceholder(pos, test))) : (test = (testPos = getTestTemplate(pos, ndxIntlzr, pos - 1)).match, ndxIntlzr = testPos.locator.slice(), (!1 === opts.jitMasking || pos < lvp || \"number\" == typeof opts.jitMasking && isFinite(opts.jitMasking) && opts.jitMasking > pos) && maskTemplate.push(!1 === includeMode ? test.nativeDef : getPlaceholder(pos, test))), pos++;\n        } while ((maxLength === undefined || pos < maxLength) && (null !== test.fn || \"\" !== test.def) || minimalPos > pos);\n\n        return \"\" === maskTemplate[maskTemplate.length - 1] && maskTemplate.pop(), getMaskSet().maskLength = pos + 1, maskTemplate;\n      }\n\n      function getMaskSet() {\n        return maskset;\n      }\n\n      function resetMaskSet(soft) {\n        var maskset = getMaskSet();\n        maskset.buffer = undefined, !0 !== soft && (maskset.validPositions = {}, maskset.p = 0);\n      }\n\n      function getLastValidPosition(closestTo, strict, validPositions) {\n        var before = -1,\n            after = -1,\n            valids = validPositions || getMaskSet().validPositions;\n        closestTo === undefined && (closestTo = -1);\n\n        for (var posNdx in valids) {\n          var psNdx = parseInt(posNdx);\n          valids[psNdx] && (strict || !0 !== valids[psNdx].generatedInput) && (psNdx <= closestTo && (before = psNdx), psNdx >= closestTo && (after = psNdx));\n        }\n\n        return -1 !== before && closestTo - before > 1 || after < closestTo ? before : after;\n      }\n\n      function stripValidPositions(start, end, nocheck, strict) {\n        var i,\n            startPos = start,\n            positionsClone = $.extend(!0, {}, getMaskSet().validPositions),\n            needsValidation = !1;\n\n        for (getMaskSet().p = start, i = end - 1; i >= startPos; i--) {\n          getMaskSet().validPositions[i] !== undefined && (!0 !== nocheck && (!getMaskSet().validPositions[i].match.optionality && function (pos) {\n            var posMatch = getMaskSet().validPositions[pos];\n\n            if (posMatch !== undefined && null === posMatch.match.fn) {\n              var prevMatch = getMaskSet().validPositions[pos - 1],\n                  nextMatch = getMaskSet().validPositions[pos + 1];\n              return prevMatch !== undefined && nextMatch !== undefined;\n            }\n\n            return !1;\n          }(i) || !1 === opts.canClearPosition(getMaskSet(), i, getLastValidPosition(), strict, opts)) || delete getMaskSet().validPositions[i]);\n        }\n\n        for (resetMaskSet(!0), i = startPos + 1; i <= getLastValidPosition();) {\n          for (; getMaskSet().validPositions[startPos] !== undefined;) {\n            startPos++;\n          }\n\n          if (i < startPos && (i = startPos + 1), getMaskSet().validPositions[i] === undefined && isMask(i)) i++;else {\n            var t = getTestTemplate(i);\n            !1 === needsValidation && positionsClone[startPos] && positionsClone[startPos].match.def === t.match.def ? (getMaskSet().validPositions[startPos] = $.extend(!0, {}, positionsClone[startPos]), getMaskSet().validPositions[startPos].input = t.input, delete getMaskSet().validPositions[i], i++) : positionCanMatchDefinition(startPos, t.match.def) ? !1 !== isValid(startPos, t.input || getPlaceholder(i), !0) && (delete getMaskSet().validPositions[i], i++, needsValidation = !0) : isMask(i) || (i++, startPos--), startPos++;\n          }\n        }\n\n        resetMaskSet(!0);\n      }\n\n      function determineTestTemplate(tests, guessNextBest) {\n        for (var testPos, testPositions = tests, lvp = getLastValidPosition(), lvTest = getMaskSet().validPositions[lvp] || getTests(0)[0], lvTestAltArr = lvTest.alternation !== undefined ? lvTest.locator[lvTest.alternation].toString().split(\",\") : [], ndx = 0; ndx < testPositions.length && (!((testPos = testPositions[ndx]).match && (opts.greedy && !0 !== testPos.match.optionalQuantifier || (!1 === testPos.match.optionality || !1 === testPos.match.newBlockMarker) && !0 !== testPos.match.optionalQuantifier) && (lvTest.alternation === undefined || lvTest.alternation !== testPos.alternation || testPos.locator[lvTest.alternation] !== undefined && checkAlternationMatch(testPos.locator[lvTest.alternation].toString().split(\",\"), lvTestAltArr))) || !0 === guessNextBest && (null !== testPos.match.fn || /[0-9a-bA-Z]/.test(testPos.match.def))); ndx++) {\n          ;\n        }\n\n        return testPos;\n      }\n\n      function getTestTemplate(pos, ndxIntlzr, tstPs) {\n        return getMaskSet().validPositions[pos] || determineTestTemplate(getTests(pos, ndxIntlzr ? ndxIntlzr.slice() : ndxIntlzr, tstPs));\n      }\n\n      function getTest(pos) {\n        return getMaskSet().validPositions[pos] ? getMaskSet().validPositions[pos] : getTests(pos)[0];\n      }\n\n      function positionCanMatchDefinition(pos, def) {\n        for (var valid = !1, tests = getTests(pos), tndx = 0; tndx < tests.length; tndx++) {\n          if (tests[tndx].match && tests[tndx].match.def === def) {\n            valid = !0;\n            break;\n          }\n        }\n\n        return valid;\n      }\n\n      function getTests(pos, ndxIntlzr, tstPs) {\n        function resolveTestFromToken(maskToken, ndxInitializer, loopNdx, quantifierRecurse) {\n          function handleMatch(match, loopNdx, quantifierRecurse) {\n            function isFirstMatch(latestMatch, tokenGroup) {\n              var firstMatch = 0 === $.inArray(latestMatch, tokenGroup.matches);\n              return firstMatch || $.each(tokenGroup.matches, function (ndx, match) {\n                if (!0 === match.isQuantifier && (firstMatch = isFirstMatch(latestMatch, tokenGroup.matches[ndx - 1]))) return !1;\n              }), firstMatch;\n            }\n\n            function resolveNdxInitializer(pos, alternateNdx, targetAlternation) {\n              var bestMatch, indexPos;\n              if (getMaskSet().validPositions[pos - 1] && targetAlternation && getMaskSet().tests[pos]) for (var vpAlternation = getMaskSet().validPositions[pos - 1].locator, tpAlternation = getMaskSet().tests[pos][0].locator, i = 0; i < targetAlternation; i++) {\n                if (vpAlternation[i] !== tpAlternation[i]) return vpAlternation.slice(targetAlternation + 1);\n              }\n              return (getMaskSet().tests[pos] || getMaskSet().validPositions[pos]) && $.each(getMaskSet().tests[pos] || [getMaskSet().validPositions[pos]], function (ndx, lmnt) {\n                var alternation = targetAlternation !== undefined ? targetAlternation : lmnt.alternation,\n                    ndxPos = lmnt.locator[alternation] !== undefined ? lmnt.locator[alternation].toString().indexOf(alternateNdx) : -1;\n                (indexPos === undefined || ndxPos < indexPos) && -1 !== ndxPos && (bestMatch = lmnt, indexPos = ndxPos);\n              }), bestMatch ? bestMatch.locator.slice((targetAlternation !== undefined ? targetAlternation : bestMatch.alternation) + 1) : targetAlternation !== undefined ? resolveNdxInitializer(pos, alternateNdx) : undefined;\n            }\n\n            if (testPos > 1e4) throw \"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. \" + getMaskSet().mask;\n            if (testPos === pos && match.matches === undefined) return matches.push({\n              match: match,\n              locator: loopNdx.reverse(),\n              cd: cacheDependency\n            }), !0;\n\n            if (match.matches !== undefined) {\n              if (match.isGroup && quantifierRecurse !== match) {\n                if (match = handleMatch(maskToken.matches[$.inArray(match, maskToken.matches) + 1], loopNdx)) return !0;\n              } else if (match.isOptional) {\n                var optionalToken = match;\n\n                if (match = resolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse)) {\n                  if (latestMatch = matches[matches.length - 1].match, !isFirstMatch(latestMatch, optionalToken)) return !0;\n                  insertStop = !0, testPos = pos;\n                }\n              } else if (match.isAlternator) {\n                var maltMatches,\n                    alternateToken = match,\n                    malternateMatches = [],\n                    currentMatches = matches.slice(),\n                    loopNdxCnt = loopNdx.length,\n                    altIndex = ndxInitializer.length > 0 ? ndxInitializer.shift() : -1;\n\n                if (-1 === altIndex || \"string\" == typeof altIndex) {\n                  var amndx,\n                      currentPos = testPos,\n                      ndxInitializerClone = ndxInitializer.slice(),\n                      altIndexArr = [];\n                  if (\"string\" == typeof altIndex) altIndexArr = altIndex.split(\",\");else for (amndx = 0; amndx < alternateToken.matches.length; amndx++) {\n                    altIndexArr.push(amndx);\n                  }\n\n                  for (var ndx = 0; ndx < altIndexArr.length; ndx++) {\n                    if (amndx = parseInt(altIndexArr[ndx]), matches = [], ndxInitializer = resolveNdxInitializer(testPos, amndx, loopNdxCnt) || ndxInitializerClone.slice(), !0 !== (match = handleMatch(alternateToken.matches[amndx] || maskToken.matches[amndx], [amndx].concat(loopNdx), quantifierRecurse) || match) && match !== undefined && altIndexArr[altIndexArr.length - 1] < alternateToken.matches.length) {\n                      var ntndx = $.inArray(match, maskToken.matches) + 1;\n                      maskToken.matches.length > ntndx && (match = handleMatch(maskToken.matches[ntndx], [ntndx].concat(loopNdx.slice(1, loopNdx.length)), quantifierRecurse)) && (altIndexArr.push(ntndx.toString()), $.each(matches, function (ndx, lmnt) {\n                        lmnt.alternation = loopNdx.length - 1;\n                      }));\n                    }\n\n                    maltMatches = matches.slice(), testPos = currentPos, matches = [];\n\n                    for (var ndx1 = 0; ndx1 < maltMatches.length; ndx1++) {\n                      var altMatch = maltMatches[ndx1],\n                          dropMatch = !1;\n                      altMatch.alternation = altMatch.alternation || loopNdxCnt;\n\n                      for (var ndx2 = 0; ndx2 < malternateMatches.length; ndx2++) {\n                        var altMatch2 = malternateMatches[ndx2];\n\n                        if (\"string\" != typeof altIndex || -1 !== $.inArray(altMatch.locator[altMatch.alternation].toString(), altIndexArr)) {\n                          if (function (source, target) {\n                            return source.match.nativeDef === target.match.nativeDef || source.match.def === target.match.nativeDef || source.match.nativeDef === target.match.def;\n                          }(altMatch, altMatch2)) {\n                            dropMatch = !0, altMatch.alternation === altMatch2.alternation && -1 === altMatch2.locator[altMatch2.alternation].toString().indexOf(altMatch.locator[altMatch.alternation]) && (altMatch2.locator[altMatch2.alternation] = altMatch2.locator[altMatch2.alternation] + \",\" + altMatch.locator[altMatch.alternation], altMatch2.alternation = altMatch.alternation), altMatch.match.nativeDef === altMatch2.match.def && (altMatch.locator[altMatch.alternation] = altMatch2.locator[altMatch2.alternation], malternateMatches.splice(malternateMatches.indexOf(altMatch2), 1, altMatch));\n                            break;\n                          }\n\n                          if (altMatch.match.def === altMatch2.match.def) {\n                            dropMatch = !1;\n                            break;\n                          }\n\n                          if (function (source, target) {\n                            return null === source.match.fn && null !== target.match.fn && target.match.fn.test(source.match.def, getMaskSet(), pos, !1, opts, !1);\n                          }(altMatch, altMatch2) || function (source, target) {\n                            return null !== source.match.fn && null !== target.match.fn && target.match.fn.test(source.match.def.replace(/[\\[\\]]/g, \"\"), getMaskSet(), pos, !1, opts, !1);\n                          }(altMatch, altMatch2)) {\n                            altMatch.alternation === altMatch2.alternation && -1 === altMatch.locator[altMatch.alternation].toString().indexOf(altMatch2.locator[altMatch2.alternation].toString().split(\"\")[0]) && (altMatch.na = altMatch.na || altMatch.locator[altMatch.alternation].toString(), -1 === altMatch.na.indexOf(altMatch.locator[altMatch.alternation].toString().split(\"\")[0]) && (altMatch.na = altMatch.na + \",\" + altMatch.locator[altMatch2.alternation].toString().split(\"\")[0]), dropMatch = !0, altMatch.locator[altMatch.alternation] = altMatch2.locator[altMatch2.alternation].toString().split(\"\")[0] + \",\" + altMatch.locator[altMatch.alternation], malternateMatches.splice(malternateMatches.indexOf(altMatch2), 0, altMatch));\n                            break;\n                          }\n                        }\n                      }\n\n                      dropMatch || malternateMatches.push(altMatch);\n                    }\n                  }\n\n                  \"string\" == typeof altIndex && (malternateMatches = $.map(malternateMatches, function (lmnt, ndx) {\n                    if (isFinite(ndx)) {\n                      var alternation = lmnt.alternation,\n                          altLocArr = lmnt.locator[alternation].toString().split(\",\");\n                      lmnt.locator[alternation] = undefined, lmnt.alternation = undefined;\n\n                      for (var alndx = 0; alndx < altLocArr.length; alndx++) {\n                        -1 !== $.inArray(altLocArr[alndx], altIndexArr) && (lmnt.locator[alternation] !== undefined ? (lmnt.locator[alternation] += \",\", lmnt.locator[alternation] += altLocArr[alndx]) : lmnt.locator[alternation] = parseInt(altLocArr[alndx]), lmnt.alternation = alternation);\n                      }\n\n                      if (lmnt.locator[alternation] !== undefined) return lmnt;\n                    }\n                  })), matches = currentMatches.concat(malternateMatches), testPos = pos, insertStop = matches.length > 0, match = malternateMatches.length > 0, ndxInitializer = ndxInitializerClone.slice();\n                } else match = handleMatch(alternateToken.matches[altIndex] || maskToken.matches[altIndex], [altIndex].concat(loopNdx), quantifierRecurse);\n\n                if (match) return !0;\n              } else if (match.isQuantifier && quantifierRecurse !== maskToken.matches[$.inArray(match, maskToken.matches) - 1]) for (var qt = match, qndx = ndxInitializer.length > 0 ? ndxInitializer.shift() : 0; qndx < (isNaN(qt.quantifier.max) ? qndx + 1 : qt.quantifier.max) && testPos <= pos; qndx++) {\n                var tokenGroup = maskToken.matches[$.inArray(qt, maskToken.matches) - 1];\n\n                if (match = handleMatch(tokenGroup, [qndx].concat(loopNdx), tokenGroup)) {\n                  if (latestMatch = matches[matches.length - 1].match, latestMatch.optionalQuantifier = qndx > qt.quantifier.min - 1, isFirstMatch(latestMatch, tokenGroup)) {\n                    if (qndx > qt.quantifier.min - 1) {\n                      insertStop = !0, testPos = pos;\n                      break;\n                    }\n\n                    return !0;\n                  }\n\n                  return !0;\n                }\n              } else if (match = resolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse)) return !0;\n            } else testPos++;\n          }\n\n          for (var tndx = ndxInitializer.length > 0 ? ndxInitializer.shift() : 0; tndx < maskToken.matches.length; tndx++) {\n            if (!0 !== maskToken.matches[tndx].isQuantifier) {\n              var match = handleMatch(maskToken.matches[tndx], [tndx].concat(loopNdx), quantifierRecurse);\n              if (match && testPos === pos) return match;\n              if (testPos > pos) break;\n            }\n          }\n        }\n\n        function filterTests(tests) {\n          if (opts.keepStatic && pos > 0 && tests.length > 1 + (\"\" === tests[tests.length - 1].match.def ? 1 : 0) && !0 !== tests[0].match.optionality && !0 !== tests[0].match.optionalQuantifier && null === tests[0].match.fn && !/[0-9a-bA-Z]/.test(tests[0].match.def)) {\n            if (getMaskSet().validPositions[pos - 1] === undefined) return [determineTestTemplate(tests)];\n            if (getMaskSet().validPositions[pos - 1].alternation === tests[0].alternation) return [determineTestTemplate(tests)];\n            if (getMaskSet().validPositions[pos - 1]) return [determineTestTemplate(tests)];\n          }\n\n          return tests;\n        }\n\n        var latestMatch,\n            maskTokens = getMaskSet().maskToken,\n            testPos = ndxIntlzr ? tstPs : 0,\n            ndxInitializer = ndxIntlzr ? ndxIntlzr.slice() : [0],\n            matches = [],\n            insertStop = !1,\n            cacheDependency = ndxIntlzr ? ndxIntlzr.join(\"\") : \"\";\n\n        if (pos > -1) {\n          if (ndxIntlzr === undefined) {\n            for (var test, previousPos = pos - 1; (test = getMaskSet().validPositions[previousPos] || getMaskSet().tests[previousPos]) === undefined && previousPos > -1;) {\n              previousPos--;\n            }\n\n            test !== undefined && previousPos > -1 && (ndxInitializer = function (tests) {\n              var locator = [];\n              return $.isArray(tests) || (tests = [tests]), tests.length > 0 && (tests[0].alternation === undefined ? 0 === (locator = determineTestTemplate(tests.slice()).locator.slice()).length && (locator = tests[0].locator.slice()) : $.each(tests, function (ndx, tst) {\n                if (\"\" !== tst.def) if (0 === locator.length) locator = tst.locator.slice();else for (var i = 0; i < locator.length; i++) {\n                  tst.locator[i] && -1 === locator[i].toString().indexOf(tst.locator[i]) && (locator[i] += \",\" + tst.locator[i]);\n                }\n              })), locator;\n            }(test), cacheDependency = ndxInitializer.join(\"\"), testPos = previousPos);\n          }\n\n          if (getMaskSet().tests[pos] && getMaskSet().tests[pos][0].cd === cacheDependency) return filterTests(getMaskSet().tests[pos]);\n\n          for (var mtndx = ndxInitializer.shift(); mtndx < maskTokens.length && !(resolveTestFromToken(maskTokens[mtndx], ndxInitializer, [mtndx]) && testPos === pos || testPos > pos); mtndx++) {\n            ;\n          }\n        }\n\n        return (0 === matches.length || insertStop) && matches.push({\n          match: {\n            fn: null,\n            cardinality: 0,\n            optionality: !0,\n            casing: null,\n            def: \"\",\n            placeholder: \"\"\n          },\n          locator: [],\n          cd: cacheDependency\n        }), ndxIntlzr !== undefined && getMaskSet().tests[pos] ? filterTests($.extend(!0, [], matches)) : (getMaskSet().tests[pos] = $.extend(!0, [], matches), filterTests(getMaskSet().tests[pos]));\n      }\n\n      function getBufferTemplate() {\n        return getMaskSet()._buffer === undefined && (getMaskSet()._buffer = getMaskTemplate(!1, 1), getMaskSet().buffer === undefined && (getMaskSet().buffer = getMaskSet()._buffer.slice())), getMaskSet()._buffer;\n      }\n\n      function getBuffer(noCache) {\n        return getMaskSet().buffer !== undefined && !0 !== noCache || (getMaskSet().buffer = getMaskTemplate(!0, getLastValidPosition(), !0)), getMaskSet().buffer;\n      }\n\n      function refreshFromBuffer(start, end, buffer) {\n        var i, p;\n        if (!0 === start) resetMaskSet(), start = 0, end = buffer.length;else for (i = start; i < end; i++) {\n          delete getMaskSet().validPositions[i];\n        }\n\n        for (p = start, i = start; i < end; i++) {\n          if (resetMaskSet(!0), buffer[i] !== opts.skipOptionalPartCharacter) {\n            var valResult = isValid(p, buffer[i], !0, !0);\n            !1 !== valResult && (resetMaskSet(!0), p = valResult.caret !== undefined ? valResult.caret : valResult.pos + 1);\n          }\n        }\n      }\n\n      function casing(elem, test, pos) {\n        switch (opts.casing || test.casing) {\n          case \"upper\":\n            elem = elem.toUpperCase();\n            break;\n\n          case \"lower\":\n            elem = elem.toLowerCase();\n            break;\n\n          case \"title\":\n            var posBefore = getMaskSet().validPositions[pos - 1];\n            elem = 0 === pos || posBefore && posBefore.input === String.fromCharCode(Inputmask.keyCode.SPACE) ? elem.toUpperCase() : elem.toLowerCase();\n            break;\n\n          default:\n            if ($.isFunction(opts.casing)) {\n              var args = Array.prototype.slice.call(arguments);\n              args.push(getMaskSet().validPositions), elem = opts.casing.apply(this, args);\n            }\n\n        }\n\n        return elem;\n      }\n\n      function checkAlternationMatch(altArr1, altArr2, na) {\n        for (var naNdx, altArrC = opts.greedy ? altArr2 : altArr2.slice(0, 1), isMatch = !1, naArr = na !== undefined ? na.split(\",\") : [], i = 0; i < naArr.length; i++) {\n          -1 !== (naNdx = altArr1.indexOf(naArr[i])) && altArr1.splice(naNdx, 1);\n        }\n\n        for (var alndx = 0; alndx < altArr1.length; alndx++) {\n          if (-1 !== $.inArray(altArr1[alndx], altArrC)) {\n            isMatch = !0;\n            break;\n          }\n        }\n\n        return isMatch;\n      }\n\n      function isValid(pos, c, strict, fromSetValid, fromAlternate, validateOnly) {\n        function isSelection(posObj) {\n          var selection = isRTL ? posObj.begin - posObj.end > 1 || posObj.begin - posObj.end == 1 : posObj.end - posObj.begin > 1 || posObj.end - posObj.begin == 1;\n          return selection && 0 === posObj.begin && posObj.end === getMaskSet().maskLength ? \"full\" : selection;\n        }\n\n        function _isValid(position, c, strict) {\n          var rslt = !1;\n          return $.each(getTests(position), function (ndx, tst) {\n            for (var test = tst.match, loopend = c ? 1 : 0, chrs = \"\", i = test.cardinality; i > loopend; i--) {\n              chrs += getBufferElement(position - (i - 1));\n            }\n\n            if (c && (chrs += c), getBuffer(!0), !1 !== (rslt = null != test.fn ? test.fn.test(chrs, getMaskSet(), position, strict, opts, isSelection(pos)) : (c === test.def || c === opts.skipOptionalPartCharacter) && \"\" !== test.def && {\n              c: getPlaceholder(position, test, !0) || test.def,\n              pos: position\n            })) {\n              var elem = rslt.c !== undefined ? rslt.c : c;\n              elem = elem === opts.skipOptionalPartCharacter && null === test.fn ? getPlaceholder(position, test, !0) || test.def : elem;\n              var validatedPos = position,\n                  possibleModifiedBuffer = getBuffer();\n\n              if (rslt.remove !== undefined && ($.isArray(rslt.remove) || (rslt.remove = [rslt.remove]), $.each(rslt.remove.sort(function (a, b) {\n                return b - a;\n              }), function (ndx, lmnt) {\n                stripValidPositions(lmnt, lmnt + 1, !0);\n              })), rslt.insert !== undefined && ($.isArray(rslt.insert) || (rslt.insert = [rslt.insert]), $.each(rslt.insert.sort(function (a, b) {\n                return a - b;\n              }), function (ndx, lmnt) {\n                isValid(lmnt.pos, lmnt.c, !0, fromSetValid);\n              })), rslt.refreshFromBuffer) {\n                var refresh = rslt.refreshFromBuffer;\n                if (refreshFromBuffer(!0 === refresh ? refresh : refresh.start, refresh.end, possibleModifiedBuffer), rslt.pos === undefined && rslt.c === undefined) return rslt.pos = getLastValidPosition(), !1;\n                if ((validatedPos = rslt.pos !== undefined ? rslt.pos : position) !== position) return rslt = $.extend(rslt, isValid(validatedPos, elem, !0, fromSetValid)), !1;\n              } else if (!0 !== rslt && rslt.pos !== undefined && rslt.pos !== position && (validatedPos = rslt.pos, refreshFromBuffer(position, validatedPos, getBuffer().slice()), validatedPos !== position)) return rslt = $.extend(rslt, isValid(validatedPos, elem, !0)), !1;\n\n              return (!0 === rslt || rslt.pos !== undefined || rslt.c !== undefined) && (ndx > 0 && resetMaskSet(!0), setValidPosition(validatedPos, $.extend({}, tst, {\n                input: casing(elem, test, validatedPos)\n              }), fromSetValid, isSelection(pos)) || (rslt = !1), !1);\n            }\n          }), rslt;\n        }\n\n        function setValidPosition(pos, validTest, fromSetValid, isSelection) {\n          if (isSelection || opts.insertMode && getMaskSet().validPositions[pos] !== undefined && fromSetValid === undefined) {\n            var i,\n                positionsClone = $.extend(!0, {}, getMaskSet().validPositions),\n                lvp = getLastValidPosition(undefined, !0);\n\n            for (i = pos; i <= lvp; i++) {\n              delete getMaskSet().validPositions[i];\n            }\n\n            getMaskSet().validPositions[pos] = $.extend(!0, {}, validTest);\n            var j,\n                valid = !0,\n                vps = getMaskSet().validPositions,\n                needsValidation = !1,\n                initialLength = getMaskSet().maskLength;\n\n            for (i = j = pos; i <= lvp; i++) {\n              var t = positionsClone[i];\n              if (t !== undefined) for (var posMatch = j; posMatch < getMaskSet().maskLength && (null === t.match.fn && vps[i] && (!0 === vps[i].match.optionalQuantifier || !0 === vps[i].match.optionality) || null != t.match.fn);) {\n                if (posMatch++, !1 === needsValidation && positionsClone[posMatch] && positionsClone[posMatch].match.def === t.match.def) getMaskSet().validPositions[posMatch] = $.extend(!0, {}, positionsClone[posMatch]), getMaskSet().validPositions[posMatch].input = t.input, fillMissingNonMask(posMatch), j = posMatch, valid = !0;else if (positionCanMatchDefinition(posMatch, t.match.def)) {\n                  var result = isValid(posMatch, t.input, !0, !0);\n                  valid = !1 !== result, j = result.caret || result.insert ? getLastValidPosition() : posMatch, needsValidation = !0;\n                } else if (!(valid = !0 === t.generatedInput) && posMatch >= getMaskSet().maskLength - 1) break;\n                if (getMaskSet().maskLength < initialLength && (getMaskSet().maskLength = initialLength), valid) break;\n              }\n              if (!valid) break;\n            }\n\n            if (!valid) return getMaskSet().validPositions = $.extend(!0, {}, positionsClone), resetMaskSet(!0), !1;\n          } else getMaskSet().validPositions[pos] = $.extend(!0, {}, validTest);\n\n          return resetMaskSet(!0), !0;\n        }\n\n        function fillMissingNonMask(maskPos) {\n          for (var pndx = maskPos - 1; pndx > -1 && !getMaskSet().validPositions[pndx]; pndx--) {\n            ;\n          }\n\n          var testTemplate, testsFromPos;\n\n          for (pndx++; pndx < maskPos; pndx++) {\n            getMaskSet().validPositions[pndx] === undefined && (!1 === opts.jitMasking || opts.jitMasking > pndx) && (\"\" === (testsFromPos = getTests(pndx, getTestTemplate(pndx - 1).locator, pndx - 1).slice())[testsFromPos.length - 1].match.def && testsFromPos.pop(), (testTemplate = determineTestTemplate(testsFromPos)) && (testTemplate.match.def === opts.radixPointDefinitionSymbol || !isMask(pndx, !0) || $.inArray(opts.radixPoint, getBuffer()) < pndx && testTemplate.match.fn && testTemplate.match.fn.test(getPlaceholder(pndx), getMaskSet(), pndx, !1, opts)) && !1 !== (result = _isValid(pndx, getPlaceholder(pndx, testTemplate.match, !0) || (null == testTemplate.match.fn ? testTemplate.match.def : \"\" !== getPlaceholder(pndx) ? getPlaceholder(pndx) : getBuffer()[pndx]), !0)) && (getMaskSet().validPositions[result.pos || pndx].generatedInput = !0));\n          }\n        }\n\n        strict = !0 === strict;\n        var maskPos = pos;\n        pos.begin !== undefined && (maskPos = isRTL && !isSelection(pos) ? pos.end : pos.begin);\n        var result = !0,\n            positionsClone = $.extend(!0, {}, getMaskSet().validPositions);\n\n        if ($.isFunction(opts.preValidation) && !strict && !0 !== fromSetValid && !0 !== validateOnly && (result = opts.preValidation(getBuffer(), maskPos, c, isSelection(pos), opts)), !0 === result) {\n          if (fillMissingNonMask(maskPos), isSelection(pos) && (handleRemove(undefined, Inputmask.keyCode.DELETE, pos, !0, !0), maskPos = getMaskSet().p), maskPos < getMaskSet().maskLength && (maxLength === undefined || maskPos < maxLength) && (result = _isValid(maskPos, c, strict), (!strict || !0 === fromSetValid) && !1 === result && !0 !== validateOnly)) {\n            var currentPosValid = getMaskSet().validPositions[maskPos];\n\n            if (!currentPosValid || null !== currentPosValid.match.fn || currentPosValid.match.def !== c && c !== opts.skipOptionalPartCharacter) {\n              if ((opts.insertMode || getMaskSet().validPositions[seekNext(maskPos)] === undefined) && !isMask(maskPos, !0)) for (var nPos = maskPos + 1, snPos = seekNext(maskPos); nPos <= snPos; nPos++) {\n                if (!1 !== (result = _isValid(nPos, c, strict))) {\n                  !function (originalPos, newPos) {\n                    var vp = getMaskSet().validPositions[newPos];\n                    if (vp) for (var targetLocator = vp.locator, tll = targetLocator.length, ps = originalPos; ps < newPos; ps++) {\n                      if (getMaskSet().validPositions[ps] === undefined && !isMask(ps, !0)) {\n                        var tests = getTests(ps).slice(),\n                            bestMatch = determineTestTemplate(tests, !0),\n                            equality = -1;\n                        \"\" === tests[tests.length - 1].match.def && tests.pop(), $.each(tests, function (ndx, tst) {\n                          for (var i = 0; i < tll; i++) {\n                            if (tst.locator[i] === undefined || !checkAlternationMatch(tst.locator[i].toString().split(\",\"), targetLocator[i].toString().split(\",\"), tst.na)) {\n                              var targetAI = targetLocator[i],\n                                  bestMatchAI = bestMatch.locator[i],\n                                  tstAI = tst.locator[i];\n                              targetAI - bestMatchAI > Math.abs(targetAI - tstAI) && (bestMatch = tst);\n                              break;\n                            }\n\n                            equality < i && (equality = i, bestMatch = tst);\n                          }\n                        }), (bestMatch = $.extend({}, bestMatch, {\n                          input: getPlaceholder(ps, bestMatch.match, !0) || bestMatch.match.def\n                        })).generatedInput = !0, setValidPosition(ps, bestMatch, !0), getMaskSet().validPositions[newPos] = undefined, _isValid(newPos, vp.input, !0);\n                      }\n                    }\n                  }(maskPos, result.pos !== undefined ? result.pos : nPos), maskPos = nPos;\n                  break;\n                }\n              }\n            } else result = {\n              caret: seekNext(maskPos)\n            };\n          }\n\n          !1 === result && opts.keepStatic && !strict && !0 !== fromAlternate && (result = function (pos, c, strict) {\n            var lastAlt,\n                alternation,\n                altPos,\n                prevAltPos,\n                i,\n                validPos,\n                altNdxs,\n                decisionPos,\n                validPsClone = $.extend(!0, {}, getMaskSet().validPositions),\n                isValidRslt = !1,\n                lAltPos = getLastValidPosition();\n\n            for (prevAltPos = getMaskSet().validPositions[lAltPos]; lAltPos >= 0; lAltPos--) {\n              if ((altPos = getMaskSet().validPositions[lAltPos]) && altPos.alternation !== undefined) {\n                if (lastAlt = lAltPos, alternation = getMaskSet().validPositions[lastAlt].alternation, prevAltPos.locator[altPos.alternation] !== altPos.locator[altPos.alternation]) break;\n                prevAltPos = altPos;\n              }\n            }\n\n            if (alternation !== undefined) {\n              decisionPos = parseInt(lastAlt);\n              var decisionTaker = prevAltPos.locator[prevAltPos.alternation || alternation] !== undefined ? prevAltPos.locator[prevAltPos.alternation || alternation] : altNdxs[0];\n              decisionTaker.length > 0 && (decisionTaker = decisionTaker.split(\",\")[0]);\n              var possibilityPos = getMaskSet().validPositions[decisionPos],\n                  prevPos = getMaskSet().validPositions[decisionPos - 1];\n              $.each(getTests(decisionPos, prevPos ? prevPos.locator : undefined, decisionPos - 1), function (ndx, test) {\n                altNdxs = test.locator[alternation] ? test.locator[alternation].toString().split(\",\") : [];\n\n                for (var mndx = 0; mndx < altNdxs.length; mndx++) {\n                  var validInputs = [],\n                      staticInputsBeforePos = 0,\n                      staticInputsBeforePosAlternate = 0,\n                      verifyValidInput = !1;\n\n                  if (decisionTaker < altNdxs[mndx] && (test.na === undefined || -1 === $.inArray(altNdxs[mndx], test.na.split(\",\")) || -1 === $.inArray(decisionTaker.toString(), altNdxs))) {\n                    getMaskSet().validPositions[decisionPos] = $.extend(!0, {}, test);\n                    var possibilities = getMaskSet().validPositions[decisionPos].locator;\n\n                    for (getMaskSet().validPositions[decisionPos].locator[alternation] = parseInt(altNdxs[mndx]), null == test.match.fn ? (possibilityPos.input !== test.match.def && (verifyValidInput = !0, !0 !== possibilityPos.generatedInput && validInputs.push(possibilityPos.input)), staticInputsBeforePosAlternate++, getMaskSet().validPositions[decisionPos].generatedInput = !/[0-9a-bA-Z]/.test(test.match.def), getMaskSet().validPositions[decisionPos].input = test.match.def) : getMaskSet().validPositions[decisionPos].input = possibilityPos.input, i = decisionPos + 1; i < getLastValidPosition(undefined, !0) + 1; i++) {\n                      (validPos = getMaskSet().validPositions[i]) && !0 !== validPos.generatedInput && /[0-9a-bA-Z]/.test(validPos.input) ? validInputs.push(validPos.input) : i < pos && staticInputsBeforePos++, delete getMaskSet().validPositions[i];\n                    }\n\n                    for (verifyValidInput && validInputs[0] === test.match.def && validInputs.shift(), resetMaskSet(!0), isValidRslt = !0; validInputs.length > 0;) {\n                      var input = validInputs.shift();\n                      if (input !== opts.skipOptionalPartCharacter && !(isValidRslt = isValid(getLastValidPosition(undefined, !0) + 1, input, !1, fromSetValid, !0))) break;\n                    }\n\n                    if (isValidRslt) {\n                      getMaskSet().validPositions[decisionPos].locator = possibilities;\n                      var targetLvp = getLastValidPosition(pos) + 1;\n\n                      for (i = decisionPos + 1; i < getLastValidPosition() + 1; i++) {\n                        ((validPos = getMaskSet().validPositions[i]) === undefined || null == validPos.match.fn) && i < pos + (staticInputsBeforePosAlternate - staticInputsBeforePos) && staticInputsBeforePosAlternate++;\n                      }\n\n                      isValidRslt = isValid((pos += staticInputsBeforePosAlternate - staticInputsBeforePos) > targetLvp ? targetLvp : pos, c, strict, fromSetValid, !0);\n                    }\n\n                    if (isValidRslt) return !1;\n                    resetMaskSet(), getMaskSet().validPositions = $.extend(!0, {}, validPsClone);\n                  }\n                }\n              });\n            }\n\n            return isValidRslt;\n          }(maskPos, c, strict)), !0 === result && (result = {\n            pos: maskPos\n          });\n        }\n\n        if ($.isFunction(opts.postValidation) && !1 !== result && !strict && !0 !== fromSetValid && !0 !== validateOnly) {\n          var postResult = opts.postValidation(getBuffer(!0), result, opts);\n\n          if (postResult.refreshFromBuffer && postResult.buffer) {\n            var refresh = postResult.refreshFromBuffer;\n            refreshFromBuffer(!0 === refresh ? refresh : refresh.start, refresh.end, postResult.buffer);\n          }\n\n          result = !0 === postResult ? result : postResult;\n        }\n\n        return result && result.pos === undefined && (result.pos = maskPos), !1 !== result && !0 !== validateOnly || (resetMaskSet(!0), getMaskSet().validPositions = $.extend(!0, {}, positionsClone)), result;\n      }\n\n      function isMask(pos, strict) {\n        var test = getTestTemplate(pos).match;\n        if (\"\" === test.def && (test = getTest(pos).match), null != test.fn) return test.fn;\n\n        if (!0 !== strict && pos > -1) {\n          var tests = getTests(pos);\n          return tests.length > 1 + (\"\" === tests[tests.length - 1].match.def ? 1 : 0);\n        }\n\n        return !1;\n      }\n\n      function seekNext(pos, newBlock) {\n        var maskL = getMaskSet().maskLength;\n        if (pos >= maskL) return maskL;\n        var position = pos;\n\n        for (getTests(maskL + 1).length > 1 && (getMaskTemplate(!0, maskL + 1, !0), maskL = getMaskSet().maskLength); ++position < maskL && (!0 === newBlock && (!0 !== getTest(position).match.newBlockMarker || !isMask(position)) || !0 !== newBlock && !isMask(position));) {\n          ;\n        }\n\n        return position;\n      }\n\n      function seekPrevious(pos, newBlock) {\n        var tests,\n            position = pos;\n        if (position <= 0) return 0;\n\n        for (; --position > 0 && (!0 === newBlock && !0 !== getTest(position).match.newBlockMarker || !0 !== newBlock && !isMask(position) && ((tests = getTests(position)).length < 2 || 2 === tests.length && \"\" === tests[1].match.def));) {\n          ;\n        }\n\n        return position;\n      }\n\n      function getBufferElement(position) {\n        return getMaskSet().validPositions[position] === undefined ? getPlaceholder(position) : getMaskSet().validPositions[position].input;\n      }\n\n      function writeBuffer(input, buffer, caretPos, event, triggerInputEvent) {\n        if (event && $.isFunction(opts.onBeforeWrite)) {\n          var result = opts.onBeforeWrite.call(inputmask, event, buffer, caretPos, opts);\n\n          if (result) {\n            if (result.refreshFromBuffer) {\n              var refresh = result.refreshFromBuffer;\n              refreshFromBuffer(!0 === refresh ? refresh : refresh.start, refresh.end, result.buffer || buffer), buffer = getBuffer(!0);\n            }\n\n            caretPos !== undefined && (caretPos = result.caret !== undefined ? result.caret : caretPos);\n          }\n        }\n\n        input !== undefined && (input.inputmask._valueSet(buffer.join(\"\")), caretPos === undefined || event !== undefined && \"blur\" === event.type ? renderColorMask(input, caretPos, 0 === buffer.length) : android && event && \"input\" === event.type ? setTimeout(function () {\n          caret(input, caretPos);\n        }, 0) : caret(input, caretPos), !0 === triggerInputEvent && (skipInputEvent = !0, $(input).trigger(\"input\")));\n      }\n\n      function getPlaceholder(pos, test, returnPL) {\n        if ((test = test || getTest(pos).match).placeholder !== undefined || !0 === returnPL) return $.isFunction(test.placeholder) ? test.placeholder(opts) : test.placeholder;\n\n        if (null === test.fn) {\n          if (pos > -1 && getMaskSet().validPositions[pos] === undefined) {\n            var prevTest,\n                tests = getTests(pos),\n                staticAlternations = [];\n            if (tests.length > 1 + (\"\" === tests[tests.length - 1].match.def ? 1 : 0)) for (var i = 0; i < tests.length; i++) {\n              if (!0 !== tests[i].match.optionality && !0 !== tests[i].match.optionalQuantifier && (null === tests[i].match.fn || prevTest === undefined || !1 !== tests[i].match.fn.test(prevTest.match.def, getMaskSet(), pos, !0, opts)) && (staticAlternations.push(tests[i]), null === tests[i].match.fn && (prevTest = tests[i]), staticAlternations.length > 1 && /[0-9a-bA-Z]/.test(staticAlternations[0].match.def))) return opts.placeholder.charAt(pos % opts.placeholder.length);\n            }\n          }\n\n          return test.def;\n        }\n\n        return opts.placeholder.charAt(pos % opts.placeholder.length);\n      }\n\n      function checkVal(input, writeOut, strict, nptvl, initiatingEvent) {\n        function isTemplateMatch(ndx, charCodes) {\n          return -1 !== getBufferTemplate().slice(ndx, seekNext(ndx)).join(\"\").indexOf(charCodes) && !isMask(ndx) && getTest(ndx).match.nativeDef === charCodes.charAt(charCodes.length - 1);\n        }\n\n        var inputValue = nptvl.slice(),\n            charCodes = \"\",\n            initialNdx = -1,\n            result = undefined;\n        if (resetMaskSet(), strict || !0 === opts.autoUnmask) initialNdx = seekNext(initialNdx);else {\n          var staticInput = getBufferTemplate().slice(0, seekNext(-1)).join(\"\"),\n              matches = inputValue.join(\"\").match(new RegExp(\"^\" + Inputmask.escapeRegex(staticInput), \"g\"));\n          matches && matches.length > 0 && (inputValue.splice(0, matches.length * staticInput.length), initialNdx = seekNext(initialNdx));\n        }\n\n        if (-1 === initialNdx ? (getMaskSet().p = seekNext(initialNdx), initialNdx = 0) : getMaskSet().p = initialNdx, $.each(inputValue, function (ndx, charCode) {\n          if (charCode !== undefined) if (getMaskSet().validPositions[ndx] === undefined && inputValue[ndx] === getPlaceholder(ndx) && isMask(ndx, !0) && !1 === isValid(ndx, inputValue[ndx], !0, undefined, undefined, !0)) getMaskSet().p++;else {\n            var keypress = new $.Event(\"_checkval\");\n            keypress.which = charCode.charCodeAt(0), charCodes += charCode;\n            var lvp = getLastValidPosition(undefined, !0),\n                lvTest = getMaskSet().validPositions[lvp],\n                nextTest = getTestTemplate(lvp + 1, lvTest ? lvTest.locator.slice() : undefined, lvp);\n\n            if (!isTemplateMatch(initialNdx, charCodes) || strict || opts.autoUnmask) {\n              var pos = strict ? ndx : null == nextTest.match.fn && nextTest.match.optionality && lvp + 1 < getMaskSet().p ? lvp + 1 : getMaskSet().p;\n              result = EventHandlers.keypressEvent.call(input, keypress, !0, !1, strict, pos), initialNdx = pos + 1, charCodes = \"\";\n            } else result = EventHandlers.keypressEvent.call(input, keypress, !0, !1, !0, lvp + 1);\n\n            if (!1 !== result && !strict && $.isFunction(opts.onBeforeWrite)) {\n              var origResult = result;\n\n              if (result = opts.onBeforeWrite.call(inputmask, keypress, getBuffer(), result.forwardPosition, opts), (result = $.extend(origResult, result)) && result.refreshFromBuffer) {\n                var refresh = result.refreshFromBuffer;\n                refreshFromBuffer(!0 === refresh ? refresh : refresh.start, refresh.end, result.buffer), resetMaskSet(!0), result.caret && (getMaskSet().p = result.caret, result.forwardPosition = result.caret);\n              }\n            }\n          }\n        }), writeOut) {\n          var caretPos = undefined;\n          document.activeElement === input && result && (caretPos = opts.numericInput ? seekPrevious(result.forwardPosition) : result.forwardPosition), writeBuffer(input, getBuffer(), caretPos, initiatingEvent || new $.Event(\"checkval\"), initiatingEvent && \"input\" === initiatingEvent.type);\n        }\n      }\n\n      function unmaskedvalue(input) {\n        if (input) {\n          if (input.inputmask === undefined) return input.value;\n          input.inputmask && input.inputmask.refreshValue && EventHandlers.setValueEvent.call(input);\n        }\n\n        var umValue = [],\n            vps = getMaskSet().validPositions;\n\n        for (var pndx in vps) {\n          vps[pndx].match && null != vps[pndx].match.fn && umValue.push(vps[pndx].input);\n        }\n\n        var unmaskedValue = 0 === umValue.length ? \"\" : (isRTL ? umValue.reverse() : umValue).join(\"\");\n\n        if ($.isFunction(opts.onUnMask)) {\n          var bufferValue = (isRTL ? getBuffer().slice().reverse() : getBuffer()).join(\"\");\n          unmaskedValue = opts.onUnMask.call(inputmask, bufferValue, unmaskedValue, opts);\n        }\n\n        return unmaskedValue;\n      }\n\n      function caret(input, begin, end, notranslate) {\n        function translatePosition(pos) {\n          return !0 === notranslate || !isRTL || \"number\" != typeof pos || opts.greedy && \"\" === opts.placeholder || (pos = getBuffer().join(\"\").length - pos), pos;\n        }\n\n        var range;\n        if (begin === undefined) return input.setSelectionRange ? (begin = input.selectionStart, end = input.selectionEnd) : window.getSelection ? (range = window.getSelection().getRangeAt(0)).commonAncestorContainer.parentNode !== input && range.commonAncestorContainer !== input || (begin = range.startOffset, end = range.endOffset) : document.selection && document.selection.createRange && (end = (begin = 0 - (range = document.selection.createRange()).duplicate().moveStart(\"character\", -input.inputmask._valueGet().length)) + range.text.length), {\n          begin: translatePosition(begin),\n          end: translatePosition(end)\n        };\n\n        if (begin.begin !== undefined && (end = begin.end, begin = begin.begin), \"number\" == typeof begin) {\n          begin = translatePosition(begin), end = \"number\" == typeof (end = translatePosition(end)) ? end : begin;\n          var scrollCalc = parseInt(((input.ownerDocument.defaultView || window).getComputedStyle ? (input.ownerDocument.defaultView || window).getComputedStyle(input, null) : input.currentStyle).fontSize) * end;\n          if (input.scrollLeft = scrollCalc > input.scrollWidth ? scrollCalc : 0, mobile || !1 !== opts.insertMode || begin !== end || end++, input.setSelectionRange) input.selectionStart = begin, input.selectionEnd = end;else if (window.getSelection) {\n            if (range = document.createRange(), input.firstChild === undefined || null === input.firstChild) {\n              var textNode = document.createTextNode(\"\");\n              input.appendChild(textNode);\n            }\n\n            range.setStart(input.firstChild, begin < input.inputmask._valueGet().length ? begin : input.inputmask._valueGet().length), range.setEnd(input.firstChild, end < input.inputmask._valueGet().length ? end : input.inputmask._valueGet().length), range.collapse(!0);\n            var sel = window.getSelection();\n            sel.removeAllRanges(), sel.addRange(range);\n          } else input.createTextRange && ((range = input.createTextRange()).collapse(!0), range.moveEnd(\"character\", end), range.moveStart(\"character\", begin), range.select());\n          renderColorMask(input, {\n            begin: begin,\n            end: end\n          });\n        }\n      }\n\n      function determineLastRequiredPosition(returnDefinition) {\n        var pos,\n            testPos,\n            buffer = getBuffer(),\n            bl = buffer.length,\n            lvp = getLastValidPosition(),\n            positions = {},\n            lvTest = getMaskSet().validPositions[lvp],\n            ndxIntlzr = lvTest !== undefined ? lvTest.locator.slice() : undefined;\n\n        for (pos = lvp + 1; pos < buffer.length; pos++) {\n          ndxIntlzr = (testPos = getTestTemplate(pos, ndxIntlzr, pos - 1)).locator.slice(), positions[pos] = $.extend(!0, {}, testPos);\n        }\n\n        var lvTestAlt = lvTest && lvTest.alternation !== undefined ? lvTest.locator[lvTest.alternation] : undefined;\n\n        for (pos = bl - 1; pos > lvp && ((testPos = positions[pos]).match.optionality || testPos.match.optionalQuantifier && testPos.match.newBlockMarker || lvTestAlt && (lvTestAlt !== positions[pos].locator[lvTest.alternation] && null != testPos.match.fn || null === testPos.match.fn && testPos.locator[lvTest.alternation] && checkAlternationMatch(testPos.locator[lvTest.alternation].toString().split(\",\"), lvTestAlt.toString().split(\",\")) && \"\" !== getTests(pos)[0].def)) && buffer[pos] === getPlaceholder(pos, testPos.match); pos--) {\n          bl--;\n        }\n\n        return returnDefinition ? {\n          l: bl,\n          def: positions[bl] ? positions[bl].match : undefined\n        } : bl;\n      }\n\n      function clearOptionalTail(buffer) {\n        for (var validPos, rl = determineLastRequiredPosition(), bl = buffer.length, lv = getMaskSet().validPositions[getLastValidPosition()]; rl < bl && !isMask(rl, !0) && (validPos = lv !== undefined ? getTestTemplate(rl, lv.locator.slice(\"\"), lv) : getTest(rl)) && !0 !== validPos.match.optionality && (!0 !== validPos.match.optionalQuantifier && !0 !== validPos.match.newBlockMarker || rl + 1 === bl && \"\" === (lv !== undefined ? getTestTemplate(rl + 1, lv.locator.slice(\"\"), lv) : getTest(rl + 1)).match.def);) {\n          rl++;\n        }\n\n        for (; (validPos = getMaskSet().validPositions[rl - 1]) && validPos && validPos.match.optionality && validPos.input === opts.skipOptionalPartCharacter;) {\n          rl--;\n        }\n\n        return buffer.splice(rl), buffer;\n      }\n\n      function isComplete(buffer) {\n        if ($.isFunction(opts.isComplete)) return opts.isComplete(buffer, opts);\n        if (\"*\" === opts.repeat) return undefined;\n        var complete = !1,\n            lrp = determineLastRequiredPosition(!0),\n            aml = seekPrevious(lrp.l);\n\n        if (lrp.def === undefined || lrp.def.newBlockMarker || lrp.def.optionality || lrp.def.optionalQuantifier) {\n          complete = !0;\n\n          for (var i = 0; i <= aml; i++) {\n            var test = getTestTemplate(i).match;\n\n            if (null !== test.fn && getMaskSet().validPositions[i] === undefined && !0 !== test.optionality && !0 !== test.optionalQuantifier || null === test.fn && buffer[i] !== getPlaceholder(i, test)) {\n              complete = !1;\n              break;\n            }\n          }\n        }\n\n        return complete;\n      }\n\n      function handleRemove(input, k, pos, strict, fromIsValid) {\n        if ((opts.numericInput || isRTL) && (k === Inputmask.keyCode.BACKSPACE ? k = Inputmask.keyCode.DELETE : k === Inputmask.keyCode.DELETE && (k = Inputmask.keyCode.BACKSPACE), isRTL)) {\n          var pend = pos.end;\n          pos.end = pos.begin, pos.begin = pend;\n        }\n\n        k === Inputmask.keyCode.BACKSPACE && (pos.end - pos.begin < 1 || !1 === opts.insertMode) ? (pos.begin = seekPrevious(pos.begin), getMaskSet().validPositions[pos.begin] !== undefined && getMaskSet().validPositions[pos.begin].input === opts.groupSeparator && pos.begin--) : k === Inputmask.keyCode.DELETE && pos.begin === pos.end && (pos.end = isMask(pos.end, !0) && getMaskSet().validPositions[pos.end] && getMaskSet().validPositions[pos.end].input !== opts.radixPoint ? pos.end + 1 : seekNext(pos.end) + 1, getMaskSet().validPositions[pos.begin] !== undefined && getMaskSet().validPositions[pos.begin].input === opts.groupSeparator && pos.end++), stripValidPositions(pos.begin, pos.end, !1, strict), !0 !== strict && function () {\n          if (opts.keepStatic) {\n            for (var validInputs = [], lastAlt = getLastValidPosition(-1, !0), positionsClone = $.extend(!0, {}, getMaskSet().validPositions), prevAltPos = getMaskSet().validPositions[lastAlt]; lastAlt >= 0; lastAlt--) {\n              var altPos = getMaskSet().validPositions[lastAlt];\n\n              if (altPos) {\n                if (!0 !== altPos.generatedInput && /[0-9a-bA-Z]/.test(altPos.input) && validInputs.push(altPos.input), delete getMaskSet().validPositions[lastAlt], altPos.alternation !== undefined && altPos.locator[altPos.alternation] !== prevAltPos.locator[altPos.alternation]) break;\n                prevAltPos = altPos;\n              }\n            }\n\n            if (lastAlt > -1) for (getMaskSet().p = seekNext(getLastValidPosition(-1, !0)); validInputs.length > 0;) {\n              var keypress = new $.Event(\"keypress\");\n              keypress.which = validInputs.pop().charCodeAt(0), EventHandlers.keypressEvent.call(input, keypress, !0, !1, !1, getMaskSet().p);\n            } else getMaskSet().validPositions = $.extend(!0, {}, positionsClone);\n          }\n        }();\n        var lvp = getLastValidPosition(pos.begin, !0);\n        if (lvp < pos.begin) getMaskSet().p = seekNext(lvp);else if (!0 !== strict && (getMaskSet().p = pos.begin, !0 !== fromIsValid)) for (; getMaskSet().p < lvp && getMaskSet().validPositions[getMaskSet().p] === undefined;) {\n          getMaskSet().p++;\n        }\n      }\n\n      function initializeColorMask(input) {\n        function findCaretPos(clientx) {\n          var caretPos,\n              e = document.createElement(\"span\");\n\n          for (var style in computedStyle) {\n            isNaN(style) && -1 !== style.indexOf(\"font\") && (e.style[style] = computedStyle[style]);\n          }\n\n          e.style.textTransform = computedStyle.textTransform, e.style.letterSpacing = computedStyle.letterSpacing, e.style.position = \"absolute\", e.style.height = \"auto\", e.style.width = \"auto\", e.style.visibility = \"hidden\", e.style.whiteSpace = \"nowrap\", document.body.appendChild(e);\n\n          var itl,\n              inputText = input.inputmask._valueGet(),\n              previousWidth = 0;\n\n          for (caretPos = 0, itl = inputText.length; caretPos <= itl; caretPos++) {\n            if (e.innerHTML += inputText.charAt(caretPos) || \"_\", e.offsetWidth >= clientx) {\n              var offset1 = clientx - previousWidth,\n                  offset2 = e.offsetWidth - clientx;\n              e.innerHTML = inputText.charAt(caretPos), caretPos = (offset1 -= e.offsetWidth / 3) < offset2 ? caretPos - 1 : caretPos;\n              break;\n            }\n\n            previousWidth = e.offsetWidth;\n          }\n\n          return document.body.removeChild(e), caretPos;\n        }\n\n        var computedStyle = (input.ownerDocument.defaultView || window).getComputedStyle(input, null),\n            template = document.createElement(\"div\");\n        template.style.width = computedStyle.width, template.style.textAlign = computedStyle.textAlign, (colorMask = document.createElement(\"div\")).className = \"im-colormask\", input.parentNode.insertBefore(colorMask, input), input.parentNode.removeChild(input), colorMask.appendChild(template), colorMask.appendChild(input), input.style.left = template.offsetLeft + \"px\", $(input).on(\"click\", function (e) {\n          return caret(input, findCaretPos(e.clientX)), EventHandlers.clickEvent.call(input, [e]);\n        }), $(input).on(\"keydown\", function (e) {\n          e.shiftKey || !1 === opts.insertMode || setTimeout(function () {\n            renderColorMask(input);\n          }, 0);\n        });\n      }\n\n      function renderColorMask(input, caretPos, clear) {\n        function handleStatic() {\n          isStatic || null !== test.fn && testPos.input !== undefined ? isStatic && (null !== test.fn && testPos.input !== undefined || \"\" === test.def) && (isStatic = !1, maskTemplate += \"</span>\") : (isStatic = !0, maskTemplate += \"<span class='im-static'>\");\n        }\n\n        function handleCaret(force) {\n          !0 !== force && pos !== caretPos.begin || document.activeElement !== input || (maskTemplate += \"<span class='im-caret' style='border-right-width: 1px;border-right-style: solid;'></span>\");\n        }\n\n        var test,\n            testPos,\n            ndxIntlzr,\n            maskTemplate = \"\",\n            isStatic = !1,\n            pos = 0;\n\n        if (colorMask !== undefined) {\n          var buffer = getBuffer();\n\n          if (caretPos === undefined ? caretPos = caret(input) : caretPos.begin === undefined && (caretPos = {\n            begin: caretPos,\n            end: caretPos\n          }), !0 !== clear) {\n            var lvp = getLastValidPosition();\n\n            do {\n              handleCaret(), getMaskSet().validPositions[pos] ? (testPos = getMaskSet().validPositions[pos], test = testPos.match, ndxIntlzr = testPos.locator.slice(), handleStatic(), maskTemplate += buffer[pos]) : (testPos = getTestTemplate(pos, ndxIntlzr, pos - 1), test = testPos.match, ndxIntlzr = testPos.locator.slice(), (!1 === opts.jitMasking || pos < lvp || \"number\" == typeof opts.jitMasking && isFinite(opts.jitMasking) && opts.jitMasking > pos) && (handleStatic(), maskTemplate += getPlaceholder(pos, test))), pos++;\n            } while ((maxLength === undefined || pos < maxLength) && (null !== test.fn || \"\" !== test.def) || lvp > pos || isStatic);\n\n            -1 === maskTemplate.indexOf(\"im-caret\") && handleCaret(!0), isStatic && handleStatic();\n          }\n\n          var template = colorMask.getElementsByTagName(\"div\")[0];\n          template.innerHTML = maskTemplate, input.inputmask.positionColorMask(input, template);\n        }\n      }\n\n      maskset = maskset || this.maskset, opts = opts || this.opts;\n      var undoValue,\n          $el,\n          maxLength,\n          colorMask,\n          inputmask = this,\n          el = this.el,\n          isRTL = this.isRTL,\n          skipKeyPressEvent = !1,\n          skipInputEvent = !1,\n          ignorable = !1,\n          mouseEnter = !1,\n          EventRuler = {\n        on: function on(input, eventName, eventHandler) {\n          var ev = function ev(e) {\n            if (this.inputmask === undefined && \"FORM\" !== this.nodeName) {\n              var imOpts = $.data(this, \"_inputmask_opts\");\n              imOpts ? new Inputmask(imOpts).mask(this) : EventRuler.off(this);\n            } else {\n              if (\"setvalue\" === e.type || \"FORM\" === this.nodeName || !(this.disabled || this.readOnly && !(\"keydown\" === e.type && e.ctrlKey && 67 === e.keyCode || !1 === opts.tabThrough && e.keyCode === Inputmask.keyCode.TAB))) {\n                switch (e.type) {\n                  case \"input\":\n                    if (!0 === skipInputEvent) return skipInputEvent = !1, e.preventDefault();\n                    break;\n\n                  case \"keydown\":\n                    skipKeyPressEvent = !1, skipInputEvent = !1;\n                    break;\n\n                  case \"keypress\":\n                    if (!0 === skipKeyPressEvent) return e.preventDefault();\n                    skipKeyPressEvent = !0;\n                    break;\n\n                  case \"click\":\n                    if (iemobile || iphone) {\n                      var that = this,\n                          args = arguments;\n                      return setTimeout(function () {\n                        eventHandler.apply(that, args);\n                      }, 0), !1;\n                    }\n\n                }\n\n                var returnVal = eventHandler.apply(this, arguments);\n                return !1 === returnVal && (e.preventDefault(), e.stopPropagation()), returnVal;\n              }\n\n              e.preventDefault();\n            }\n          };\n\n          input.inputmask.events[eventName] = input.inputmask.events[eventName] || [], input.inputmask.events[eventName].push(ev), -1 !== $.inArray(eventName, [\"submit\", \"reset\"]) ? null !== input.form && $(input.form).on(eventName, ev) : $(input).on(eventName, ev);\n        },\n        off: function off(input, event) {\n          if (input.inputmask && input.inputmask.events) {\n            var events;\n            event ? (events = [])[event] = input.inputmask.events[event] : events = input.inputmask.events, $.each(events, function (eventName, evArr) {\n              for (; evArr.length > 0;) {\n                var ev = evArr.pop();\n                -1 !== $.inArray(eventName, [\"submit\", \"reset\"]) ? null !== input.form && $(input.form).off(eventName, ev) : $(input).off(eventName, ev);\n              }\n\n              delete input.inputmask.events[eventName];\n            });\n          }\n        }\n      },\n          EventHandlers = {\n        keydownEvent: function keydownEvent(e) {\n          var input = this,\n              $input = $(input),\n              k = e.keyCode,\n              pos = caret(input);\n          if (k === Inputmask.keyCode.BACKSPACE || k === Inputmask.keyCode.DELETE || iphone && k === Inputmask.keyCode.BACKSPACE_SAFARI || e.ctrlKey && k === Inputmask.keyCode.X && !function (eventName) {\n            var el = document.createElement(\"input\"),\n                evName = \"on\" + eventName,\n                isSupported = (evName in el);\n            return isSupported || (el.setAttribute(evName, \"return;\"), isSupported = \"function\" == typeof el[evName]), el = null, isSupported;\n          }(\"cut\")) e.preventDefault(), handleRemove(input, k, pos), writeBuffer(input, getBuffer(!0), getMaskSet().p, e, input.inputmask._valueGet() !== getBuffer().join(\"\")), input.inputmask._valueGet() === getBufferTemplate().join(\"\") ? $input.trigger(\"cleared\") : !0 === isComplete(getBuffer()) && $input.trigger(\"complete\");else if (k === Inputmask.keyCode.END || k === Inputmask.keyCode.PAGE_DOWN) {\n            e.preventDefault();\n            var caretPos = seekNext(getLastValidPosition());\n            opts.insertMode || caretPos !== getMaskSet().maskLength || e.shiftKey || caretPos--, caret(input, e.shiftKey ? pos.begin : caretPos, caretPos, !0);\n          } else k === Inputmask.keyCode.HOME && !e.shiftKey || k === Inputmask.keyCode.PAGE_UP ? (e.preventDefault(), caret(input, 0, e.shiftKey ? pos.begin : 0, !0)) : (opts.undoOnEscape && k === Inputmask.keyCode.ESCAPE || 90 === k && e.ctrlKey) && !0 !== e.altKey ? (checkVal(input, !0, !1, undoValue.split(\"\")), $input.trigger(\"click\")) : k !== Inputmask.keyCode.INSERT || e.shiftKey || e.ctrlKey ? !0 === opts.tabThrough && k === Inputmask.keyCode.TAB ? (!0 === e.shiftKey ? (null === getTest(pos.begin).match.fn && (pos.begin = seekNext(pos.begin)), pos.end = seekPrevious(pos.begin, !0), pos.begin = seekPrevious(pos.end, !0)) : (pos.begin = seekNext(pos.begin, !0), pos.end = seekNext(pos.begin, !0), pos.end < getMaskSet().maskLength && pos.end--), pos.begin < getMaskSet().maskLength && (e.preventDefault(), caret(input, pos.begin, pos.end))) : e.shiftKey || !1 === opts.insertMode && (k === Inputmask.keyCode.RIGHT ? setTimeout(function () {\n            var caretPos = caret(input);\n            caret(input, caretPos.begin);\n          }, 0) : k === Inputmask.keyCode.LEFT && setTimeout(function () {\n            var caretPos = caret(input);\n            caret(input, isRTL ? caretPos.begin + 1 : caretPos.begin - 1);\n          }, 0)) : (opts.insertMode = !opts.insertMode, caret(input, opts.insertMode || pos.begin !== getMaskSet().maskLength ? pos.begin : pos.begin - 1));\n          opts.onKeyDown.call(this, e, getBuffer(), caret(input).begin, opts), ignorable = -1 !== $.inArray(k, opts.ignorables);\n        },\n        keypressEvent: function keypressEvent(e, checkval, writeOut, strict, ndx) {\n          var input = this,\n              $input = $(input),\n              k = e.which || e.charCode || e.keyCode;\n          if (!(!0 === checkval || e.ctrlKey && e.altKey) && (e.ctrlKey || e.metaKey || ignorable)) return k === Inputmask.keyCode.ENTER && undoValue !== getBuffer().join(\"\") && (undoValue = getBuffer().join(\"\"), setTimeout(function () {\n            $input.trigger(\"change\");\n          }, 0)), !0;\n\n          if (k) {\n            46 === k && !1 === e.shiftKey && \"\" !== opts.radixPoint && (k = opts.radixPoint.charCodeAt(0));\n            var forwardPosition,\n                pos = checkval ? {\n              begin: ndx,\n              end: ndx\n            } : caret(input),\n                c = String.fromCharCode(k);\n            getMaskSet().writeOutBuffer = !0;\n            var valResult = isValid(pos, c, strict);\n\n            if (!1 !== valResult && (resetMaskSet(!0), forwardPosition = valResult.caret !== undefined ? valResult.caret : checkval ? valResult.pos + 1 : seekNext(valResult.pos), getMaskSet().p = forwardPosition), !1 !== writeOut && (setTimeout(function () {\n              opts.onKeyValidation.call(input, k, valResult, opts);\n            }, 0), getMaskSet().writeOutBuffer && !1 !== valResult)) {\n              var buffer = getBuffer();\n              writeBuffer(input, buffer, opts.numericInput && valResult.caret === undefined ? seekPrevious(forwardPosition) : forwardPosition, e, !0 !== checkval), !0 !== checkval && setTimeout(function () {\n                !0 === isComplete(buffer) && $input.trigger(\"complete\");\n              }, 0);\n            }\n\n            if (e.preventDefault(), checkval) return !1 !== valResult && (valResult.forwardPosition = forwardPosition), valResult;\n          }\n        },\n        pasteEvent: function pasteEvent(e) {\n          var tempValue,\n              input = this,\n              ev = e.originalEvent || e,\n              $input = $(input),\n              inputValue = input.inputmask._valueGet(!0),\n              caretPos = caret(input);\n\n          isRTL && (tempValue = caretPos.end, caretPos.end = caretPos.begin, caretPos.begin = tempValue);\n          var valueBeforeCaret = inputValue.substr(0, caretPos.begin),\n              valueAfterCaret = inputValue.substr(caretPos.end, inputValue.length);\n          if (valueBeforeCaret === (isRTL ? getBufferTemplate().reverse() : getBufferTemplate()).slice(0, caretPos.begin).join(\"\") && (valueBeforeCaret = \"\"), valueAfterCaret === (isRTL ? getBufferTemplate().reverse() : getBufferTemplate()).slice(caretPos.end).join(\"\") && (valueAfterCaret = \"\"), isRTL && (tempValue = valueBeforeCaret, valueBeforeCaret = valueAfterCaret, valueAfterCaret = tempValue), window.clipboardData && window.clipboardData.getData) inputValue = valueBeforeCaret + window.clipboardData.getData(\"Text\") + valueAfterCaret;else {\n            if (!ev.clipboardData || !ev.clipboardData.getData) return !0;\n            inputValue = valueBeforeCaret + ev.clipboardData.getData(\"text/plain\") + valueAfterCaret;\n          }\n          var pasteValue = inputValue;\n\n          if ($.isFunction(opts.onBeforePaste)) {\n            if (!1 === (pasteValue = opts.onBeforePaste.call(inputmask, inputValue, opts))) return e.preventDefault();\n            pasteValue || (pasteValue = inputValue);\n          }\n\n          return checkVal(input, !1, !1, isRTL ? pasteValue.split(\"\").reverse() : pasteValue.toString().split(\"\")), writeBuffer(input, getBuffer(), seekNext(getLastValidPosition()), e, undoValue !== getBuffer().join(\"\")), !0 === isComplete(getBuffer()) && $input.trigger(\"complete\"), e.preventDefault();\n        },\n        inputFallBackEvent: function inputFallBackEvent(e) {\n          var input = this,\n              inputValue = input.inputmask._valueGet();\n\n          if (getBuffer().join(\"\") !== inputValue) {\n            var caretPos = caret(input);\n            if (!1 === function (input, inputValue, caretPos) {\n              if (\".\" === inputValue.charAt(caretPos.begin - 1) && \"\" !== opts.radixPoint && ((inputValue = inputValue.split(\"\"))[caretPos.begin - 1] = opts.radixPoint.charAt(0), inputValue = inputValue.join(\"\")), inputValue.charAt(caretPos.begin - 1) === opts.radixPoint && inputValue.length > getBuffer().length) {\n                var keypress = new $.Event(\"keypress\");\n                return keypress.which = opts.radixPoint.charCodeAt(0), EventHandlers.keypressEvent.call(input, keypress, !0, !0, !1, caretPos.begin - 1), !1;\n              }\n            }(input, inputValue, caretPos)) return !1;\n            if (inputValue = inputValue.replace(new RegExp(\"(\" + Inputmask.escapeRegex(getBufferTemplate().join(\"\")) + \")*\"), \"\"), !1 === function (input, inputValue, caretPos) {\n              if (iemobile) {\n                var inputChar = inputValue.replace(getBuffer().join(\"\"), \"\");\n\n                if (1 === inputChar.length) {\n                  var keypress = new $.Event(\"keypress\");\n                  return keypress.which = inputChar.charCodeAt(0), EventHandlers.keypressEvent.call(input, keypress, !0, !0, !1, getMaskSet().validPositions[caretPos.begin - 1] ? caretPos.begin : caretPos.begin - 1), !1;\n                }\n              }\n            }(input, inputValue, caretPos)) return !1;\n            caretPos.begin > inputValue.length && (caret(input, inputValue.length), caretPos = caret(input));\n            var buffer = getBuffer().join(\"\"),\n                frontPart = inputValue.substr(0, caretPos.begin),\n                backPart = inputValue.substr(caretPos.begin),\n                frontBufferPart = buffer.substr(0, caretPos.begin),\n                backBufferPart = buffer.substr(caretPos.begin),\n                selection = caretPos,\n                entries = \"\",\n                isEntry = !1;\n\n            if (frontPart !== frontBufferPart) {\n              selection.begin = 0;\n\n              for (var fpl = (isEntry = frontPart.length >= frontBufferPart.length) ? frontPart.length : frontBufferPart.length, i = 0; frontPart.charAt(i) === frontBufferPart.charAt(i) && i < fpl; i++) {\n                selection.begin++;\n              }\n\n              isEntry && (entries += frontPart.slice(selection.begin, selection.end));\n            }\n\n            backPart !== backBufferPart && (backPart.length > backBufferPart.length ? isEntry && (selection.end = selection.begin) : backPart.length < backBufferPart.length ? selection.end += backBufferPart.length - backPart.length : backPart.charAt(0) !== backBufferPart.charAt(0) && selection.end++), writeBuffer(input, getBuffer(), selection), entries.length > 0 ? $.each(entries.split(\"\"), function (ndx, entry) {\n              var keypress = new $.Event(\"keypress\");\n              keypress.which = entry.charCodeAt(0), ignorable = !1, EventHandlers.keypressEvent.call(input, keypress);\n            }) : (selection.begin === selection.end - 1 && caret(input, seekPrevious(selection.begin + 1), selection.end), e.keyCode = Inputmask.keyCode.DELETE, EventHandlers.keydownEvent.call(input, e)), e.preventDefault();\n          }\n        },\n        setValueEvent: function setValueEvent(e) {\n          this.inputmask.refreshValue = !1;\n\n          var input = this,\n              value = input.inputmask._valueGet(!0);\n\n          $.isFunction(opts.onBeforeMask) && (value = opts.onBeforeMask.call(inputmask, value, opts) || value), value = value.split(\"\"), checkVal(input, !0, !1, isRTL ? value.reverse() : value), undoValue = getBuffer().join(\"\"), (opts.clearMaskOnLostFocus || opts.clearIncomplete) && input.inputmask._valueGet() === getBufferTemplate().join(\"\") && input.inputmask._valueSet(\"\");\n        },\n        focusEvent: function focusEvent(e) {\n          var input = this,\n              nptValue = input.inputmask._valueGet();\n\n          opts.showMaskOnFocus && (!opts.showMaskOnHover || opts.showMaskOnHover && \"\" === nptValue) && (input.inputmask._valueGet() !== getBuffer().join(\"\") ? writeBuffer(input, getBuffer(), seekNext(getLastValidPosition())) : !1 === mouseEnter && caret(input, seekNext(getLastValidPosition()))), !0 === opts.positionCaretOnTab && !1 === mouseEnter && \"\" !== nptValue && (writeBuffer(input, getBuffer(), caret(input)), EventHandlers.clickEvent.apply(input, [e, !0])), undoValue = getBuffer().join(\"\");\n        },\n        mouseleaveEvent: function mouseleaveEvent(e) {\n          var input = this;\n\n          if (mouseEnter = !1, opts.clearMaskOnLostFocus && document.activeElement !== input) {\n            var buffer = getBuffer().slice(),\n                nptValue = input.inputmask._valueGet();\n\n            nptValue !== input.getAttribute(\"placeholder\") && \"\" !== nptValue && (-1 === getLastValidPosition() && nptValue === getBufferTemplate().join(\"\") ? buffer = [] : clearOptionalTail(buffer), writeBuffer(input, buffer));\n          }\n        },\n        clickEvent: function clickEvent(e, tabbed) {\n          function doRadixFocus(clickPos) {\n            if (\"\" !== opts.radixPoint) {\n              var vps = getMaskSet().validPositions;\n\n              if (vps[clickPos] === undefined || vps[clickPos].input === getPlaceholder(clickPos)) {\n                if (clickPos < seekNext(-1)) return !0;\n                var radixPos = $.inArray(opts.radixPoint, getBuffer());\n\n                if (-1 !== radixPos) {\n                  for (var vp in vps) {\n                    if (radixPos < vp && vps[vp].input !== getPlaceholder(vp)) return !1;\n                  }\n\n                  return !0;\n                }\n              }\n            }\n\n            return !1;\n          }\n\n          var input = this;\n          setTimeout(function () {\n            if (document.activeElement === input) {\n              var selectedCaret = caret(input);\n              if (tabbed && (isRTL ? selectedCaret.end = selectedCaret.begin : selectedCaret.begin = selectedCaret.end), selectedCaret.begin === selectedCaret.end) switch (opts.positionCaretOnClick) {\n                case \"none\":\n                  break;\n\n                case \"radixFocus\":\n                  if (doRadixFocus(selectedCaret.begin)) {\n                    var radixPos = getBuffer().join(\"\").indexOf(opts.radixPoint);\n                    caret(input, opts.numericInput ? seekNext(radixPos) : radixPos);\n                    break;\n                  }\n\n                default:\n                  var clickPosition = selectedCaret.begin,\n                      lvclickPosition = getLastValidPosition(clickPosition, !0),\n                      lastPosition = seekNext(lvclickPosition);\n                  if (clickPosition < lastPosition) caret(input, isMask(clickPosition, !0) || isMask(clickPosition - 1, !0) ? clickPosition : seekNext(clickPosition));else {\n                    var lvp = getMaskSet().validPositions[lvclickPosition],\n                        tt = getTestTemplate(lastPosition, lvp ? lvp.match.locator : undefined, lvp),\n                        placeholder = getPlaceholder(lastPosition, tt.match);\n\n                    if (\"\" !== placeholder && getBuffer()[lastPosition] !== placeholder && !0 !== tt.match.optionalQuantifier && !0 !== tt.match.newBlockMarker || !isMask(lastPosition, !0) && tt.match.def === placeholder) {\n                      var newPos = seekNext(lastPosition);\n                      (clickPosition >= newPos || clickPosition === lastPosition) && (lastPosition = newPos);\n                    }\n\n                    caret(input, lastPosition);\n                  }\n              }\n            }\n          }, 0);\n        },\n        dblclickEvent: function dblclickEvent(e) {\n          var input = this;\n          setTimeout(function () {\n            caret(input, 0, seekNext(getLastValidPosition()));\n          }, 0);\n        },\n        cutEvent: function cutEvent(e) {\n          var input = this,\n              $input = $(input),\n              pos = caret(input),\n              ev = e.originalEvent || e,\n              clipboardData = window.clipboardData || ev.clipboardData,\n              clipData = isRTL ? getBuffer().slice(pos.end, pos.begin) : getBuffer().slice(pos.begin, pos.end);\n          clipboardData.setData(\"text\", isRTL ? clipData.reverse().join(\"\") : clipData.join(\"\")), document.execCommand && document.execCommand(\"copy\"), handleRemove(input, Inputmask.keyCode.DELETE, pos), writeBuffer(input, getBuffer(), getMaskSet().p, e, undoValue !== getBuffer().join(\"\")), input.inputmask._valueGet() === getBufferTemplate().join(\"\") && $input.trigger(\"cleared\");\n        },\n        blurEvent: function blurEvent(e) {\n          var $input = $(this),\n              input = this;\n\n          if (input.inputmask) {\n            var nptValue = input.inputmask._valueGet(),\n                buffer = getBuffer().slice();\n\n            \"\" !== nptValue && (opts.clearMaskOnLostFocus && (-1 === getLastValidPosition() && nptValue === getBufferTemplate().join(\"\") ? buffer = [] : clearOptionalTail(buffer)), !1 === isComplete(buffer) && (setTimeout(function () {\n              $input.trigger(\"incomplete\");\n            }, 0), opts.clearIncomplete && (resetMaskSet(), buffer = opts.clearMaskOnLostFocus ? [] : getBufferTemplate().slice())), writeBuffer(input, buffer, undefined, e)), undoValue !== getBuffer().join(\"\") && (undoValue = buffer.join(\"\"), $input.trigger(\"change\"));\n          }\n        },\n        mouseenterEvent: function mouseenterEvent(e) {\n          var input = this;\n          mouseEnter = !0, document.activeElement !== input && opts.showMaskOnHover && input.inputmask._valueGet() !== getBuffer().join(\"\") && writeBuffer(input, getBuffer());\n        },\n        submitEvent: function submitEvent(e) {\n          undoValue !== getBuffer().join(\"\") && $el.trigger(\"change\"), opts.clearMaskOnLostFocus && -1 === getLastValidPosition() && el.inputmask._valueGet && el.inputmask._valueGet() === getBufferTemplate().join(\"\") && el.inputmask._valueSet(\"\"), opts.removeMaskOnSubmit && (el.inputmask._valueSet(el.inputmask.unmaskedvalue(), !0), setTimeout(function () {\n            writeBuffer(el, getBuffer());\n          }, 0));\n        },\n        resetEvent: function resetEvent(e) {\n          el.inputmask.refreshValue = !0, setTimeout(function () {\n            $el.trigger(\"setvalue\");\n          }, 0);\n        }\n      };\n\n      Inputmask.prototype.positionColorMask = function (input, template) {\n        input.style.left = template.offsetLeft + \"px\";\n      };\n\n      var valueBuffer;\n      if (actionObj !== undefined) switch (actionObj.action) {\n        case \"isComplete\":\n          return el = actionObj.el, isComplete(getBuffer());\n\n        case \"unmaskedvalue\":\n          return el !== undefined && actionObj.value === undefined || (valueBuffer = actionObj.value, valueBuffer = ($.isFunction(opts.onBeforeMask) ? opts.onBeforeMask.call(inputmask, valueBuffer, opts) || valueBuffer : valueBuffer).split(\"\"), checkVal(undefined, !1, !1, isRTL ? valueBuffer.reverse() : valueBuffer), $.isFunction(opts.onBeforeWrite) && opts.onBeforeWrite.call(inputmask, undefined, getBuffer(), 0, opts)), unmaskedvalue(el);\n\n        case \"mask\":\n          !function (elem) {\n            EventRuler.off(elem);\n\n            var isSupported = function (input, opts) {\n              var elementType = input.getAttribute(\"type\"),\n                  isSupported = \"INPUT\" === input.tagName && -1 !== $.inArray(elementType, opts.supportsInputType) || input.isContentEditable || \"TEXTAREA\" === input.tagName;\n              if (!isSupported) if (\"INPUT\" === input.tagName) {\n                var el = document.createElement(\"input\");\n                el.setAttribute(\"type\", elementType), isSupported = \"text\" === el.type, el = null;\n              } else isSupported = \"partial\";\n              return !1 !== isSupported ? function (npt) {\n                function getter() {\n                  return this.inputmask ? this.inputmask.opts.autoUnmask ? this.inputmask.unmaskedvalue() : -1 !== getLastValidPosition() || !0 !== opts.nullable ? document.activeElement === this && opts.clearMaskOnLostFocus ? (isRTL ? clearOptionalTail(getBuffer().slice()).reverse() : clearOptionalTail(getBuffer().slice())).join(\"\") : valueGet.call(this) : \"\" : valueGet.call(this);\n                }\n\n                function setter(value) {\n                  valueSet.call(this, value), this.inputmask && $(this).trigger(\"setvalue\");\n                }\n\n                var valueGet, valueSet;\n\n                if (!npt.inputmask.__valueGet) {\n                  if (!0 !== opts.noValuePatching) {\n                    if (Object.getOwnPropertyDescriptor) {\n                      \"function\" != typeof Object.getPrototypeOf && (Object.getPrototypeOf = \"object\" === _typeof(\"test\".__proto__) ? function (object) {\n                        return object.__proto__;\n                      } : function (object) {\n                        return object.constructor.prototype;\n                      });\n                      var valueProperty = Object.getPrototypeOf ? Object.getOwnPropertyDescriptor(Object.getPrototypeOf(npt), \"value\") : undefined;\n                      valueProperty && valueProperty.get && valueProperty.set ? (valueGet = valueProperty.get, valueSet = valueProperty.set, Object.defineProperty(npt, \"value\", {\n                        get: getter,\n                        set: setter,\n                        configurable: !0\n                      })) : \"INPUT\" !== npt.tagName && (valueGet = function valueGet() {\n                        return this.textContent;\n                      }, valueSet = function valueSet(value) {\n                        this.textContent = value;\n                      }, Object.defineProperty(npt, \"value\", {\n                        get: getter,\n                        set: setter,\n                        configurable: !0\n                      }));\n                    } else document.__lookupGetter__ && npt.__lookupGetter__(\"value\") && (valueGet = npt.__lookupGetter__(\"value\"), valueSet = npt.__lookupSetter__(\"value\"), npt.__defineGetter__(\"value\", getter), npt.__defineSetter__(\"value\", setter));\n\n                    npt.inputmask.__valueGet = valueGet, npt.inputmask.__valueSet = valueSet;\n                  }\n\n                  npt.inputmask._valueGet = function (overruleRTL) {\n                    return isRTL && !0 !== overruleRTL ? valueGet.call(this.el).split(\"\").reverse().join(\"\") : valueGet.call(this.el);\n                  }, npt.inputmask._valueSet = function (value, overruleRTL) {\n                    valueSet.call(this.el, null === value || value === undefined ? \"\" : !0 !== overruleRTL && isRTL ? value.split(\"\").reverse().join(\"\") : value);\n                  }, valueGet === undefined && (valueGet = function valueGet() {\n                    return this.value;\n                  }, valueSet = function valueSet(value) {\n                    this.value = value;\n                  }, function (type) {\n                    if ($.valHooks && ($.valHooks[type] === undefined || !0 !== $.valHooks[type].inputmaskpatch)) {\n                      var valhookGet = $.valHooks[type] && $.valHooks[type].get ? $.valHooks[type].get : function (elem) {\n                        return elem.value;\n                      },\n                          valhookSet = $.valHooks[type] && $.valHooks[type].set ? $.valHooks[type].set : function (elem, value) {\n                        return elem.value = value, elem;\n                      };\n                      $.valHooks[type] = {\n                        get: function get(elem) {\n                          if (elem.inputmask) {\n                            if (elem.inputmask.opts.autoUnmask) return elem.inputmask.unmaskedvalue();\n                            var result = valhookGet(elem);\n                            return -1 !== getLastValidPosition(undefined, undefined, elem.inputmask.maskset.validPositions) || !0 !== opts.nullable ? result : \"\";\n                          }\n\n                          return valhookGet(elem);\n                        },\n                        set: function set(elem, value) {\n                          var result,\n                              $elem = $(elem);\n                          return result = valhookSet(elem, value), elem.inputmask && $elem.trigger(\"setvalue\"), result;\n                        },\n                        inputmaskpatch: !0\n                      };\n                    }\n                  }(npt.type), function (npt) {\n                    EventRuler.on(npt, \"mouseenter\", function (event) {\n                      var $input = $(this);\n                      this.inputmask._valueGet() !== getBuffer().join(\"\") && $input.trigger(\"setvalue\");\n                    });\n                  }(npt));\n                }\n              }(input) : input.inputmask = undefined, isSupported;\n            }(elem, opts);\n\n            if (!1 !== isSupported && (el = elem, $el = $(el), -1 === (maxLength = el !== undefined ? el.maxLength : undefined) && (maxLength = undefined), !0 === opts.colorMask && initializeColorMask(el), android && (el.hasOwnProperty(\"inputmode\") && (el.inputmode = opts.inputmode, el.setAttribute(\"inputmode\", opts.inputmode)), \"rtfm\" === opts.androidHack && (!0 !== opts.colorMask && initializeColorMask(el), el.type = \"password\")), !0 === isSupported && (EventRuler.on(el, \"submit\", EventHandlers.submitEvent), EventRuler.on(el, \"reset\", EventHandlers.resetEvent), EventRuler.on(el, \"mouseenter\", EventHandlers.mouseenterEvent), EventRuler.on(el, \"blur\", EventHandlers.blurEvent), EventRuler.on(el, \"focus\", EventHandlers.focusEvent), EventRuler.on(el, \"mouseleave\", EventHandlers.mouseleaveEvent), !0 !== opts.colorMask && EventRuler.on(el, \"click\", EventHandlers.clickEvent), EventRuler.on(el, \"dblclick\", EventHandlers.dblclickEvent), EventRuler.on(el, \"paste\", EventHandlers.pasteEvent), EventRuler.on(el, \"dragdrop\", EventHandlers.pasteEvent), EventRuler.on(el, \"drop\", EventHandlers.pasteEvent), EventRuler.on(el, \"cut\", EventHandlers.cutEvent), EventRuler.on(el, \"complete\", opts.oncomplete), EventRuler.on(el, \"incomplete\", opts.onincomplete), EventRuler.on(el, \"cleared\", opts.oncleared), android || !0 === opts.inputEventOnly ? el.removeAttribute(\"maxLength\") : (EventRuler.on(el, \"keydown\", EventHandlers.keydownEvent), EventRuler.on(el, \"keypress\", EventHandlers.keypressEvent)), EventRuler.on(el, \"compositionstart\", $.noop), EventRuler.on(el, \"compositionupdate\", $.noop), EventRuler.on(el, \"compositionend\", $.noop), EventRuler.on(el, \"keyup\", $.noop), EventRuler.on(el, \"input\", EventHandlers.inputFallBackEvent), EventRuler.on(el, \"beforeinput\", $.noop)), EventRuler.on(el, \"setvalue\", EventHandlers.setValueEvent), undoValue = getBufferTemplate().join(\"\"), \"\" !== el.inputmask._valueGet(!0) || !1 === opts.clearMaskOnLostFocus || document.activeElement === el)) {\n              var initialValue = $.isFunction(opts.onBeforeMask) ? opts.onBeforeMask.call(inputmask, el.inputmask._valueGet(!0), opts) || el.inputmask._valueGet(!0) : el.inputmask._valueGet(!0);\n              \"\" !== initialValue && checkVal(el, !0, !1, isRTL ? initialValue.split(\"\").reverse() : initialValue.split(\"\"));\n              var buffer = getBuffer().slice();\n              undoValue = buffer.join(\"\"), !1 === isComplete(buffer) && opts.clearIncomplete && resetMaskSet(), opts.clearMaskOnLostFocus && document.activeElement !== el && (-1 === getLastValidPosition() ? buffer = [] : clearOptionalTail(buffer)), writeBuffer(el, buffer), document.activeElement === el && caret(el, seekNext(getLastValidPosition()));\n            }\n          }(el);\n          break;\n\n        case \"format\":\n          return valueBuffer = ($.isFunction(opts.onBeforeMask) ? opts.onBeforeMask.call(inputmask, actionObj.value, opts) || actionObj.value : actionObj.value).split(\"\"), checkVal(undefined, !0, !1, isRTL ? valueBuffer.reverse() : valueBuffer), actionObj.metadata ? {\n            value: isRTL ? getBuffer().slice().reverse().join(\"\") : getBuffer().join(\"\"),\n            metadata: maskScope.call(this, {\n              action: \"getmetadata\"\n            }, maskset, opts)\n          } : isRTL ? getBuffer().slice().reverse().join(\"\") : getBuffer().join(\"\");\n\n        case \"isValid\":\n          actionObj.value ? (valueBuffer = actionObj.value.split(\"\"), checkVal(undefined, !0, !0, isRTL ? valueBuffer.reverse() : valueBuffer)) : actionObj.value = getBuffer().join(\"\");\n\n          for (var buffer = getBuffer(), rl = determineLastRequiredPosition(), lmib = buffer.length - 1; lmib > rl && !isMask(lmib); lmib--) {\n            ;\n          }\n\n          return buffer.splice(rl, lmib + 1 - rl), isComplete(buffer) && actionObj.value === getBuffer().join(\"\");\n\n        case \"getemptymask\":\n          return getBufferTemplate().join(\"\");\n\n        case \"remove\":\n          if (el && el.inputmask) {\n            $el = $(el), el.inputmask._valueSet(opts.autoUnmask ? unmaskedvalue(el) : el.inputmask._valueGet(!0)), EventRuler.off(el);\n            Object.getOwnPropertyDescriptor && Object.getPrototypeOf ? Object.getOwnPropertyDescriptor(Object.getPrototypeOf(el), \"value\") && el.inputmask.__valueGet && Object.defineProperty(el, \"value\", {\n              get: el.inputmask.__valueGet,\n              set: el.inputmask.__valueSet,\n              configurable: !0\n            }) : document.__lookupGetter__ && el.__lookupGetter__(\"value\") && el.inputmask.__valueGet && (el.__defineGetter__(\"value\", el.inputmask.__valueGet), el.__defineSetter__(\"value\", el.inputmask.__valueSet)), el.inputmask = undefined;\n          }\n\n          return el;\n\n        case \"getmetadata\":\n          if ($.isArray(maskset.metadata)) {\n            var maskTarget = getMaskTemplate(!0, 0, !1).join(\"\");\n            return $.each(maskset.metadata, function (ndx, mtdt) {\n              if (mtdt.mask === maskTarget) return maskTarget = mtdt, !1;\n            }), maskTarget;\n          }\n\n          return maskset.metadata;\n      }\n    }\n\n    var ua = navigator.userAgent,\n        mobile = /mobile/i.test(ua),\n        iemobile = /iemobile/i.test(ua),\n        iphone = /iphone/i.test(ua) && !iemobile,\n        android = /android/i.test(ua) && !iemobile;\n    return Inputmask.prototype = {\n      dataAttribute: \"data-inputmask\",\n      defaults: {\n        placeholder: \"_\",\n        optionalmarker: {\n          start: \"[\",\n          end: \"]\"\n        },\n        quantifiermarker: {\n          start: \"{\",\n          end: \"}\"\n        },\n        groupmarker: {\n          start: \"(\",\n          end: \")\"\n        },\n        alternatormarker: \"|\",\n        escapeChar: \"\\\\\",\n        mask: null,\n        regex: null,\n        oncomplete: $.noop,\n        onincomplete: $.noop,\n        oncleared: $.noop,\n        repeat: 0,\n        greedy: !0,\n        autoUnmask: !1,\n        removeMaskOnSubmit: !1,\n        clearMaskOnLostFocus: !0,\n        insertMode: !0,\n        clearIncomplete: !1,\n        alias: null,\n        onKeyDown: $.noop,\n        onBeforeMask: null,\n        onBeforePaste: function onBeforePaste(pastedValue, opts) {\n          return $.isFunction(opts.onBeforeMask) ? opts.onBeforeMask.call(this, pastedValue, opts) : pastedValue;\n        },\n        onBeforeWrite: null,\n        onUnMask: null,\n        showMaskOnFocus: !0,\n        showMaskOnHover: !0,\n        onKeyValidation: $.noop,\n        skipOptionalPartCharacter: \" \",\n        numericInput: !1,\n        rightAlign: !1,\n        undoOnEscape: !0,\n        radixPoint: \"\",\n        radixPointDefinitionSymbol: undefined,\n        groupSeparator: \"\",\n        keepStatic: null,\n        positionCaretOnTab: !0,\n        tabThrough: !1,\n        supportsInputType: [\"text\", \"tel\", \"password\"],\n        ignorables: [8, 9, 13, 19, 27, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 93, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 0, 229],\n        isComplete: null,\n        canClearPosition: $.noop,\n        preValidation: null,\n        postValidation: null,\n        staticDefinitionSymbol: undefined,\n        jitMasking: !1,\n        nullable: !0,\n        inputEventOnly: !1,\n        noValuePatching: !1,\n        positionCaretOnClick: \"lvp\",\n        casing: null,\n        inputmode: \"verbatim\",\n        colorMask: !1,\n        androidHack: !1,\n        importDataAttributes: !0\n      },\n      definitions: {\n        \"9\": {\n          validator: \"[0-9１-９]\",\n          cardinality: 1,\n          definitionSymbol: \"*\"\n        },\n        a: {\n          validator: \"[A-Za-zА-яЁёÀ-ÿµ]\",\n          cardinality: 1,\n          definitionSymbol: \"*\"\n        },\n        \"*\": {\n          validator: \"[0-9１-９A-Za-zА-яЁёÀ-ÿµ]\",\n          cardinality: 1\n        }\n      },\n      aliases: {},\n      masksCache: {},\n      mask: function mask(elems) {\n        function importAttributeOptions(npt, opts, userOptions, dataAttribute) {\n          if (!0 === opts.importDataAttributes) {\n            var option,\n                dataoptions,\n                optionData,\n                p,\n                importOption = function importOption(option, optionData) {\n              null !== (optionData = optionData !== undefined ? optionData : npt.getAttribute(dataAttribute + \"-\" + option)) && (\"string\" == typeof optionData && (0 === option.indexOf(\"on\") ? optionData = window[optionData] : \"false\" === optionData ? optionData = !1 : \"true\" === optionData && (optionData = !0)), userOptions[option] = optionData);\n            },\n                attrOptions = npt.getAttribute(dataAttribute);\n\n            if (attrOptions && \"\" !== attrOptions && (attrOptions = attrOptions.replace(new RegExp(\"'\", \"g\"), '\"'), dataoptions = JSON.parse(\"{\" + attrOptions + \"}\")), dataoptions) {\n              optionData = undefined;\n\n              for (p in dataoptions) {\n                if (\"alias\" === p.toLowerCase()) {\n                  optionData = dataoptions[p];\n                  break;\n                }\n              }\n            }\n\n            importOption(\"alias\", optionData), userOptions.alias && resolveAlias(userOptions.alias, userOptions, opts);\n\n            for (option in opts) {\n              if (dataoptions) {\n                optionData = undefined;\n\n                for (p in dataoptions) {\n                  if (p.toLowerCase() === option.toLowerCase()) {\n                    optionData = dataoptions[p];\n                    break;\n                  }\n                }\n              }\n\n              importOption(option, optionData);\n            }\n          }\n\n          return $.extend(!0, opts, userOptions), (\"rtl\" === npt.dir || opts.rightAlign) && (npt.style.textAlign = \"right\"), (\"rtl\" === npt.dir || opts.numericInput) && (npt.dir = \"ltr\", npt.removeAttribute(\"dir\"), opts.isRTL = !0), opts;\n        }\n\n        var that = this;\n        return \"string\" == typeof elems && (elems = document.getElementById(elems) || document.querySelectorAll(elems)), elems = elems.nodeName ? [elems] : elems, $.each(elems, function (ndx, el) {\n          var scopedOpts = $.extend(!0, {}, that.opts);\n          importAttributeOptions(el, scopedOpts, $.extend(!0, {}, that.userOptions), that.dataAttribute);\n          var maskset = generateMaskSet(scopedOpts, that.noMasksCache);\n          maskset !== undefined && (el.inputmask !== undefined && (el.inputmask.opts.autoUnmask = !0, el.inputmask.remove()), el.inputmask = new Inputmask(undefined, undefined, !0), el.inputmask.opts = scopedOpts, el.inputmask.noMasksCache = that.noMasksCache, el.inputmask.userOptions = $.extend(!0, {}, that.userOptions), el.inputmask.isRTL = scopedOpts.isRTL || scopedOpts.numericInput, el.inputmask.el = el, el.inputmask.maskset = maskset, $.data(el, \"_inputmask_opts\", scopedOpts), maskScope.call(el.inputmask, {\n            action: \"mask\"\n          }));\n        }), elems && elems[0] ? elems[0].inputmask || this : this;\n      },\n      option: function option(options, noremask) {\n        return \"string\" == typeof options ? this.opts[options] : \"object\" === (void 0 === options ? \"undefined\" : _typeof(options)) ? ($.extend(this.userOptions, options), this.el && !0 !== noremask && this.mask(this.el), this) : void 0;\n      },\n      unmaskedvalue: function unmaskedvalue(value) {\n        return this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache), maskScope.call(this, {\n          action: \"unmaskedvalue\",\n          value: value\n        });\n      },\n      remove: function remove() {\n        return maskScope.call(this, {\n          action: \"remove\"\n        });\n      },\n      getemptymask: function getemptymask() {\n        return this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache), maskScope.call(this, {\n          action: \"getemptymask\"\n        });\n      },\n      hasMaskedValue: function hasMaskedValue() {\n        return !this.opts.autoUnmask;\n      },\n      isComplete: function isComplete() {\n        return this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache), maskScope.call(this, {\n          action: \"isComplete\"\n        });\n      },\n      getmetadata: function getmetadata() {\n        return this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache), maskScope.call(this, {\n          action: \"getmetadata\"\n        });\n      },\n      isValid: function isValid(value) {\n        return this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache), maskScope.call(this, {\n          action: \"isValid\",\n          value: value\n        });\n      },\n      format: function format(value, metadata) {\n        return this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache), maskScope.call(this, {\n          action: \"format\",\n          value: value,\n          metadata: metadata\n        });\n      },\n      analyseMask: function analyseMask(mask, regexMask, opts) {\n        function MaskToken(isGroup, isOptional, isQuantifier, isAlternator) {\n          this.matches = [], this.openGroup = isGroup || !1, this.alternatorGroup = !1, this.isGroup = isGroup || !1, this.isOptional = isOptional || !1, this.isQuantifier = isQuantifier || !1, this.isAlternator = isAlternator || !1, this.quantifier = {\n            min: 1,\n            max: 1\n          };\n        }\n\n        function insertTestDefinition(mtoken, element, position) {\n          position = position !== undefined ? position : mtoken.matches.length;\n          var prevMatch = mtoken.matches[position - 1];\n          if (regexMask) 0 === element.indexOf(\"[\") || escaped && /\\\\d|\\\\s|\\\\w]/i.test(element) || \".\" === element ? mtoken.matches.splice(position++, 0, {\n            fn: new RegExp(element, opts.casing ? \"i\" : \"\"),\n            cardinality: 1,\n            optionality: mtoken.isOptional,\n            newBlockMarker: prevMatch === undefined || prevMatch.def !== element,\n            casing: null,\n            def: element,\n            placeholder: undefined,\n            nativeDef: element\n          }) : (escaped && (element = element[element.length - 1]), $.each(element.split(\"\"), function (ndx, lmnt) {\n            prevMatch = mtoken.matches[position - 1], mtoken.matches.splice(position++, 0, {\n              fn: null,\n              cardinality: 0,\n              optionality: mtoken.isOptional,\n              newBlockMarker: prevMatch === undefined || prevMatch.def !== lmnt && null !== prevMatch.fn,\n              casing: null,\n              def: opts.staticDefinitionSymbol || lmnt,\n              placeholder: opts.staticDefinitionSymbol !== undefined ? lmnt : undefined,\n              nativeDef: lmnt\n            });\n          })), escaped = !1;else {\n            var maskdef = (opts.definitions ? opts.definitions[element] : undefined) || Inputmask.prototype.definitions[element];\n\n            if (maskdef && !escaped) {\n              for (var prevalidators = maskdef.prevalidator, prevalidatorsL = prevalidators ? prevalidators.length : 0, i = 1; i < maskdef.cardinality; i++) {\n                var prevalidator = prevalidatorsL >= i ? prevalidators[i - 1] : [],\n                    validator = prevalidator.validator,\n                    cardinality = prevalidator.cardinality;\n                mtoken.matches.splice(position++, 0, {\n                  fn: validator ? \"string\" == typeof validator ? new RegExp(validator, opts.casing ? \"i\" : \"\") : new function () {\n                    this.test = validator;\n                  }() : new RegExp(\".\"),\n                  cardinality: cardinality || 1,\n                  optionality: mtoken.isOptional,\n                  newBlockMarker: prevMatch === undefined || prevMatch.def !== (maskdef.definitionSymbol || element),\n                  casing: maskdef.casing,\n                  def: maskdef.definitionSymbol || element,\n                  placeholder: maskdef.placeholder,\n                  nativeDef: element\n                }), prevMatch = mtoken.matches[position - 1];\n              }\n\n              mtoken.matches.splice(position++, 0, {\n                fn: maskdef.validator ? \"string\" == typeof maskdef.validator ? new RegExp(maskdef.validator, opts.casing ? \"i\" : \"\") : new function () {\n                  this.test = maskdef.validator;\n                }() : new RegExp(\".\"),\n                cardinality: maskdef.cardinality,\n                optionality: mtoken.isOptional,\n                newBlockMarker: prevMatch === undefined || prevMatch.def !== (maskdef.definitionSymbol || element),\n                casing: maskdef.casing,\n                def: maskdef.definitionSymbol || element,\n                placeholder: maskdef.placeholder,\n                nativeDef: element\n              });\n            } else mtoken.matches.splice(position++, 0, {\n              fn: null,\n              cardinality: 0,\n              optionality: mtoken.isOptional,\n              newBlockMarker: prevMatch === undefined || prevMatch.def !== element && null !== prevMatch.fn,\n              casing: null,\n              def: opts.staticDefinitionSymbol || element,\n              placeholder: opts.staticDefinitionSymbol !== undefined ? element : undefined,\n              nativeDef: element\n            }), escaped = !1;\n          }\n        }\n\n        function verifyGroupMarker(maskToken) {\n          maskToken && maskToken.matches && $.each(maskToken.matches, function (ndx, token) {\n            var nextToken = maskToken.matches[ndx + 1];\n            (nextToken === undefined || nextToken.matches === undefined || !1 === nextToken.isQuantifier) && token && token.isGroup && (token.isGroup = !1, regexMask || (insertTestDefinition(token, opts.groupmarker.start, 0), !0 !== token.openGroup && insertTestDefinition(token, opts.groupmarker.end))), verifyGroupMarker(token);\n          });\n        }\n\n        function defaultCase() {\n          if (openenings.length > 0) {\n            if (currentOpeningToken = openenings[openenings.length - 1], insertTestDefinition(currentOpeningToken, m), currentOpeningToken.isAlternator) {\n              alternator = openenings.pop();\n\n              for (var mndx = 0; mndx < alternator.matches.length; mndx++) {\n                alternator.matches[mndx].isGroup = !1;\n              }\n\n              openenings.length > 0 ? (currentOpeningToken = openenings[openenings.length - 1]).matches.push(alternator) : currentToken.matches.push(alternator);\n            }\n          } else insertTestDefinition(currentToken, m);\n        }\n\n        function reverseTokens(maskToken) {\n          maskToken.matches = maskToken.matches.reverse();\n\n          for (var match in maskToken.matches) {\n            if (maskToken.matches.hasOwnProperty(match)) {\n              var intMatch = parseInt(match);\n\n              if (maskToken.matches[match].isQuantifier && maskToken.matches[intMatch + 1] && maskToken.matches[intMatch + 1].isGroup) {\n                var qt = maskToken.matches[match];\n                maskToken.matches.splice(match, 1), maskToken.matches.splice(intMatch + 1, 0, qt);\n              }\n\n              maskToken.matches[match].matches !== undefined ? maskToken.matches[match] = reverseTokens(maskToken.matches[match]) : maskToken.matches[match] = function (st) {\n                return st === opts.optionalmarker.start ? st = opts.optionalmarker.end : st === opts.optionalmarker.end ? st = opts.optionalmarker.start : st === opts.groupmarker.start ? st = opts.groupmarker.end : st === opts.groupmarker.end && (st = opts.groupmarker.start), st;\n              }(maskToken.matches[match]);\n            }\n          }\n\n          return maskToken;\n        }\n\n        var match,\n            m,\n            openingToken,\n            currentOpeningToken,\n            alternator,\n            lastMatch,\n            groupToken,\n            tokenizer = /(?:[?*+]|\\{[0-9\\+\\*]+(?:,[0-9\\+\\*]*)?\\})|[^.?*+^${[]()|\\\\]+|./g,\n            regexTokenizer = /\\[\\^?]?(?:[^\\\\\\]]+|\\\\[\\S\\s]?)*]?|\\\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\\S\\s]?)|\\((?:\\?[:=!]?)?|(?:[?*+]|\\{[0-9]+(?:,[0-9]*)?\\})\\??|[^.?*+^${[()|\\\\]+|./g,\n            escaped = !1,\n            currentToken = new MaskToken(),\n            openenings = [],\n            maskTokens = [];\n\n        for (regexMask && (opts.optionalmarker.start = undefined, opts.optionalmarker.end = undefined); match = regexMask ? regexTokenizer.exec(mask) : tokenizer.exec(mask);) {\n          if (m = match[0], regexMask) switch (m.charAt(0)) {\n            case \"?\":\n              m = \"{0,1}\";\n              break;\n\n            case \"+\":\n            case \"*\":\n              m = \"{\" + m + \"}\";\n          }\n          if (escaped) defaultCase();else switch (m.charAt(0)) {\n            case opts.escapeChar:\n              escaped = !0, regexMask && defaultCase();\n              break;\n\n            case opts.optionalmarker.end:\n            case opts.groupmarker.end:\n              if (openingToken = openenings.pop(), openingToken.openGroup = !1, openingToken !== undefined) {\n                if (openenings.length > 0) {\n                  if ((currentOpeningToken = openenings[openenings.length - 1]).matches.push(openingToken), currentOpeningToken.isAlternator) {\n                    alternator = openenings.pop();\n\n                    for (var mndx = 0; mndx < alternator.matches.length; mndx++) {\n                      alternator.matches[mndx].isGroup = !1, alternator.matches[mndx].alternatorGroup = !1;\n                    }\n\n                    openenings.length > 0 ? (currentOpeningToken = openenings[openenings.length - 1]).matches.push(alternator) : currentToken.matches.push(alternator);\n                  }\n                } else currentToken.matches.push(openingToken);\n              } else defaultCase();\n              break;\n\n            case opts.optionalmarker.start:\n              openenings.push(new MaskToken(!1, !0));\n              break;\n\n            case opts.groupmarker.start:\n              openenings.push(new MaskToken(!0));\n              break;\n\n            case opts.quantifiermarker.start:\n              var quantifier = new MaskToken(!1, !1, !0),\n                  mq = (m = m.replace(/[{}]/g, \"\")).split(\",\"),\n                  mq0 = isNaN(mq[0]) ? mq[0] : parseInt(mq[0]),\n                  mq1 = 1 === mq.length ? mq0 : isNaN(mq[1]) ? mq[1] : parseInt(mq[1]);\n\n              if (\"*\" !== mq1 && \"+\" !== mq1 || (mq0 = \"*\" === mq1 ? 0 : 1), quantifier.quantifier = {\n                min: mq0,\n                max: mq1\n              }, openenings.length > 0) {\n                var matches = openenings[openenings.length - 1].matches;\n                (match = matches.pop()).isGroup || ((groupToken = new MaskToken(!0)).matches.push(match), match = groupToken), matches.push(match), matches.push(quantifier);\n              } else (match = currentToken.matches.pop()).isGroup || (regexMask && null === match.fn && \".\" === match.def && (match.fn = new RegExp(match.def, opts.casing ? \"i\" : \"\")), (groupToken = new MaskToken(!0)).matches.push(match), match = groupToken), currentToken.matches.push(match), currentToken.matches.push(quantifier);\n\n              break;\n\n            case opts.alternatormarker:\n              if (openenings.length > 0) {\n                var subToken = (currentOpeningToken = openenings[openenings.length - 1]).matches[currentOpeningToken.matches.length - 1];\n                lastMatch = currentOpeningToken.openGroup && (subToken.matches === undefined || !1 === subToken.isGroup && !1 === subToken.isAlternator) ? openenings.pop() : currentOpeningToken.matches.pop();\n              } else lastMatch = currentToken.matches.pop();\n\n              if (lastMatch.isAlternator) openenings.push(lastMatch);else if (lastMatch.alternatorGroup ? (alternator = openenings.pop(), lastMatch.alternatorGroup = !1) : alternator = new MaskToken(!1, !1, !1, !0), alternator.matches.push(lastMatch), openenings.push(alternator), lastMatch.openGroup) {\n                lastMatch.openGroup = !1;\n                var alternatorGroup = new MaskToken(!0);\n                alternatorGroup.alternatorGroup = !0, openenings.push(alternatorGroup);\n              }\n              break;\n\n            default:\n              defaultCase();\n          }\n        }\n\n        for (; openenings.length > 0;) {\n          openingToken = openenings.pop(), currentToken.matches.push(openingToken);\n        }\n\n        return currentToken.matches.length > 0 && (verifyGroupMarker(currentToken), maskTokens.push(currentToken)), (opts.numericInput || opts.isRTL) && reverseTokens(maskTokens[0]), maskTokens;\n      }\n    }, Inputmask.extendDefaults = function (options) {\n      $.extend(!0, Inputmask.prototype.defaults, options);\n    }, Inputmask.extendDefinitions = function (definition) {\n      $.extend(!0, Inputmask.prototype.definitions, definition);\n    }, Inputmask.extendAliases = function (alias) {\n      $.extend(!0, Inputmask.prototype.aliases, alias);\n    }, Inputmask.format = function (value, options, metadata) {\n      return Inputmask(options).format(value, metadata);\n    }, Inputmask.unmask = function (value, options) {\n      return Inputmask(options).unmaskedvalue(value);\n    }, Inputmask.isValid = function (value, options) {\n      return Inputmask(options).isValid(value);\n    }, Inputmask.remove = function (elems) {\n      $.each(elems, function (ndx, el) {\n        el.inputmask && el.inputmask.remove();\n      });\n    }, Inputmask.escapeRegex = function (str) {\n      var specials = [\"/\", \".\", \"*\", \"+\", \"?\", \"|\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", \"\\\\\", \"$\", \"^\"];\n      return str.replace(new RegExp(\"(\\\\\" + specials.join(\"|\\\\\") + \")\", \"gim\"), \"\\\\$1\");\n    }, Inputmask.keyCode = {\n      ALT: 18,\n      BACKSPACE: 8,\n      BACKSPACE_SAFARI: 127,\n      CAPS_LOCK: 20,\n      COMMA: 188,\n      COMMAND: 91,\n      COMMAND_LEFT: 91,\n      COMMAND_RIGHT: 93,\n      CONTROL: 17,\n      DELETE: 46,\n      DOWN: 40,\n      END: 35,\n      ENTER: 13,\n      ESCAPE: 27,\n      HOME: 36,\n      INSERT: 45,\n      LEFT: 37,\n      MENU: 93,\n      NUMPAD_ADD: 107,\n      NUMPAD_DECIMAL: 110,\n      NUMPAD_DIVIDE: 111,\n      NUMPAD_ENTER: 108,\n      NUMPAD_MULTIPLY: 106,\n      NUMPAD_SUBTRACT: 109,\n      PAGE_DOWN: 34,\n      PAGE_UP: 33,\n      PERIOD: 190,\n      RIGHT: 39,\n      SHIFT: 16,\n      SPACE: 32,\n      TAB: 9,\n      UP: 38,\n      WINDOWS: 91,\n      X: 88\n    }, Inputmask;\n  });\n}, function (module, exports) {\n  module.exports = jQuery;\n}, function (module, exports, __webpack_require__) {\n  \"use strict\";\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      \"default\": obj\n    };\n  }\n\n  __webpack_require__(4), __webpack_require__(9), __webpack_require__(12), __webpack_require__(13), __webpack_require__(14), __webpack_require__(15);\n\n  var _inputmask2 = _interopRequireDefault(__webpack_require__(1)),\n      _inputmask4 = _interopRequireDefault(__webpack_require__(0)),\n      _jquery2 = _interopRequireDefault(__webpack_require__(2));\n\n  _inputmask4[\"default\"] === _jquery2[\"default\"] && __webpack_require__(16), window.Inputmask = _inputmask2[\"default\"];\n}, function (module, exports, __webpack_require__) {\n  var content = __webpack_require__(5);\n\n  \"string\" == typeof content && (content = [[module.i, content, \"\"]]);\n  var options = {\n    hmr: !0\n  };\n  options.transform = void 0;\n\n  __webpack_require__(7)(content, options);\n\n  content.locals && (module.exports = content.locals);\n}, function (module, exports, __webpack_require__) {\n  (module.exports = __webpack_require__(6)(void 0)).push([module.i, \"span.im-caret {\\r\\n    -webkit-animation: 1s blink step-end infinite;\\r\\n    animation: 1s blink step-end infinite;\\r\\n}\\r\\n\\r\\n@keyframes blink {\\r\\n    from, to {\\r\\n        border-right-color: black;\\r\\n    }\\r\\n    50% {\\r\\n        border-right-color: transparent;\\r\\n    }\\r\\n}\\r\\n\\r\\n@-webkit-keyframes blink {\\r\\n    from, to {\\r\\n        border-right-color: black;\\r\\n    }\\r\\n    50% {\\r\\n        border-right-color: transparent;\\r\\n    }\\r\\n}\\r\\n\\r\\nspan.im-static {\\r\\n    color: grey;\\r\\n}\\r\\n\\r\\ndiv.im-colormask {\\r\\n    display: inline-block;\\r\\n    border-style: inset;\\r\\n    border-width: 2px;\\r\\n    -webkit-appearance: textfield;\\r\\n    -moz-appearance: textfield;\\r\\n    appearance: textfield;\\r\\n}\\r\\n\\r\\ndiv.im-colormask > input {\\r\\n    position: absolute;\\r\\n    display: inline-block;\\r\\n    background-color: transparent;\\r\\n    color: transparent;\\r\\n    -webkit-appearance: caret;\\r\\n    -moz-appearance: caret;\\r\\n    appearance: caret;\\r\\n    border-style: none;\\r\\n    left: 0; /*calculated*/\\r\\n}\\r\\n\\r\\ndiv.im-colormask > input:focus {\\r\\n    outline: none;\\r\\n}\\r\\n\\r\\ndiv.im-colormask > input::-moz-selection{\\r\\n    background: none;\\r\\n}\\r\\n\\r\\ndiv.im-colormask > input::selection{\\r\\n    background: none;\\r\\n}\\r\\ndiv.im-colormask > input::-moz-selection{\\r\\n    background: none;\\r\\n}\\r\\n\\r\\ndiv.im-colormask > div {\\r\\n    color: black;\\r\\n    display: inline-block;\\r\\n    width: 100px; /*calculated*/\\r\\n}\", \"\"]);\n}, function (module, exports) {\n  function cssWithMappingToString(item, useSourceMap) {\n    var content = item[1] || \"\",\n        cssMapping = item[3];\n    if (!cssMapping) return content;\n\n    if (useSourceMap && \"function\" == typeof btoa) {\n      var sourceMapping = toComment(cssMapping),\n          sourceURLs = cssMapping.sources.map(function (source) {\n        return \"/*# sourceURL=\" + cssMapping.sourceRoot + source + \" */\";\n      });\n      return [content].concat(sourceURLs).concat([sourceMapping]).join(\"\\n\");\n    }\n\n    return [content].join(\"\\n\");\n  }\n\n  function toComment(sourceMap) {\n    return \"/*# \" + (\"sourceMappingURL=data:application/json;charset=utf-8;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))) + \" */\";\n  }\n\n  module.exports = function (useSourceMap) {\n    var list = [];\n    return list.toString = function () {\n      return this.map(function (item) {\n        var content = cssWithMappingToString(item, useSourceMap);\n        return item[2] ? \"@media \" + item[2] + \"{\" + content + \"}\" : content;\n      }).join(\"\");\n    }, list.i = function (modules, mediaQuery) {\n      \"string\" == typeof modules && (modules = [[null, modules, \"\"]]);\n\n      for (var alreadyImportedModules = {}, i = 0; i < this.length; i++) {\n        var id = this[i][0];\n        \"number\" == typeof id && (alreadyImportedModules[id] = !0);\n      }\n\n      for (i = 0; i < modules.length; i++) {\n        var item = modules[i];\n        \"number\" == typeof item[0] && alreadyImportedModules[item[0]] || (mediaQuery && !item[2] ? item[2] = mediaQuery : mediaQuery && (item[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\"), list.push(item));\n      }\n    }, list;\n  };\n}, function (module, exports, __webpack_require__) {\n  function addStylesToDom(styles, options) {\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i],\n          domStyle = stylesInDom[item.id];\n\n      if (domStyle) {\n        domStyle.refs++;\n\n        for (j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j](item.parts[j]);\n        }\n\n        for (; j < item.parts.length; j++) {\n          domStyle.parts.push(addStyle(item.parts[j], options));\n        }\n      } else {\n        for (var parts = [], j = 0; j < item.parts.length; j++) {\n          parts.push(addStyle(item.parts[j], options));\n        }\n\n        stylesInDom[item.id] = {\n          id: item.id,\n          refs: 1,\n          parts: parts\n        };\n      }\n    }\n  }\n\n  function listToStyles(list, options) {\n    for (var styles = [], newStyles = {}, i = 0; i < list.length; i++) {\n      var item = list[i],\n          id = options.base ? item[0] + options.base : item[0],\n          part = {\n        css: item[1],\n        media: item[2],\n        sourceMap: item[3]\n      };\n      newStyles[id] ? newStyles[id].parts.push(part) : styles.push(newStyles[id] = {\n        id: id,\n        parts: [part]\n      });\n    }\n\n    return styles;\n  }\n\n  function insertStyleElement(options, style) {\n    var target = getElement(options.insertInto);\n    if (!target) throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n    var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n    if (\"top\" === options.insertAt) lastStyleElementInsertedAtTop ? lastStyleElementInsertedAtTop.nextSibling ? target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling) : target.appendChild(style) : target.insertBefore(style, target.firstChild), stylesInsertedAtTop.push(style);else if (\"bottom\" === options.insertAt) target.appendChild(style);else {\n      if (\"object\" != _typeof2(options.insertAt) || !options.insertAt.before) throw new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");\n      var nextSibling = getElement(options.insertInto + \" \" + options.insertAt.before);\n      target.insertBefore(style, nextSibling);\n    }\n  }\n\n  function removeStyleElement(style) {\n    if (null === style.parentNode) return !1;\n    style.parentNode.removeChild(style);\n    var idx = stylesInsertedAtTop.indexOf(style);\n    idx >= 0 && stylesInsertedAtTop.splice(idx, 1);\n  }\n\n  function createStyleElement(options) {\n    var style = document.createElement(\"style\");\n    return options.attrs.type = \"text/css\", addAttrs(style, options.attrs), insertStyleElement(options, style), style;\n  }\n\n  function createLinkElement(options) {\n    var link = document.createElement(\"link\");\n    return options.attrs.type = \"text/css\", options.attrs.rel = \"stylesheet\", addAttrs(link, options.attrs), insertStyleElement(options, link), link;\n  }\n\n  function addAttrs(el, attrs) {\n    Object.keys(attrs).forEach(function (key) {\n      el.setAttribute(key, attrs[key]);\n    });\n  }\n\n  function addStyle(obj, options) {\n    var style, update, remove, result;\n\n    if (options.transform && obj.css) {\n      if (!(result = options.transform(obj.css))) return function () {};\n      obj.css = result;\n    }\n\n    if (options.singleton) {\n      var styleIndex = singletonCounter++;\n      style = singleton || (singleton = createStyleElement(options)), update = applyToSingletonTag.bind(null, style, styleIndex, !1), remove = applyToSingletonTag.bind(null, style, styleIndex, !0);\n    } else obj.sourceMap && \"function\" == typeof URL && \"function\" == typeof URL.createObjectURL && \"function\" == typeof URL.revokeObjectURL && \"function\" == typeof Blob && \"function\" == typeof btoa ? (style = createLinkElement(options), update = updateLink.bind(null, style, options), remove = function remove() {\n      removeStyleElement(style), style.href && URL.revokeObjectURL(style.href);\n    }) : (style = createStyleElement(options), update = applyToTag.bind(null, style), remove = function remove() {\n      removeStyleElement(style);\n    });\n\n    return update(obj), function (newObj) {\n      if (newObj) {\n        if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) return;\n        update(obj = newObj);\n      } else remove();\n    };\n  }\n\n  function applyToSingletonTag(style, index, remove, obj) {\n    var css = remove ? \"\" : obj.css;\n    if (style.styleSheet) style.styleSheet.cssText = replaceText(index, css);else {\n      var cssNode = document.createTextNode(css),\n          childNodes = style.childNodes;\n      childNodes[index] && style.removeChild(childNodes[index]), childNodes.length ? style.insertBefore(cssNode, childNodes[index]) : style.appendChild(cssNode);\n    }\n  }\n\n  function applyToTag(style, obj) {\n    var css = obj.css,\n        media = obj.media;\n    if (media && style.setAttribute(\"media\", media), style.styleSheet) style.styleSheet.cssText = css;else {\n      for (; style.firstChild;) {\n        style.removeChild(style.firstChild);\n      }\n\n      style.appendChild(document.createTextNode(css));\n    }\n  }\n\n  function updateLink(link, options, obj) {\n    var css = obj.css,\n        sourceMap = obj.sourceMap,\n        autoFixUrls = void 0 === options.convertToAbsoluteUrls && sourceMap;\n    (options.convertToAbsoluteUrls || autoFixUrls) && (css = fixUrls(css)), sourceMap && (css += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\");\n    var blob = new Blob([css], {\n      type: \"text/css\"\n    }),\n        oldSrc = link.href;\n    link.href = URL.createObjectURL(blob), oldSrc && URL.revokeObjectURL(oldSrc);\n  }\n\n  var stylesInDom = {},\n      isOldIE = function (fn) {\n    var memo;\n    return function () {\n      return void 0 === memo && (memo = fn.apply(this, arguments)), memo;\n    };\n  }(function () {\n    return window && document && document.all && !window.atob;\n  }),\n      getElement = function (fn) {\n    var memo = {};\n    return function (selector) {\n      if (void 0 === memo[selector]) {\n        var styleTarget = fn.call(this, selector);\n        if (styleTarget instanceof window.HTMLIFrameElement) try {\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          styleTarget = null;\n        }\n        memo[selector] = styleTarget;\n      }\n\n      return memo[selector];\n    };\n  }(function (target) {\n    return document.querySelector(target);\n  }),\n      singleton = null,\n      singletonCounter = 0,\n      stylesInsertedAtTop = [],\n      fixUrls = __webpack_require__(8);\n\n  module.exports = function (list, options) {\n    if (\"undefined\" != typeof DEBUG && DEBUG && \"object\" != (typeof document === \"undefined\" ? \"undefined\" : _typeof2(document))) throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n    (options = options || {}).attrs = \"object\" == _typeof2(options.attrs) ? options.attrs : {}, options.singleton || (options.singleton = isOldIE()), options.insertInto || (options.insertInto = \"head\"), options.insertAt || (options.insertAt = \"bottom\");\n    var styles = listToStyles(list, options);\n    return addStylesToDom(styles, options), function (newList) {\n      for (var mayRemove = [], i = 0; i < styles.length; i++) {\n        var item = styles[i];\n        (domStyle = stylesInDom[item.id]).refs--, mayRemove.push(domStyle);\n      }\n\n      newList && addStylesToDom(listToStyles(newList, options), options);\n\n      for (i = 0; i < mayRemove.length; i++) {\n        var domStyle = mayRemove[i];\n\n        if (0 === domStyle.refs) {\n          for (var j = 0; j < domStyle.parts.length; j++) {\n            domStyle.parts[j]();\n          }\n\n          delete stylesInDom[domStyle.id];\n        }\n      }\n    };\n  };\n\n  var replaceText = function () {\n    var textStore = [];\n    return function (index, replacement) {\n      return textStore[index] = replacement, textStore.filter(Boolean).join(\"\\n\");\n    };\n  }();\n}, function (module, exports) {\n  module.exports = function (css) {\n    var location = \"undefined\" != typeof window && window.location;\n    if (!location) throw new Error(\"fixUrls requires window.location\");\n    if (!css || \"string\" != typeof css) return css;\n    var baseUrl = location.protocol + \"//\" + location.host,\n        currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n    return css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function (fullMatch, origUrl) {\n      var unquotedOrigUrl = origUrl.trim().replace(/^\"(.*)\"$/, function (o, $1) {\n        return $1;\n      }).replace(/^'(.*)'$/, function (o, $1) {\n        return $1;\n      });\n      if (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/)/i.test(unquotedOrigUrl)) return fullMatch;\n      var newUrl;\n      return newUrl = 0 === unquotedOrigUrl.indexOf(\"//\") ? unquotedOrigUrl : 0 === unquotedOrigUrl.indexOf(\"/\") ? baseUrl + unquotedOrigUrl : currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"), \"url(\" + JSON.stringify(newUrl) + \")\";\n    });\n  };\n}, function (module, exports, __webpack_require__) {\n  \"use strict\";\n\n  var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n  \"function\" == typeof Symbol && Symbol.iterator;\n  !function (factory) {\n    __WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1)], void 0 !== (__WEBPACK_AMD_DEFINE_RESULT__ = \"function\" == typeof (__WEBPACK_AMD_DEFINE_FACTORY__ = factory) ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__) && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__);\n  }(function ($, Inputmask) {\n    function isLeapYear(year) {\n      return isNaN(year) || 29 === new Date(year, 2, 0).getDate();\n    }\n\n    return Inputmask.extendAliases({\n      \"dd/mm/yyyy\": {\n        mask: \"1/2/y\",\n        placeholder: \"dd/mm/yyyy\",\n        regex: {\n          val1pre: new RegExp(\"[0-3]\"),\n          val1: new RegExp(\"0[1-9]|[12][0-9]|3[01]\"),\n          val2pre: function val2pre(separator) {\n            var escapedSeparator = Inputmask.escapeRegex.call(this, separator);\n            return new RegExp(\"((0[1-9]|[12][0-9]|3[01])\" + escapedSeparator + \"[01])\");\n          },\n          val2: function val2(separator) {\n            var escapedSeparator = Inputmask.escapeRegex.call(this, separator);\n            return new RegExp(\"((0[1-9]|[12][0-9])\" + escapedSeparator + \"(0[1-9]|1[012]))|(30\" + escapedSeparator + \"(0[13-9]|1[012]))|(31\" + escapedSeparator + \"(0[13578]|1[02]))\");\n          }\n        },\n        leapday: \"29/02/\",\n        separator: \"/\",\n        yearrange: {\n          minyear: 1900,\n          maxyear: 2099\n        },\n        isInYearRange: function isInYearRange(chrs, minyear, maxyear) {\n          if (isNaN(chrs)) return !1;\n          var enteredyear = parseInt(chrs.concat(minyear.toString().slice(chrs.length))),\n              enteredyear2 = parseInt(chrs.concat(maxyear.toString().slice(chrs.length)));\n          return !isNaN(enteredyear) && minyear <= enteredyear && enteredyear <= maxyear || !isNaN(enteredyear2) && minyear <= enteredyear2 && enteredyear2 <= maxyear;\n        },\n        determinebaseyear: function determinebaseyear(minyear, maxyear, hint) {\n          var currentyear = new Date().getFullYear();\n          if (minyear > currentyear) return minyear;\n\n          if (maxyear < currentyear) {\n            for (var maxYearPrefix = maxyear.toString().slice(0, 2), maxYearPostfix = maxyear.toString().slice(2, 4); maxyear < maxYearPrefix + hint;) {\n              maxYearPrefix--;\n            }\n\n            var maxxYear = maxYearPrefix + maxYearPostfix;\n            return minyear > maxxYear ? minyear : maxxYear;\n          }\n\n          if (minyear <= currentyear && currentyear <= maxyear) {\n            for (var currentYearPrefix = currentyear.toString().slice(0, 2); maxyear < currentYearPrefix + hint;) {\n              currentYearPrefix--;\n            }\n\n            var currentYearAndHint = currentYearPrefix + hint;\n            return currentYearAndHint < minyear ? minyear : currentYearAndHint;\n          }\n\n          return currentyear;\n        },\n        onKeyDown: function onKeyDown(e, buffer, caretPos, opts) {\n          var $input = $(this);\n\n          if (e.ctrlKey && e.keyCode === Inputmask.keyCode.RIGHT) {\n            var today = new Date();\n            $input.val(today.getDate().toString() + (today.getMonth() + 1).toString() + today.getFullYear().toString()), $input.trigger(\"setvalue\");\n          }\n        },\n        getFrontValue: function getFrontValue(mask, buffer, opts) {\n          for (var start = 0, length = 0, i = 0; i < mask.length && \"2\" !== mask.charAt(i); i++) {\n            var definition = opts.definitions[mask.charAt(i)];\n            definition ? (start += length, length = definition.cardinality) : length++;\n          }\n\n          return buffer.join(\"\").substr(start, length);\n        },\n        postValidation: function postValidation(buffer, currentResult, opts) {\n          var dayMonthValue,\n              year,\n              bufferStr = buffer.join(\"\");\n          return 0 === opts.mask.indexOf(\"y\") ? (year = bufferStr.substr(0, 4), dayMonthValue = bufferStr.substring(4, 10)) : (year = bufferStr.substring(6, 10), dayMonthValue = bufferStr.substr(0, 6)), currentResult && (dayMonthValue !== opts.leapday || isLeapYear(year));\n        },\n        definitions: {\n          \"1\": {\n            validator: function validator(chrs, maskset, pos, strict, opts) {\n              var isValid = opts.regex.val1.test(chrs);\n              return strict || isValid || chrs.charAt(1) !== opts.separator && -1 === \"-./\".indexOf(chrs.charAt(1)) || !(isValid = opts.regex.val1.test(\"0\" + chrs.charAt(0))) ? isValid : (maskset.buffer[pos - 1] = \"0\", {\n                refreshFromBuffer: {\n                  start: pos - 1,\n                  end: pos\n                },\n                pos: pos,\n                c: chrs.charAt(0)\n              });\n            },\n            cardinality: 2,\n            prevalidator: [{\n              validator: function validator(chrs, maskset, pos, strict, opts) {\n                var pchrs = chrs;\n                isNaN(maskset.buffer[pos + 1]) || (pchrs += maskset.buffer[pos + 1]);\n                var isValid = 1 === pchrs.length ? opts.regex.val1pre.test(pchrs) : opts.regex.val1.test(pchrs);\n\n                if (isValid && maskset.validPositions[pos] && (opts.regex.val2(opts.separator).test(chrs + maskset.validPositions[pos].input) || (maskset.validPositions[pos].input = \"0\" === chrs ? \"1\" : \"0\")), !strict && !isValid) {\n                  if (isValid = opts.regex.val1.test(chrs + \"0\")) return maskset.buffer[pos] = chrs, maskset.buffer[++pos] = \"0\", {\n                    pos: pos,\n                    c: \"0\"\n                  };\n                  if (isValid = opts.regex.val1.test(\"0\" + chrs)) return maskset.buffer[pos] = \"0\", pos++, {\n                    pos: pos\n                  };\n                }\n\n                return isValid;\n              },\n              cardinality: 1\n            }]\n          },\n          \"2\": {\n            validator: function validator(chrs, maskset, pos, strict, opts) {\n              var frontValue = opts.getFrontValue(maskset.mask, maskset.buffer, opts);\n              -1 !== frontValue.indexOf(opts.placeholder[0]) && (frontValue = \"01\" + opts.separator);\n              var isValid = opts.regex.val2(opts.separator).test(frontValue + chrs);\n              return strict || isValid || chrs.charAt(1) !== opts.separator && -1 === \"-./\".indexOf(chrs.charAt(1)) || !(isValid = opts.regex.val2(opts.separator).test(frontValue + \"0\" + chrs.charAt(0))) ? isValid : (maskset.buffer[pos - 1] = \"0\", {\n                refreshFromBuffer: {\n                  start: pos - 1,\n                  end: pos\n                },\n                pos: pos,\n                c: chrs.charAt(0)\n              });\n            },\n            cardinality: 2,\n            prevalidator: [{\n              validator: function validator(chrs, maskset, pos, strict, opts) {\n                isNaN(maskset.buffer[pos + 1]) || (chrs += maskset.buffer[pos + 1]);\n                var frontValue = opts.getFrontValue(maskset.mask, maskset.buffer, opts);\n                -1 !== frontValue.indexOf(opts.placeholder[0]) && (frontValue = \"01\" + opts.separator);\n                var isValid = 1 === chrs.length ? opts.regex.val2pre(opts.separator).test(frontValue + chrs) : opts.regex.val2(opts.separator).test(frontValue + chrs);\n                return isValid && maskset.validPositions[pos] && (opts.regex.val2(opts.separator).test(chrs + maskset.validPositions[pos].input) || (maskset.validPositions[pos].input = \"0\" === chrs ? \"1\" : \"0\")), strict || isValid || !(isValid = opts.regex.val2(opts.separator).test(frontValue + \"0\" + chrs)) ? isValid : (maskset.buffer[pos] = \"0\", pos++, {\n                  pos: pos\n                });\n              },\n              cardinality: 1\n            }]\n          },\n          y: {\n            validator: function validator(chrs, maskset, pos, strict, opts) {\n              return opts.isInYearRange(chrs, opts.yearrange.minyear, opts.yearrange.maxyear);\n            },\n            cardinality: 4,\n            prevalidator: [{\n              validator: function validator(chrs, maskset, pos, strict, opts) {\n                var isValid = opts.isInYearRange(chrs, opts.yearrange.minyear, opts.yearrange.maxyear);\n\n                if (!strict && !isValid) {\n                  var yearPrefix = opts.determinebaseyear(opts.yearrange.minyear, opts.yearrange.maxyear, chrs + \"0\").toString().slice(0, 1);\n                  if (isValid = opts.isInYearRange(yearPrefix + chrs, opts.yearrange.minyear, opts.yearrange.maxyear)) return maskset.buffer[pos++] = yearPrefix.charAt(0), {\n                    pos: pos\n                  };\n                  if (yearPrefix = opts.determinebaseyear(opts.yearrange.minyear, opts.yearrange.maxyear, chrs + \"0\").toString().slice(0, 2), isValid = opts.isInYearRange(yearPrefix + chrs, opts.yearrange.minyear, opts.yearrange.maxyear)) return maskset.buffer[pos++] = yearPrefix.charAt(0), maskset.buffer[pos++] = yearPrefix.charAt(1), {\n                    pos: pos\n                  };\n                }\n\n                return isValid;\n              },\n              cardinality: 1\n            }, {\n              validator: function validator(chrs, maskset, pos, strict, opts) {\n                var isValid = opts.isInYearRange(chrs, opts.yearrange.minyear, opts.yearrange.maxyear);\n\n                if (!strict && !isValid) {\n                  var yearPrefix = opts.determinebaseyear(opts.yearrange.minyear, opts.yearrange.maxyear, chrs).toString().slice(0, 2);\n                  if (isValid = opts.isInYearRange(chrs[0] + yearPrefix[1] + chrs[1], opts.yearrange.minyear, opts.yearrange.maxyear)) return maskset.buffer[pos++] = yearPrefix.charAt(1), {\n                    pos: pos\n                  };\n                  if (yearPrefix = opts.determinebaseyear(opts.yearrange.minyear, opts.yearrange.maxyear, chrs).toString().slice(0, 2), isValid = opts.isInYearRange(yearPrefix + chrs, opts.yearrange.minyear, opts.yearrange.maxyear)) return maskset.buffer[pos - 1] = yearPrefix.charAt(0), maskset.buffer[pos++] = yearPrefix.charAt(1), maskset.buffer[pos++] = chrs.charAt(0), {\n                    refreshFromBuffer: {\n                      start: pos - 3,\n                      end: pos\n                    },\n                    pos: pos\n                  };\n                }\n\n                return isValid;\n              },\n              cardinality: 2\n            }, {\n              validator: function validator(chrs, maskset, pos, strict, opts) {\n                return opts.isInYearRange(chrs, opts.yearrange.minyear, opts.yearrange.maxyear);\n              },\n              cardinality: 3\n            }]\n          }\n        },\n        insertMode: !1,\n        autoUnmask: !1\n      },\n      \"mm/dd/yyyy\": {\n        placeholder: \"mm/dd/yyyy\",\n        alias: \"dd/mm/yyyy\",\n        regex: {\n          val2pre: function val2pre(separator) {\n            var escapedSeparator = Inputmask.escapeRegex.call(this, separator);\n            return new RegExp(\"((0[13-9]|1[012])\" + escapedSeparator + \"[0-3])|(02\" + escapedSeparator + \"[0-2])\");\n          },\n          val2: function val2(separator) {\n            var escapedSeparator = Inputmask.escapeRegex.call(this, separator);\n            return new RegExp(\"((0[1-9]|1[012])\" + escapedSeparator + \"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])\" + escapedSeparator + \"30)|((0[13578]|1[02])\" + escapedSeparator + \"31)\");\n          },\n          val1pre: new RegExp(\"[01]\"),\n          val1: new RegExp(\"0[1-9]|1[012]\")\n        },\n        leapday: \"02/29/\",\n        onKeyDown: function onKeyDown(e, buffer, caretPos, opts) {\n          var $input = $(this);\n\n          if (e.ctrlKey && e.keyCode === Inputmask.keyCode.RIGHT) {\n            var today = new Date();\n            $input.val((today.getMonth() + 1).toString() + today.getDate().toString() + today.getFullYear().toString()), $input.trigger(\"setvalue\");\n          }\n        }\n      },\n      \"yyyy/mm/dd\": {\n        mask: \"y/1/2\",\n        placeholder: \"yyyy/mm/dd\",\n        alias: \"mm/dd/yyyy\",\n        leapday: \"/02/29\",\n        onKeyDown: function onKeyDown(e, buffer, caretPos, opts) {\n          var $input = $(this);\n\n          if (e.ctrlKey && e.keyCode === Inputmask.keyCode.RIGHT) {\n            var today = new Date();\n            $input.val(today.getFullYear().toString() + (today.getMonth() + 1).toString() + today.getDate().toString()), $input.trigger(\"setvalue\");\n          }\n        }\n      },\n      \"dd.mm.yyyy\": {\n        mask: \"1.2.y\",\n        placeholder: \"dd.mm.yyyy\",\n        leapday: \"29.02.\",\n        separator: \".\",\n        alias: \"dd/mm/yyyy\"\n      },\n      \"dd-mm-yyyy\": {\n        mask: \"1-2-y\",\n        placeholder: \"dd-mm-yyyy\",\n        leapday: \"29-02-\",\n        separator: \"-\",\n        alias: \"dd/mm/yyyy\"\n      },\n      \"mm.dd.yyyy\": {\n        mask: \"1.2.y\",\n        placeholder: \"mm.dd.yyyy\",\n        leapday: \"02.29.\",\n        separator: \".\",\n        alias: \"mm/dd/yyyy\"\n      },\n      \"mm-dd-yyyy\": {\n        mask: \"1-2-y\",\n        placeholder: \"mm-dd-yyyy\",\n        leapday: \"02-29-\",\n        separator: \"-\",\n        alias: \"mm/dd/yyyy\"\n      },\n      \"yyyy.mm.dd\": {\n        mask: \"y.1.2\",\n        placeholder: \"yyyy.mm.dd\",\n        leapday: \".02.29\",\n        separator: \".\",\n        alias: \"yyyy/mm/dd\"\n      },\n      \"yyyy-mm-dd\": {\n        mask: \"y-1-2\",\n        placeholder: \"yyyy-mm-dd\",\n        leapday: \"-02-29\",\n        separator: \"-\",\n        alias: \"yyyy/mm/dd\"\n      },\n      datetime: {\n        mask: \"1/2/y h:s\",\n        placeholder: \"dd/mm/yyyy hh:mm\",\n        alias: \"dd/mm/yyyy\",\n        regex: {\n          hrspre: new RegExp(\"[012]\"),\n          hrs24: new RegExp(\"2[0-4]|1[3-9]\"),\n          hrs: new RegExp(\"[01][0-9]|2[0-4]\"),\n          ampm: new RegExp(\"^[a|p|A|P][m|M]\"),\n          mspre: new RegExp(\"[0-5]\"),\n          ms: new RegExp(\"[0-5][0-9]\")\n        },\n        timeseparator: \":\",\n        hourFormat: \"24\",\n        definitions: {\n          h: {\n            validator: function validator(chrs, maskset, pos, strict, opts) {\n              if (\"24\" === opts.hourFormat && 24 === parseInt(chrs, 10)) return maskset.buffer[pos - 1] = \"0\", maskset.buffer[pos] = \"0\", {\n                refreshFromBuffer: {\n                  start: pos - 1,\n                  end: pos\n                },\n                c: \"0\"\n              };\n              var isValid = opts.regex.hrs.test(chrs);\n              if (!strict && !isValid && (chrs.charAt(1) === opts.timeseparator || -1 !== \"-.:\".indexOf(chrs.charAt(1))) && (isValid = opts.regex.hrs.test(\"0\" + chrs.charAt(0)))) return maskset.buffer[pos - 1] = \"0\", maskset.buffer[pos] = chrs.charAt(0), pos++, {\n                refreshFromBuffer: {\n                  start: pos - 2,\n                  end: pos\n                },\n                pos: pos,\n                c: opts.timeseparator\n              };\n\n              if (isValid && \"24\" !== opts.hourFormat && opts.regex.hrs24.test(chrs)) {\n                var tmp = parseInt(chrs, 10);\n                return 24 === tmp ? (maskset.buffer[pos + 5] = \"a\", maskset.buffer[pos + 6] = \"m\") : (maskset.buffer[pos + 5] = \"p\", maskset.buffer[pos + 6] = \"m\"), (tmp -= 12) < 10 ? (maskset.buffer[pos] = tmp.toString(), maskset.buffer[pos - 1] = \"0\") : (maskset.buffer[pos] = tmp.toString().charAt(1), maskset.buffer[pos - 1] = tmp.toString().charAt(0)), {\n                  refreshFromBuffer: {\n                    start: pos - 1,\n                    end: pos + 6\n                  },\n                  c: maskset.buffer[pos]\n                };\n              }\n\n              return isValid;\n            },\n            cardinality: 2,\n            prevalidator: [{\n              validator: function validator(chrs, maskset, pos, strict, opts) {\n                var isValid = opts.regex.hrspre.test(chrs);\n                return strict || isValid || !(isValid = opts.regex.hrs.test(\"0\" + chrs)) ? isValid : (maskset.buffer[pos] = \"0\", pos++, {\n                  pos: pos\n                });\n              },\n              cardinality: 1\n            }]\n          },\n          s: {\n            validator: \"[0-5][0-9]\",\n            cardinality: 2,\n            prevalidator: [{\n              validator: function validator(chrs, maskset, pos, strict, opts) {\n                var isValid = opts.regex.mspre.test(chrs);\n                return strict || isValid || !(isValid = opts.regex.ms.test(\"0\" + chrs)) ? isValid : (maskset.buffer[pos] = \"0\", pos++, {\n                  pos: pos\n                });\n              },\n              cardinality: 1\n            }]\n          },\n          t: {\n            validator: function validator(chrs, maskset, pos, strict, opts) {\n              return opts.regex.ampm.test(chrs + \"m\");\n            },\n            casing: \"lower\",\n            cardinality: 1\n          }\n        },\n        insertMode: !1,\n        autoUnmask: !1\n      },\n      datetime12: {\n        mask: \"1/2/y h:s t\\\\m\",\n        placeholder: \"dd/mm/yyyy hh:mm xm\",\n        alias: \"datetime\",\n        hourFormat: \"12\"\n      },\n      \"mm/dd/yyyy hh:mm xm\": {\n        mask: \"1/2/y h:s t\\\\m\",\n        placeholder: \"mm/dd/yyyy hh:mm xm\",\n        alias: \"datetime12\",\n        regex: {\n          val2pre: function val2pre(separator) {\n            var escapedSeparator = Inputmask.escapeRegex.call(this, separator);\n            return new RegExp(\"((0[13-9]|1[012])\" + escapedSeparator + \"[0-3])|(02\" + escapedSeparator + \"[0-2])\");\n          },\n          val2: function val2(separator) {\n            var escapedSeparator = Inputmask.escapeRegex.call(this, separator);\n            return new RegExp(\"((0[1-9]|1[012])\" + escapedSeparator + \"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])\" + escapedSeparator + \"30)|((0[13578]|1[02])\" + escapedSeparator + \"31)\");\n          },\n          val1pre: new RegExp(\"[01]\"),\n          val1: new RegExp(\"0[1-9]|1[012]\")\n        },\n        leapday: \"02/29/\",\n        onKeyDown: function onKeyDown(e, buffer, caretPos, opts) {\n          var $input = $(this);\n\n          if (e.ctrlKey && e.keyCode === Inputmask.keyCode.RIGHT) {\n            var today = new Date();\n            $input.val((today.getMonth() + 1).toString() + today.getDate().toString() + today.getFullYear().toString()), $input.trigger(\"setvalue\");\n          }\n        }\n      },\n      \"hh:mm t\": {\n        mask: \"h:s t\\\\m\",\n        placeholder: \"hh:mm xm\",\n        alias: \"datetime\",\n        hourFormat: \"12\"\n      },\n      \"h:s t\": {\n        mask: \"h:s t\\\\m\",\n        placeholder: \"hh:mm xm\",\n        alias: \"datetime\",\n        hourFormat: \"12\"\n      },\n      \"hh:mm:ss\": {\n        mask: \"h:s:s\",\n        placeholder: \"hh:mm:ss\",\n        alias: \"datetime\",\n        autoUnmask: !1\n      },\n      \"hh:mm\": {\n        mask: \"h:s\",\n        placeholder: \"hh:mm\",\n        alias: \"datetime\",\n        autoUnmask: !1\n      },\n      date: {\n        alias: \"dd/mm/yyyy\"\n      },\n      \"mm/yyyy\": {\n        mask: \"1/y\",\n        placeholder: \"mm/yyyy\",\n        leapday: \"donotuse\",\n        separator: \"/\",\n        alias: \"mm/dd/yyyy\"\n      },\n      shamsi: {\n        regex: {\n          val2pre: function val2pre(separator) {\n            var escapedSeparator = Inputmask.escapeRegex.call(this, separator);\n            return new RegExp(\"((0[1-9]|1[012])\" + escapedSeparator + \"[0-3])\");\n          },\n          val2: function val2(separator) {\n            var escapedSeparator = Inputmask.escapeRegex.call(this, separator);\n            return new RegExp(\"((0[1-9]|1[012])\" + escapedSeparator + \"(0[1-9]|[12][0-9]))|((0[1-9]|1[012])\" + escapedSeparator + \"30)|((0[1-6])\" + escapedSeparator + \"31)\");\n          },\n          val1pre: new RegExp(\"[01]\"),\n          val1: new RegExp(\"0[1-9]|1[012]\")\n        },\n        yearrange: {\n          minyear: 1300,\n          maxyear: 1499\n        },\n        mask: \"y/1/2\",\n        leapday: \"/12/30\",\n        placeholder: \"yyyy/mm/dd\",\n        alias: \"mm/dd/yyyy\",\n        clearIncomplete: !0\n      },\n      \"yyyy-mm-dd hh:mm:ss\": {\n        mask: \"y-1-2 h:s:s\",\n        placeholder: \"yyyy-mm-dd hh:mm:ss\",\n        alias: \"datetime\",\n        separator: \"-\",\n        leapday: \"-02-29\",\n        regex: {\n          val2pre: function val2pre(separator) {\n            var escapedSeparator = Inputmask.escapeRegex.call(this, separator);\n            return new RegExp(\"((0[13-9]|1[012])\" + escapedSeparator + \"[0-3])|(02\" + escapedSeparator + \"[0-2])\");\n          },\n          val2: function val2(separator) {\n            var escapedSeparator = Inputmask.escapeRegex.call(this, separator);\n            return new RegExp(\"((0[1-9]|1[012])\" + escapedSeparator + \"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])\" + escapedSeparator + \"30)|((0[13578]|1[02])\" + escapedSeparator + \"31)\");\n          },\n          val1pre: new RegExp(\"[01]\"),\n          val1: new RegExp(\"0[1-9]|1[012]\")\n        },\n        onKeyDown: function onKeyDown(e, buffer, caretPos, opts) {}\n      }\n    }), Inputmask;\n  });\n}, function (module, exports, __webpack_require__) {\n  \"use strict\";\n\n  var __WEBPACK_AMD_DEFINE_RESULT__;\n\n  \"function\" == typeof Symbol && Symbol.iterator;\n  void 0 !== (__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    return window;\n  }.call(exports, __webpack_require__, exports, module)) && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__);\n}, function (module, exports, __webpack_require__) {\n  \"use strict\";\n\n  var __WEBPACK_AMD_DEFINE_RESULT__;\n\n  \"function\" == typeof Symbol && Symbol.iterator;\n  void 0 !== (__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    return document;\n  }.call(exports, __webpack_require__, exports, module)) && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__);\n}, function (module, exports, __webpack_require__) {\n  \"use strict\";\n\n  var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n  \"function\" == typeof Symbol && Symbol.iterator;\n  !function (factory) {\n    __WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1)], void 0 !== (__WEBPACK_AMD_DEFINE_RESULT__ = \"function\" == typeof (__WEBPACK_AMD_DEFINE_FACTORY__ = factory) ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__) && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__);\n  }(function ($, Inputmask) {\n    return Inputmask.extendDefinitions({\n      A: {\n        validator: \"[A-Za-zА-яЁёÀ-ÿµ]\",\n        cardinality: 1,\n        casing: \"upper\"\n      },\n      \"&\": {\n        validator: \"[0-9A-Za-zА-яЁёÀ-ÿµ]\",\n        cardinality: 1,\n        casing: \"upper\"\n      },\n      \"#\": {\n        validator: \"[0-9A-Fa-f]\",\n        cardinality: 1,\n        casing: \"upper\"\n      }\n    }), Inputmask.extendAliases({\n      url: {\n        definitions: {\n          i: {\n            validator: \".\",\n            cardinality: 1\n          }\n        },\n        mask: \"(\\\\http://)|(\\\\http\\\\s://)|(ftp://)|(ftp\\\\s://)i{+}\",\n        insertMode: !1,\n        autoUnmask: !1,\n        inputmode: \"url\"\n      },\n      ip: {\n        mask: \"i[i[i]].i[i[i]].i[i[i]].i[i[i]]\",\n        definitions: {\n          i: {\n            validator: function validator(chrs, maskset, pos, strict, opts) {\n              return pos - 1 > -1 && \".\" !== maskset.buffer[pos - 1] ? (chrs = maskset.buffer[pos - 1] + chrs, chrs = pos - 2 > -1 && \".\" !== maskset.buffer[pos - 2] ? maskset.buffer[pos - 2] + chrs : \"0\" + chrs) : chrs = \"00\" + chrs, new RegExp(\"25[0-5]|2[0-4][0-9]|[01][0-9][0-9]\").test(chrs);\n            },\n            cardinality: 1\n          }\n        },\n        onUnMask: function onUnMask(maskedValue, unmaskedValue, opts) {\n          return maskedValue;\n        },\n        inputmode: \"numeric\"\n      },\n      email: {\n        mask: \"*{1,64}[.*{1,64}][.*{1,64}][.*{1,63}]@-{1,63}.-{1,63}[.-{1,63}][.-{1,63}]\",\n        greedy: !1,\n        onBeforePaste: function onBeforePaste(pastedValue, opts) {\n          return (pastedValue = pastedValue.toLowerCase()).replace(\"mailto:\", \"\");\n        },\n        definitions: {\n          \"*\": {\n            validator: \"[0-9A-Za-z!#$%&'*+/=?^_`{|}~-]\",\n            cardinality: 1,\n            casing: \"lower\"\n          },\n          \"-\": {\n            validator: \"[0-9A-Za-z-]\",\n            cardinality: 1,\n            casing: \"lower\"\n          }\n        },\n        onUnMask: function onUnMask(maskedValue, unmaskedValue, opts) {\n          return maskedValue;\n        },\n        inputmode: \"email\"\n      },\n      mac: {\n        mask: \"##:##:##:##:##:##\"\n      },\n      vin: {\n        mask: \"V{13}9{4}\",\n        definitions: {\n          V: {\n            validator: \"[A-HJ-NPR-Za-hj-npr-z\\\\d]\",\n            cardinality: 1,\n            casing: \"upper\"\n          }\n        },\n        clearIncomplete: !0,\n        autoUnmask: !0\n      }\n    }), Inputmask;\n  });\n}, function (module, exports, __webpack_require__) {\n  \"use strict\";\n\n  var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n  \"function\" == typeof Symbol && Symbol.iterator;\n  !function (factory) {\n    __WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1)], void 0 !== (__WEBPACK_AMD_DEFINE_RESULT__ = \"function\" == typeof (__WEBPACK_AMD_DEFINE_FACTORY__ = factory) ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__) && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__);\n  }(function ($, Inputmask, undefined) {\n    function autoEscape(txt, opts) {\n      for (var escapedTxt = \"\", i = 0; i < txt.length; i++) {\n        Inputmask.prototype.definitions[txt.charAt(i)] || opts.definitions[txt.charAt(i)] || opts.optionalmarker.start === txt.charAt(i) || opts.optionalmarker.end === txt.charAt(i) || opts.quantifiermarker.start === txt.charAt(i) || opts.quantifiermarker.end === txt.charAt(i) || opts.groupmarker.start === txt.charAt(i) || opts.groupmarker.end === txt.charAt(i) || opts.alternatormarker === txt.charAt(i) ? escapedTxt += \"\\\\\" + txt.charAt(i) : escapedTxt += txt.charAt(i);\n      }\n\n      return escapedTxt;\n    }\n\n    return Inputmask.extendAliases({\n      numeric: {\n        mask: function mask(opts) {\n          if (0 !== opts.repeat && isNaN(opts.integerDigits) && (opts.integerDigits = opts.repeat), opts.repeat = 0, opts.groupSeparator === opts.radixPoint && (\".\" === opts.radixPoint ? opts.groupSeparator = \",\" : \",\" === opts.radixPoint ? opts.groupSeparator = \".\" : opts.groupSeparator = \"\"), \" \" === opts.groupSeparator && (opts.skipOptionalPartCharacter = undefined), opts.autoGroup = opts.autoGroup && \"\" !== opts.groupSeparator, opts.autoGroup && (\"string\" == typeof opts.groupSize && isFinite(opts.groupSize) && (opts.groupSize = parseInt(opts.groupSize)), isFinite(opts.integerDigits))) {\n            var seps = Math.floor(opts.integerDigits / opts.groupSize),\n                mod = opts.integerDigits % opts.groupSize;\n            opts.integerDigits = parseInt(opts.integerDigits) + (0 === mod ? seps - 1 : seps), opts.integerDigits < 1 && (opts.integerDigits = \"*\");\n          }\n\n          opts.placeholder.length > 1 && (opts.placeholder = opts.placeholder.charAt(0)), \"radixFocus\" === opts.positionCaretOnClick && \"\" === opts.placeholder && !1 === opts.integerOptional && (opts.positionCaretOnClick = \"lvp\"), opts.definitions[\";\"] = opts.definitions[\"~\"], opts.definitions[\";\"].definitionSymbol = \"~\", !0 === opts.numericInput && (opts.positionCaretOnClick = \"radixFocus\" === opts.positionCaretOnClick ? \"lvp\" : opts.positionCaretOnClick, opts.digitsOptional = !1, isNaN(opts.digits) && (opts.digits = 2), opts.decimalProtect = !1);\n          var mask = \"[+]\";\n\n          if (mask += autoEscape(opts.prefix, opts), !0 === opts.integerOptional ? mask += \"~{1,\" + opts.integerDigits + \"}\" : mask += \"~{\" + opts.integerDigits + \"}\", opts.digits !== undefined) {\n            opts.radixPointDefinitionSymbol = opts.decimalProtect ? \":\" : opts.radixPoint;\n            var dq = opts.digits.toString().split(\",\");\n            isFinite(dq[0] && dq[1] && isFinite(dq[1])) ? mask += opts.radixPointDefinitionSymbol + \";{\" + opts.digits + \"}\" : (isNaN(opts.digits) || parseInt(opts.digits) > 0) && (opts.digitsOptional ? mask += \"[\" + opts.radixPointDefinitionSymbol + \";{1,\" + opts.digits + \"}]\" : mask += opts.radixPointDefinitionSymbol + \";{\" + opts.digits + \"}\");\n          }\n\n          return mask += autoEscape(opts.suffix, opts), mask += \"[-]\", opts.greedy = !1, mask;\n        },\n        placeholder: \"\",\n        greedy: !1,\n        digits: \"*\",\n        digitsOptional: !0,\n        enforceDigitsOnBlur: !1,\n        radixPoint: \".\",\n        positionCaretOnClick: \"radixFocus\",\n        groupSize: 3,\n        groupSeparator: \"\",\n        autoGroup: !1,\n        allowMinus: !0,\n        negationSymbol: {\n          front: \"-\",\n          back: \"\"\n        },\n        integerDigits: \"+\",\n        integerOptional: !0,\n        prefix: \"\",\n        suffix: \"\",\n        rightAlign: !0,\n        decimalProtect: !0,\n        min: null,\n        max: null,\n        step: 1,\n        insertMode: !0,\n        autoUnmask: !1,\n        unmaskAsNumber: !1,\n        inputmode: \"numeric\",\n        preValidation: function preValidation(buffer, pos, c, isSelection, opts) {\n          if (\"-\" === c || c === opts.negationSymbol.front) return !0 === opts.allowMinus && (opts.isNegative = opts.isNegative === undefined || !opts.isNegative, \"\" === buffer.join(\"\") || {\n            caret: pos,\n            dopost: !0\n          });\n\n          if (!1 === isSelection && c === opts.radixPoint && opts.digits !== undefined && (isNaN(opts.digits) || parseInt(opts.digits) > 0)) {\n            var radixPos = $.inArray(opts.radixPoint, buffer);\n            if (-1 !== radixPos) return !0 === opts.numericInput ? pos === radixPos : {\n              caret: radixPos + 1\n            };\n          }\n\n          return !0;\n        },\n        postValidation: function postValidation(buffer, currentResult, opts) {\n          var suffix = opts.suffix.split(\"\"),\n              prefix = opts.prefix.split(\"\");\n          if (currentResult.pos === undefined && currentResult.caret !== undefined && !0 !== currentResult.dopost) return currentResult;\n          var caretPos = currentResult.caret !== undefined ? currentResult.caret : currentResult.pos,\n              maskedValue = buffer.slice();\n          opts.numericInput && (caretPos = maskedValue.length - caretPos - 1, maskedValue = maskedValue.reverse());\n          var charAtPos = maskedValue[caretPos];\n          if (charAtPos === opts.groupSeparator && (charAtPos = maskedValue[caretPos += 1]), caretPos === maskedValue.length - opts.suffix.length - 1 && charAtPos === opts.radixPoint) return currentResult;\n          charAtPos !== undefined && charAtPos !== opts.radixPoint && charAtPos !== opts.negationSymbol.front && charAtPos !== opts.negationSymbol.back && (maskedValue[caretPos] = \"?\", opts.prefix.length > 0 && caretPos >= (!1 === opts.isNegative ? 1 : 0) && caretPos < opts.prefix.length - 1 + (!1 === opts.isNegative ? 1 : 0) ? prefix[caretPos - (!1 === opts.isNegative ? 1 : 0)] = \"?\" : opts.suffix.length > 0 && caretPos >= maskedValue.length - opts.suffix.length - (!1 === opts.isNegative ? 1 : 0) && (suffix[caretPos - (maskedValue.length - opts.suffix.length - (!1 === opts.isNegative ? 1 : 0))] = \"?\")), prefix = prefix.join(\"\"), suffix = suffix.join(\"\");\n          var processValue = maskedValue.join(\"\").replace(prefix, \"\");\n\n          if (processValue = processValue.replace(suffix, \"\"), processValue = processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator), \"g\"), \"\"), processValue = processValue.replace(new RegExp(\"[-\" + Inputmask.escapeRegex(opts.negationSymbol.front) + \"]\", \"g\"), \"\"), processValue = processValue.replace(new RegExp(Inputmask.escapeRegex(opts.negationSymbol.back) + \"$\"), \"\"), isNaN(opts.placeholder) && (processValue = processValue.replace(new RegExp(Inputmask.escapeRegex(opts.placeholder), \"g\"), \"\")), processValue.length > 1 && 1 !== processValue.indexOf(opts.radixPoint) && (\"0\" === charAtPos && (processValue = processValue.replace(/^\\?/g, \"\")), processValue = processValue.replace(/^0/g, \"\")), processValue.charAt(0) === opts.radixPoint && \"\" !== opts.radixPoint && !0 !== opts.numericInput && (processValue = \"0\" + processValue), \"\" !== processValue) {\n            if (processValue = processValue.split(\"\"), (!opts.digitsOptional || opts.enforceDigitsOnBlur && \"blur\" === currentResult.event) && isFinite(opts.digits)) {\n              var radixPosition = $.inArray(opts.radixPoint, processValue),\n                  rpb = $.inArray(opts.radixPoint, maskedValue);\n              -1 === radixPosition && (processValue.push(opts.radixPoint), radixPosition = processValue.length - 1);\n\n              for (var i = 1; i <= opts.digits; i++) {\n                opts.digitsOptional && (!opts.enforceDigitsOnBlur || \"blur\" !== currentResult.event) || processValue[radixPosition + i] !== undefined && processValue[radixPosition + i] !== opts.placeholder.charAt(0) ? -1 !== rpb && maskedValue[rpb + i] !== undefined && (processValue[radixPosition + i] = processValue[radixPosition + i] || maskedValue[rpb + i]) : processValue[radixPosition + i] = currentResult.placeholder || opts.placeholder.charAt(0);\n              }\n            }\n\n            if (!0 !== opts.autoGroup || \"\" === opts.groupSeparator || charAtPos === opts.radixPoint && currentResult.pos === undefined && !currentResult.dopost) processValue = processValue.join(\"\");else {\n              var addRadix = processValue[processValue.length - 1] === opts.radixPoint && currentResult.c === opts.radixPoint;\n              processValue = Inputmask(function (buffer, opts) {\n                var postMask = \"\";\n\n                if (postMask += \"(\" + opts.groupSeparator + \"*{\" + opts.groupSize + \"}){*}\", \"\" !== opts.radixPoint) {\n                  var radixSplit = buffer.join(\"\").split(opts.radixPoint);\n                  radixSplit[1] && (postMask += opts.radixPoint + \"*{\" + radixSplit[1].match(/^\\d*\\??\\d*/)[0].length + \"}\");\n                }\n\n                return postMask;\n              }(processValue, opts), {\n                numericInput: !0,\n                jitMasking: !0,\n                definitions: {\n                  \"*\": {\n                    validator: \"[0-9?]\",\n                    cardinality: 1\n                  }\n                }\n              }).format(processValue.join(\"\")), addRadix && (processValue += opts.radixPoint), processValue.charAt(0) === opts.groupSeparator && processValue.substr(1);\n            }\n          }\n\n          if (opts.isNegative && \"blur\" === currentResult.event && (opts.isNegative = \"0\" !== processValue), processValue = prefix + processValue, processValue += suffix, opts.isNegative && (processValue = opts.negationSymbol.front + processValue, processValue += opts.negationSymbol.back), processValue = processValue.split(\"\"), charAtPos !== undefined) if (charAtPos !== opts.radixPoint && charAtPos !== opts.negationSymbol.front && charAtPos !== opts.negationSymbol.back) (caretPos = $.inArray(\"?\", processValue)) > -1 ? processValue[caretPos] = charAtPos : caretPos = currentResult.caret || 0;else if (charAtPos === opts.radixPoint || charAtPos === opts.negationSymbol.front || charAtPos === opts.negationSymbol.back) {\n            var newCaretPos = $.inArray(charAtPos, processValue);\n            -1 !== newCaretPos && (caretPos = newCaretPos);\n          }\n          opts.numericInput && (caretPos = processValue.length - caretPos - 1, processValue = processValue.reverse());\n          var rslt = {\n            caret: charAtPos === undefined || currentResult.pos !== undefined ? caretPos + (opts.numericInput ? -1 : 1) : caretPos,\n            buffer: processValue,\n            refreshFromBuffer: currentResult.dopost || buffer.join(\"\") !== processValue.join(\"\")\n          };\n          return rslt.refreshFromBuffer ? rslt : currentResult;\n        },\n        onBeforeWrite: function onBeforeWrite(e, buffer, caretPos, opts) {\n          if (e) switch (e.type) {\n            case \"keydown\":\n              return opts.postValidation(buffer, {\n                caret: caretPos,\n                dopost: !0\n              }, opts);\n\n            case \"blur\":\n            case \"checkval\":\n              var unmasked;\n\n              if (function (opts) {\n                opts.parseMinMaxOptions === undefined && (null !== opts.min && (opts.min = opts.min.toString().replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator), \"g\"), \"\"), \",\" === opts.radixPoint && (opts.min = opts.min.replace(opts.radixPoint, \".\")), opts.min = isFinite(opts.min) ? parseFloat(opts.min) : NaN, isNaN(opts.min) && (opts.min = Number.MIN_VALUE)), null !== opts.max && (opts.max = opts.max.toString().replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator), \"g\"), \"\"), \",\" === opts.radixPoint && (opts.max = opts.max.replace(opts.radixPoint, \".\")), opts.max = isFinite(opts.max) ? parseFloat(opts.max) : NaN, isNaN(opts.max) && (opts.max = Number.MAX_VALUE)), opts.parseMinMaxOptions = \"done\");\n              }(opts), null !== opts.min || null !== opts.max) {\n                if (unmasked = opts.onUnMask(buffer.join(\"\"), undefined, $.extend({}, opts, {\n                  unmaskAsNumber: !0\n                })), null !== opts.min && unmasked < opts.min) return opts.isNegative = opts.min < 0, opts.postValidation(opts.min.toString().replace(\".\", opts.radixPoint).split(\"\"), {\n                  caret: caretPos,\n                  dopost: !0,\n                  placeholder: \"0\"\n                }, opts);\n                if (null !== opts.max && unmasked > opts.max) return opts.isNegative = opts.max < 0, opts.postValidation(opts.max.toString().replace(\".\", opts.radixPoint).split(\"\"), {\n                  caret: caretPos,\n                  dopost: !0,\n                  placeholder: \"0\"\n                }, opts);\n              }\n\n              return opts.postValidation(buffer, {\n                caret: caretPos,\n                placeholder: \"0\",\n                event: \"blur\"\n              }, opts);\n\n            case \"_checkval\":\n              return {\n                caret: caretPos\n              };\n          }\n        },\n        regex: {\n          integerPart: function integerPart(opts, emptyCheck) {\n            return emptyCheck ? new RegExp(\"[\" + Inputmask.escapeRegex(opts.negationSymbol.front) + \"+]?\") : new RegExp(\"[\" + Inputmask.escapeRegex(opts.negationSymbol.front) + \"+]?\\\\d+\");\n          },\n          integerNPart: function integerNPart(opts) {\n            return new RegExp(\"[\\\\d\" + Inputmask.escapeRegex(opts.groupSeparator) + Inputmask.escapeRegex(opts.placeholder.charAt(0)) + \"]+\");\n          }\n        },\n        definitions: {\n          \"~\": {\n            validator: function validator(chrs, maskset, pos, strict, opts, isSelection) {\n              var isValid = strict ? new RegExp(\"[0-9\" + Inputmask.escapeRegex(opts.groupSeparator) + \"]\").test(chrs) : new RegExp(\"[0-9]\").test(chrs);\n\n              if (!0 === isValid) {\n                if (!0 !== opts.numericInput && maskset.validPositions[pos] !== undefined && \"~\" === maskset.validPositions[pos].match.def && !isSelection) {\n                  var processValue = maskset.buffer.join(\"\"),\n                      pvRadixSplit = (processValue = (processValue = processValue.replace(new RegExp(\"[-\" + Inputmask.escapeRegex(opts.negationSymbol.front) + \"]\", \"g\"), \"\")).replace(new RegExp(Inputmask.escapeRegex(opts.negationSymbol.back) + \"$\"), \"\")).split(opts.radixPoint);\n                  pvRadixSplit.length > 1 && (pvRadixSplit[1] = pvRadixSplit[1].replace(/0/g, opts.placeholder.charAt(0))), \"0\" === pvRadixSplit[0] && (pvRadixSplit[0] = pvRadixSplit[0].replace(/0/g, opts.placeholder.charAt(0))), processValue = pvRadixSplit[0] + opts.radixPoint + pvRadixSplit[1] || \"\";\n\n                  var bufferTemplate = maskset._buffer.join(\"\");\n\n                  for (processValue === opts.radixPoint && (processValue = bufferTemplate); null === processValue.match(Inputmask.escapeRegex(bufferTemplate) + \"$\");) {\n                    bufferTemplate = bufferTemplate.slice(1);\n                  }\n\n                  isValid = (processValue = (processValue = processValue.replace(bufferTemplate, \"\")).split(\"\"))[pos] === undefined ? {\n                    pos: pos,\n                    remove: pos\n                  } : {\n                    pos: pos\n                  };\n                }\n              } else strict || chrs !== opts.radixPoint || maskset.validPositions[pos - 1] !== undefined || (maskset.buffer[pos] = \"0\", isValid = {\n                pos: pos + 1\n              });\n\n              return isValid;\n            },\n            cardinality: 1\n          },\n          \"+\": {\n            validator: function validator(chrs, maskset, pos, strict, opts) {\n              return opts.allowMinus && (\"-\" === chrs || chrs === opts.negationSymbol.front);\n            },\n            cardinality: 1,\n            placeholder: \"\"\n          },\n          \"-\": {\n            validator: function validator(chrs, maskset, pos, strict, opts) {\n              return opts.allowMinus && chrs === opts.negationSymbol.back;\n            },\n            cardinality: 1,\n            placeholder: \"\"\n          },\n          \":\": {\n            validator: function validator(chrs, maskset, pos, strict, opts) {\n              var radix = \"[\" + Inputmask.escapeRegex(opts.radixPoint) + \"]\",\n                  isValid = new RegExp(radix).test(chrs);\n              return isValid && maskset.validPositions[pos] && maskset.validPositions[pos].match.placeholder === opts.radixPoint && (isValid = {\n                caret: pos + 1\n              }), isValid;\n            },\n            cardinality: 1,\n            placeholder: function placeholder(opts) {\n              return opts.radixPoint;\n            }\n          }\n        },\n        onUnMask: function onUnMask(maskedValue, unmaskedValue, opts) {\n          if (\"\" === unmaskedValue && !0 === opts.nullable) return unmaskedValue;\n          var processValue = maskedValue.replace(opts.prefix, \"\");\n          return processValue = processValue.replace(opts.suffix, \"\"), processValue = processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator), \"g\"), \"\"), \"\" !== opts.placeholder.charAt(0) && (processValue = processValue.replace(new RegExp(opts.placeholder.charAt(0), \"g\"), \"0\")), opts.unmaskAsNumber ? (\"\" !== opts.radixPoint && -1 !== processValue.indexOf(opts.radixPoint) && (processValue = processValue.replace(Inputmask.escapeRegex.call(this, opts.radixPoint), \".\")), processValue = processValue.replace(new RegExp(\"^\" + Inputmask.escapeRegex(opts.negationSymbol.front)), \"-\"), processValue = processValue.replace(new RegExp(Inputmask.escapeRegex(opts.negationSymbol.back) + \"$\"), \"\"), Number(processValue)) : processValue;\n        },\n        isComplete: function isComplete(buffer, opts) {\n          var maskedValue = buffer.join(\"\");\n          if (buffer.slice().join(\"\") !== maskedValue) return !1;\n          var processValue = maskedValue.replace(opts.prefix, \"\");\n          return processValue = processValue.replace(opts.suffix, \"\"), processValue = processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator), \"g\"), \"\"), \",\" === opts.radixPoint && (processValue = processValue.replace(Inputmask.escapeRegex(opts.radixPoint), \".\")), isFinite(processValue);\n        },\n        onBeforeMask: function onBeforeMask(initialValue, opts) {\n          if (opts.isNegative = undefined, initialValue = initialValue.toString().charAt(initialValue.length - 1) === opts.radixPoint ? initialValue.toString().substr(0, initialValue.length - 1) : initialValue.toString(), \"\" !== opts.radixPoint && isFinite(initialValue)) {\n            var vs = initialValue.split(\".\"),\n                groupSize = \"\" !== opts.groupSeparator ? parseInt(opts.groupSize) : 0;\n            2 === vs.length && (vs[0].length > groupSize || vs[1].length > groupSize || vs[0].length <= groupSize && vs[1].length < groupSize) && (initialValue = initialValue.replace(\".\", opts.radixPoint));\n          }\n\n          var kommaMatches = initialValue.match(/,/g),\n              dotMatches = initialValue.match(/\\./g);\n\n          if (initialValue = dotMatches && kommaMatches ? dotMatches.length > kommaMatches.length ? (initialValue = initialValue.replace(/\\./g, \"\")).replace(\",\", opts.radixPoint) : kommaMatches.length > dotMatches.length ? (initialValue = initialValue.replace(/,/g, \"\")).replace(\".\", opts.radixPoint) : initialValue.indexOf(\".\") < initialValue.indexOf(\",\") ? initialValue.replace(/\\./g, \"\") : initialValue.replace(/,/g, \"\") : initialValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator), \"g\"), \"\"), 0 === opts.digits && (-1 !== initialValue.indexOf(\".\") ? initialValue = initialValue.substring(0, initialValue.indexOf(\".\")) : -1 !== initialValue.indexOf(\",\") && (initialValue = initialValue.substring(0, initialValue.indexOf(\",\")))), \"\" !== opts.radixPoint && isFinite(opts.digits) && -1 !== initialValue.indexOf(opts.radixPoint)) {\n            var decPart = initialValue.split(opts.radixPoint)[1].match(new RegExp(\"\\\\d*\"))[0];\n\n            if (parseInt(opts.digits) < decPart.toString().length) {\n              var digitsFactor = Math.pow(10, parseInt(opts.digits));\n              initialValue = initialValue.replace(Inputmask.escapeRegex(opts.radixPoint), \".\"), initialValue = (initialValue = Math.round(parseFloat(initialValue) * digitsFactor) / digitsFactor).toString().replace(\".\", opts.radixPoint);\n            }\n          }\n\n          return initialValue;\n        },\n        canClearPosition: function canClearPosition(maskset, position, lvp, strict, opts) {\n          var vp = maskset.validPositions[position],\n              canClear = vp.input !== opts.radixPoint || null !== maskset.validPositions[position].match.fn && !1 === opts.decimalProtect || vp.input === opts.radixPoint && maskset.validPositions[position + 1] && null === maskset.validPositions[position + 1].match.fn || isFinite(vp.input) || position === lvp || vp.input === opts.groupSeparator || vp.input === opts.negationSymbol.front || vp.input === opts.negationSymbol.back;\n          return !canClear || \"+\" !== vp.match.nativeDef && \"-\" !== vp.match.nativeDef || (opts.isNegative = !1), canClear;\n        },\n        onKeyDown: function onKeyDown(e, buffer, caretPos, opts) {\n          var $input = $(this);\n          if (e.ctrlKey) switch (e.keyCode) {\n            case Inputmask.keyCode.UP:\n              $input.val(parseFloat(this.inputmask.unmaskedvalue()) + parseInt(opts.step)), $input.trigger(\"setvalue\");\n              break;\n\n            case Inputmask.keyCode.DOWN:\n              $input.val(parseFloat(this.inputmask.unmaskedvalue()) - parseInt(opts.step)), $input.trigger(\"setvalue\");\n          }\n        }\n      },\n      currency: {\n        prefix: \"$ \",\n        groupSeparator: \",\",\n        alias: \"numeric\",\n        placeholder: \"0\",\n        autoGroup: !0,\n        digits: 2,\n        digitsOptional: !1,\n        clearMaskOnLostFocus: !1\n      },\n      decimal: {\n        alias: \"numeric\"\n      },\n      integer: {\n        alias: \"numeric\",\n        digits: 0,\n        radixPoint: \"\"\n      },\n      percentage: {\n        alias: \"numeric\",\n        digits: 2,\n        digitsOptional: !0,\n        radixPoint: \".\",\n        placeholder: \"0\",\n        autoGroup: !1,\n        min: 0,\n        max: 100,\n        suffix: \" %\",\n        allowMinus: !1\n      }\n    }), Inputmask;\n  });\n}, function (module, exports, __webpack_require__) {\n  \"use strict\";\n\n  var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n  \"function\" == typeof Symbol && Symbol.iterator;\n  !function (factory) {\n    __WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1)], void 0 !== (__WEBPACK_AMD_DEFINE_RESULT__ = \"function\" == typeof (__WEBPACK_AMD_DEFINE_FACTORY__ = factory) ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__) && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__);\n  }(function ($, Inputmask) {\n    function maskSort(a, b) {\n      var maska = (a.mask || a).replace(/#/g, \"9\").replace(/\\)/, \"9\").replace(/[+()#-]/g, \"\"),\n          maskb = (b.mask || b).replace(/#/g, \"9\").replace(/\\)/, \"9\").replace(/[+()#-]/g, \"\"),\n          maskas = (a.mask || a).split(\"#\")[0],\n          maskbs = (b.mask || b).split(\"#\")[0];\n      return 0 === maskbs.indexOf(maskas) ? -1 : 0 === maskas.indexOf(maskbs) ? 1 : maska.localeCompare(maskb);\n    }\n\n    var analyseMaskBase = Inputmask.prototype.analyseMask;\n    return Inputmask.prototype.analyseMask = function (mask, regexMask, opts) {\n      function reduceVariations(masks, previousVariation, previousmaskGroup) {\n        previousVariation = previousVariation || \"\", previousmaskGroup = previousmaskGroup || maskGroups, \"\" !== previousVariation && (previousmaskGroup[previousVariation] = {});\n\n        for (var variation = \"\", maskGroup = previousmaskGroup[previousVariation] || previousmaskGroup, i = masks.length - 1; i >= 0; i--) {\n          maskGroup[variation = (mask = masks[i].mask || masks[i]).substr(0, 1)] = maskGroup[variation] || [], maskGroup[variation].unshift(mask.substr(1)), masks.splice(i, 1);\n        }\n\n        for (var ndx in maskGroup) {\n          maskGroup[ndx].length > 500 && reduceVariations(maskGroup[ndx].slice(), ndx, maskGroup);\n        }\n      }\n\n      function rebuild(maskGroup) {\n        var mask = \"\",\n            submasks = [];\n\n        for (var ndx in maskGroup) {\n          $.isArray(maskGroup[ndx]) ? 1 === maskGroup[ndx].length ? submasks.push(ndx + maskGroup[ndx]) : submasks.push(ndx + opts.groupmarker.start + maskGroup[ndx].join(opts.groupmarker.end + opts.alternatormarker + opts.groupmarker.start) + opts.groupmarker.end) : submasks.push(ndx + rebuild(maskGroup[ndx]));\n        }\n\n        return 1 === submasks.length ? mask += submasks[0] : mask += opts.groupmarker.start + submasks.join(opts.groupmarker.end + opts.alternatormarker + opts.groupmarker.start) + opts.groupmarker.end, mask;\n      }\n\n      var maskGroups = {};\n      return opts.phoneCodes && (opts.phoneCodes && opts.phoneCodes.length > 1e3 && (reduceVariations((mask = mask.substr(1, mask.length - 2)).split(opts.groupmarker.end + opts.alternatormarker + opts.groupmarker.start)), mask = rebuild(maskGroups)), mask = mask.replace(/9/g, \"\\\\9\")), analyseMaskBase.call(this, mask, regexMask, opts);\n    }, Inputmask.extendAliases({\n      abstractphone: {\n        groupmarker: {\n          start: \"<\",\n          end: \">\"\n        },\n        countrycode: \"\",\n        phoneCodes: [],\n        mask: function mask(opts) {\n          return opts.definitions = {\n            \"#\": Inputmask.prototype.definitions[9]\n          }, opts.phoneCodes.sort(maskSort);\n        },\n        keepStatic: !0,\n        onBeforeMask: function onBeforeMask(value, opts) {\n          var processedValue = value.replace(/^0{1,2}/, \"\").replace(/[\\s]/g, \"\");\n          return (processedValue.indexOf(opts.countrycode) > 1 || -1 === processedValue.indexOf(opts.countrycode)) && (processedValue = \"+\" + opts.countrycode + processedValue), processedValue;\n        },\n        onUnMask: function onUnMask(maskedValue, unmaskedValue, opts) {\n          return maskedValue.replace(/[()#-]/g, \"\");\n        },\n        inputmode: \"tel\"\n      }\n    }), Inputmask;\n  });\n}, function (module, exports, __webpack_require__) {\n  \"use strict\";\n\n  var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n  \"function\" == typeof Symbol && Symbol.iterator;\n  !function (factory) {\n    __WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0), __webpack_require__(1)], void 0 !== (__WEBPACK_AMD_DEFINE_RESULT__ = \"function\" == typeof (__WEBPACK_AMD_DEFINE_FACTORY__ = factory) ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__) && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__);\n  }(function ($, Inputmask) {\n    return Inputmask.extendAliases({\n      Regex: {\n        mask: \"r\",\n        greedy: !1,\n        repeat: \"*\",\n        regex: null,\n        regexTokens: null,\n        tokenizer: /\\[\\^?]?(?:[^\\\\\\]]+|\\\\[\\S\\s]?)*]?|\\\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\\S\\s]?)|\\((?:\\?[:=!]?)?|(?:[?*+]|\\{[0-9]+(?:,[0-9]*)?\\})\\??|[^.?*+^${[()|\\\\]+|./g,\n        quantifierFilter: /[0-9]+[^,]/,\n        isComplete: function isComplete(buffer, opts) {\n          return new RegExp(opts.regex, opts.casing ? \"i\" : \"\").test(buffer.join(\"\"));\n        },\n        definitions: {\n          r: {\n            validator: function validator(chrs, maskset, pos, strict, opts) {\n              function RegexToken(isGroup, isQuantifier) {\n                this.matches = [], this.isGroup = isGroup || !1, this.isQuantifier = isQuantifier || !1, this.quantifier = {\n                  min: 1,\n                  max: 1\n                }, this.repeaterPart = void 0;\n              }\n\n              function validateRegexToken(token, fromGroup) {\n                var isvalid = !1;\n                fromGroup && (regexPart += \"(\", openGroupCount++);\n\n                for (var mndx = 0; mndx < token.matches.length; mndx++) {\n                  var matchToken = token.matches[mndx];\n                  if (!0 === matchToken.isGroup) isvalid = validateRegexToken(matchToken, !0);else if (!0 === matchToken.isQuantifier) {\n                    var crrntndx = $.inArray(matchToken, token.matches),\n                        matchGroup = token.matches[crrntndx - 1],\n                        regexPartBak = regexPart;\n\n                    if (isNaN(matchToken.quantifier.max)) {\n                      for (; matchToken.repeaterPart && matchToken.repeaterPart !== regexPart && matchToken.repeaterPart.length > regexPart.length && !(isvalid = validateRegexToken(matchGroup, !0));) {\n                        ;\n                      }\n\n                      (isvalid = isvalid || validateRegexToken(matchGroup, !0)) && (matchToken.repeaterPart = regexPart), regexPart = regexPartBak + matchToken.quantifier.max;\n                    } else {\n                      for (var i = 0, qm = matchToken.quantifier.max - 1; i < qm && !(isvalid = validateRegexToken(matchGroup, !0)); i++) {\n                        ;\n                      }\n\n                      regexPart = regexPartBak + \"{\" + matchToken.quantifier.min + \",\" + matchToken.quantifier.max + \"}\";\n                    }\n                  } else if (void 0 !== matchToken.matches) for (var k = 0; k < matchToken.length && !(isvalid = validateRegexToken(matchToken[k], fromGroup)); k++) {\n                    ;\n                  } else {\n                    var testExp;\n\n                    if (\"[\" == matchToken.charAt(0)) {\n                      testExp = regexPart, testExp += matchToken;\n\n                      for (j = 0; j < openGroupCount; j++) {\n                        testExp += \")\";\n                      }\n\n                      isvalid = (exp = new RegExp(\"^(\" + testExp + \")$\", opts.casing ? \"i\" : \"\")).test(bufferStr);\n                    } else for (var l = 0, tl = matchToken.length; l < tl; l++) {\n                      if (\"\\\\\" !== matchToken.charAt(l)) {\n                        testExp = regexPart, testExp = (testExp += matchToken.substr(0, l + 1)).replace(/\\|$/, \"\");\n\n                        for (var j = 0; j < openGroupCount; j++) {\n                          testExp += \")\";\n                        }\n\n                        var exp = new RegExp(\"^(\" + testExp + \")$\", opts.casing ? \"i\" : \"\");\n                        if (isvalid = exp.test(bufferStr)) break;\n                      }\n                    }\n\n                    regexPart += matchToken;\n                  }\n                  if (isvalid) break;\n                }\n\n                return fromGroup && (regexPart += \")\", openGroupCount--), isvalid;\n              }\n\n              var bufferStr,\n                  groupToken,\n                  cbuffer = maskset.buffer.slice(),\n                  regexPart = \"\",\n                  isValid = !1,\n                  openGroupCount = 0;\n              null === opts.regexTokens && function () {\n                var match,\n                    m,\n                    currentToken = new RegexToken(),\n                    opengroups = [];\n\n                for (opts.regexTokens = []; match = opts.tokenizer.exec(opts.regex);) {\n                  switch ((m = match[0]).charAt(0)) {\n                    case \"(\":\n                      opengroups.push(new RegexToken(!0));\n                      break;\n\n                    case \")\":\n                      groupToken = opengroups.pop(), opengroups.length > 0 ? opengroups[opengroups.length - 1].matches.push(groupToken) : currentToken.matches.push(groupToken);\n                      break;\n\n                    case \"{\":\n                    case \"+\":\n                    case \"*\":\n                      var quantifierToken = new RegexToken(!1, !0),\n                          mq = (m = m.replace(/[{}]/g, \"\")).split(\",\"),\n                          mq0 = isNaN(mq[0]) ? mq[0] : parseInt(mq[0]),\n                          mq1 = 1 === mq.length ? mq0 : isNaN(mq[1]) ? mq[1] : parseInt(mq[1]);\n\n                      if (quantifierToken.quantifier = {\n                        min: mq0,\n                        max: mq1\n                      }, opengroups.length > 0) {\n                        var matches = opengroups[opengroups.length - 1].matches;\n                        (match = matches.pop()).isGroup || ((groupToken = new RegexToken(!0)).matches.push(match), match = groupToken), matches.push(match), matches.push(quantifierToken);\n                      } else (match = currentToken.matches.pop()).isGroup || ((groupToken = new RegexToken(!0)).matches.push(match), match = groupToken), currentToken.matches.push(match), currentToken.matches.push(quantifierToken);\n\n                      break;\n\n                    default:\n                      opengroups.length > 0 ? opengroups[opengroups.length - 1].matches.push(m) : currentToken.matches.push(m);\n                  }\n                }\n\n                currentToken.matches.length > 0 && opts.regexTokens.push(currentToken);\n              }(), cbuffer.splice(pos, 0, chrs), bufferStr = cbuffer.join(\"\");\n\n              for (var i = 0; i < opts.regexTokens.length; i++) {\n                var regexToken = opts.regexTokens[i];\n                if (isValid = validateRegexToken(regexToken, regexToken.isGroup)) break;\n              }\n\n              return isValid;\n            },\n            cardinality: 1\n          }\n        }\n      }\n    }), Inputmask;\n  });\n}, function (module, exports, __webpack_require__) {\n  \"use strict\";\n\n  var __WEBPACK_AMD_DEFINE_FACTORY__,\n      __WEBPACK_AMD_DEFINE_ARRAY__,\n      __WEBPACK_AMD_DEFINE_RESULT__,\n      _typeof = \"function\" == typeof Symbol && \"symbol\" == _typeof2(Symbol.iterator) ? function (obj) {\n    return _typeof2(obj);\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n  };\n\n  !function (factory) {\n    __WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2), __webpack_require__(1)], void 0 !== (__WEBPACK_AMD_DEFINE_RESULT__ = \"function\" == typeof (__WEBPACK_AMD_DEFINE_FACTORY__ = factory) ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__) && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__);\n  }(function ($, Inputmask) {\n    return void 0 === $.fn.inputmask && ($.fn.inputmask = function (fn, options) {\n      var nptmask,\n          input = this[0];\n      if (void 0 === options && (options = {}), \"string\" == typeof fn) switch (fn) {\n        case \"unmaskedvalue\":\n          return input && input.inputmask ? input.inputmask.unmaskedvalue() : $(input).val();\n\n        case \"remove\":\n          return this.each(function () {\n            this.inputmask && this.inputmask.remove();\n          });\n\n        case \"getemptymask\":\n          return input && input.inputmask ? input.inputmask.getemptymask() : \"\";\n\n        case \"hasMaskedValue\":\n          return !(!input || !input.inputmask) && input.inputmask.hasMaskedValue();\n\n        case \"isComplete\":\n          return !input || !input.inputmask || input.inputmask.isComplete();\n\n        case \"getmetadata\":\n          return input && input.inputmask ? input.inputmask.getmetadata() : void 0;\n\n        case \"setvalue\":\n          $(input).val(options), input && void 0 === input.inputmask && $(input).triggerHandler(\"setvalue\");\n          break;\n\n        case \"option\":\n          if (\"string\" != typeof options) return this.each(function () {\n            if (void 0 !== this.inputmask) return this.inputmask.option(options);\n          });\n          if (input && void 0 !== input.inputmask) return input.inputmask.option(options);\n          break;\n\n        default:\n          return options.alias = fn, nptmask = new Inputmask(options), this.each(function () {\n            nptmask.mask(this);\n          });\n      } else {\n        if (\"object\" == (void 0 === fn ? \"undefined\" : _typeof(fn))) return nptmask = new Inputmask(fn), void 0 === fn.mask && void 0 === fn.alias ? this.each(function () {\n          if (void 0 !== this.inputmask) return this.inputmask.option(fn);\n          nptmask.mask(this);\n        }) : this.each(function () {\n          nptmask.mask(this);\n        });\n        if (void 0 === fn) return this.each(function () {\n          (nptmask = new Inputmask(options)).mask(this);\n        });\n      }\n    }), $.fn.inputmask;\n  });\n}]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/jquery.inputmask.bundle.js\n");

/***/ }),

/***/ "./resources/js/main.js":
/*!******************************!*\
  !*** ./resources/js/main.js ***!
  \******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _upload_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./upload.js */ \"./resources/js/upload.js\");\n/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sweetalert2 */ \"./node_modules/sweetalert2/dist/sweetalert2.all.js\");\n/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_1__);\n// const { stubString, last } = require('lodash');\n__webpack_require__(/*! ./jquery.inputmask.bundle.js */ \"./resources/js/jquery.inputmask.bundle.js\");\n\n__webpack_require__(/*! sweetalert2 */ \"./node_modules/sweetalert2/dist/sweetalert2.all.js\");\n\n\n\n\nif ($('#gallery').attr('form') == 'add_product') {\n  Object(_upload_js__WEBPACK_IMPORTED_MODULE_0__[\"upload\"])('#gallery', {\n    multi: true,\n    accept: ['.png', '.jpg', '.jpeg', '.tiff', '.WebP', '.bat', '.jfif']\n  });\n}\n\nvar Toast = sweetalert2__WEBPACK_IMPORTED_MODULE_1___default.a.mixin({\n  toast: true,\n  position: 'top-center',\n  showConfirmButton: false,\n  timer: 2000,\n  didOpen: function didOpen(toast) {\n    toast.addEventListener('mouseenter', sweetalert2__WEBPACK_IMPORTED_MODULE_1___default.a.stopTimer);\n    toast.addEventListener('mouseleave', sweetalert2__WEBPACK_IMPORTED_MODULE_1___default.a.resumeTimer);\n  }\n});\n$('#listView').on('click', function () {\n  $('#catProducts .row').removeClass('row-cols-2').addClass('row-cols-1');\n  $('#gridView').removeClass('d-none');\n  $(this).addClass('d-none');\n  $('#catProducts .discription').removeClass('d-none');\n  $('#catProducts .card').addClass('flex-row');\n  $('#catProducts .card img').addClass('w-50');\n  $('#catProducts .row').attr('data-style', '2');\n});\n$('#gridView').on('click', function () {\n  $('#catProducts .row').attr('data-style', '1');\n  $('.card').find('img').removeClass('w-50');\n  $('#catProducts .card').removeClass('flex-row');\n  $('#catProducts .row').removeClass('row-cols-1').addClass('row-cols-2');\n  $('#listView').removeClass('d-none');\n  $(this).addClass('d-none');\n  $('#catProducts .discription').addClass('d-none');\n});\n$('.numeric').on('change keyup', function () {\n  var sanitized = $(this).val().replace(/[^0-9]/g, '');\n  $(this).val(sanitized);\n}); ///  products line\n\n$(document).ready(function () {\n  var url = $(location).attr('href');\n\n  if (url.indexOf('category') !== -1) {\n    var myFunction = function myFunction(x) {\n      if (x.matches) {\n        // If media query matches\n        for (var i = 1; i <= 2; i++) {\n          // выведет линию над первыми 2 элементами класса \".custom-lined\"\n          $('.custom-lined .col:nth-child(' + i + ') .card').addClass('position-relative line-test');\n        }\n      } else {\n        for (var _i = 1; _i <= 3; _i++) {\n          // выведет линию над первыми 3 элементами класса \".custom-lined\"\n          $('.custom-lined .col:nth-child(' + _i + ') .card').addClass('position-relative line-test');\n        }\n      }\n    };\n\n    var x = window.matchMedia('(max-width: 767px)');\n    myFunction(x); // Call listener function at run time\n\n    x.addListener(myFunction); // Attach listener function on state changes\n  } else {\n    var _myFunction = function _myFunction(x) {\n      if (x.matches) {\n        // If media query matches\n        for (var i = 1; i <= 2; i++) {\n          // выведет линию над первыми 2 элементами класса \".custom-lined\"\n          $('.custom-lined .col:nth-child(' + i + ') .card').addClass('position-relative line-test');\n        }\n      } else {\n        for (var _i2 = 1; _i2 <= 5; _i2++) {\n          // выведет линию над первыми 5 элементами класса \".custom-lined\"\n          $('.custom-lined .col:nth-child(' + _i2 + ') .card').addClass('position-relative line-test');\n        }\n      }\n    };\n\n    var x = window.matchMedia('(max-width: 767px)');\n\n    _myFunction(x); // Call listener function at run time\n\n\n    x.addListener(_myFunction); // Attach listener function on state changes\n  }\n}); /// products line end\n////===================aaaaaaaaaaaaaaaaaaaaaaaaaa===================//\n// $(function() {\n//     $(\"#galler\").change(function() {\n//         var fd = new FormData()\n//         var this_ = this\n//         fd.append('_token', $('meta[name=csrf-token]').attr(\"content\"));\n//         var files = $('#galler')[0].files;\n//         if (files.length > 0) {\n//             for (let i = 0; i < files.length; i++) {\n//                 fd.append('image', files[i]);\n//                 $.ajax({\n//                     url: '/uploadImage',\n//                     type: 'post',\n//                     data: fd,\n//                     contentType: false,\n//                     processData: false,\n//                     beforeSend: function() {\n//                         var x = $('#db-preview-image').find('.product_image[data-image=\"false\"]').first()\n//                         x.find('img').hide()\n//                         x.find('.spinner-border').removeClass('d-none')\n//                     },\n//                     success: function(response) {\n//                         var x = $('#db-preview-image').find('.product_image[data-image=\"false\"]').first()\n//                         x.find('.spinner-border').addClass('d-none')\n//                         x.html('').attr('data-image', 'true').append(`\n//                             <div class=\"profile-pic\">\n//                                 <img src=\"/storage/${response}\" data-image-src=\"${response}\" class=\"position-relative mw-100 pic-item\">\n//                                 <div class=\"deleteImage\"><i class=\"fa fa-trash fa-lg text-danger\"></i></div>\n//                             </div>\n//                     `)\n//                         let gallery = $('#gallery')\n//                         if (gallery.val() == '') {\n//                             gallery.val(gallery.val() + response)\n//                         } else {\n//                             gallery.val(gallery.val() + ',' + response)\n//                         }\n//                     },\n//                 });\n//             }\n//         } else {\n//             alert(\"Please select a file.\");\n//         }\n//     });\n// });\n// $('body').on('click', '.deleteImage', function() {\n//     let url = $(this).parent().find('img').data('image-src')\n//     let gallery = $('#gallery')\n//     let array = gallery.val().split(',')\n//     const index = array.indexOf(url)\n//     if (index > -1) {\n//         array.splice(index, 1);\n//     }\n//     gallery.val(array)\n//     $(this).parent().parent().remove()\n//     if (url.indexOf('products/edit/') !== -1) {\n//         $(this).parent().parent().parent().remove()\n//     } else {\n//         $(this).parent().parent().remove()\n//     }\n//     $('#db-preview-image').append(`\n//         <div class=\"col-3 text-center product_image d-flex justify-content-center align-items-center\" data-image=\"false\">\n//             <div class=\"spinner-border d-none\" role=\"status\">\n//                 <span class=\"sr-only\">Loading...</span>\n//             </div>\n//             <label for=\"galler\">\n//                 <img src=\"/storage/theme/avatar_gallery.svg\" class=\"px-0 btn mw-100 rounded gallery\"  alt=\"\">\n//             </label>\n//         </div>\n//     `)\n// })\n\nfunction throttle(f, delay) {\n  var timer = null;\n  return function () {\n    var context = this,\n        args = arguments;\n    clearTimeout(timer);\n    timer = window.setTimeout(function () {\n      f.apply(context, args);\n    }, delay || 2000);\n  };\n}\n\n$(document).ready(function () {\n  $('#nameStoreCreate').on('keyup', throttle(function () {\n    $('#storeSubmit').attr('disabled', true);\n    var store = $(this).val();\n\n    if (store.length >= 3) {\n      console.log(store);\n      $.get('/store/exist/' + store, function (data) {\n        if (data.exist) {\n          $('.store-exist').removeClass('d-none');\n          $('#storeSubmit').attr('disabled', true);\n        } else {\n          $('.store-exist').addClass('d-none');\n          $('#storeSubmit').attr('disabled', false);\n        }\n      });\n    }\n  }));\n  $('#nameEditStore').on('keyup', throttle(function () {\n    $('#storeEditSubmit').attr('disabled', true);\n    var store = $(this).val();\n\n    if (store != this.defaultValue) {\n      $.get('/store/exist/' + store, function (data) {\n        if (data.exist) {\n          $('.store-exist').removeClass('d-none');\n          $('#storeEditSubmit').attr('disabled', true);\n        } else {\n          $('.store-exist').addClass('d-none');\n          $('#storeEditSubmit').attr('disabled', false);\n        }\n      });\n    }\n  }));\n  $('.sms--false').hide();\n  $(window).scroll(fetchPosts);\n\n  function fetchPosts() {\n    var url = $(location).attr('href');\n    var page = $('.endless-pagination').data('next-page');\n\n    if (page !== null && page !== '') {\n      clearTimeout($.data(this, 'scrollCheck'));\n      $.data(this, 'scrollCheck', setTimeout(function () {\n        $('#scroll-spinner').toggleClass('d-none');\n        var scroll_position_for_posts_load = $(window).height() + $(window).scrollTop() + 100;\n\n        if (scroll_position_for_posts_load >= $(document).height()) {\n          var style = $('#catProducts .row').attr('data-style');\n          console.log(style);\n\n          if (url.indexOf('sort=') !== -1) {\n            var sort = url.split('?')[1];\n            $.get(page + '&' + sort, {\n              style: style\n            }, function (data) {\n              $('#scroll-spinner').toggleClass('d-none');\n              $('.endless-pagination').append(data.posts);\n              $('.endless-pagination').data('next-page', data.next_page + '&' + sort);\n            });\n          } else {\n            $.get(page, {\n              style: style\n            }, function (data) {\n              $('#scroll-spinner').toggleClass('d-none');\n              $('.endless-pagination').append(data.posts);\n              $('.endless-pagination').data('next-page', data.next_page);\n            });\n          }\n        }\n      }, 350));\n    }\n  }\n\n  $('.markets').slick({\n    dots: true,\n    infinite: false,\n    speed: 300,\n    slidesToShow: 6,\n    slidesToScroll: 6,\n    responsive: [{\n      breakpoint: 1024,\n      settings: {\n        slidesToShow: 4,\n        slidesToScroll: 4,\n        infinite: true,\n        dots: true\n      }\n    }, {\n      breakpoint: 600,\n      settings: {\n        slidesToShow: 3,\n        slidesToScroll: 3\n      }\n    }, {\n      breakpoint: 480,\n      settings: {\n        slidesToShow: 2,\n        slidesToScroll: 2\n      }\n    } // You can unslick at a given breakpoint now by adding:\n    // settings: \"unslick\"\n    // instead of a settings object\n    ]\n  });\n  $('#phone').inputmask({\n    mask: '999 99 9999',\n    placeholder: ' ',\n    showMaskOnHover: false,\n    showMaskOnFocus: false,\n    onBeforePaste: function onBeforePaste(pastedValue, opts) {\n      var processedValue = pastedValue; //do something with it\n\n      return processedValue;\n    }\n  });\n  $('#code').inputmask({\n    mask: '99999',\n    placeholder: '',\n    showMaskOnHover: false,\n    showMaskOnFocus: false,\n    onBeforePaste: function onBeforePaste(pastedValue, opts) {\n      var processedValue = pastedValue; //do something with it\n\n      return processedValue;\n    }\n  }); // const xl = $('#hello').val()\n  // console.log(JSON.parse(xl))\n\n  $('.count-products').each(function () {\n    var category = $(this).data('id');\n\n    var _this = $(this);\n\n    $.ajax({\n      url: '/countProducts',\n      data: {\n        category: category\n      },\n      method: 'GET',\n      dataType: 'json',\n      success: function success(data) {\n        if ([2, 3, 4].includes(data % 10)) {\n          _this.text(\"\".concat(data, \"  \\u0442\\u043E\\u0432\\u0430\\u0440\\u0430\"));\n        } else if (data % 10 == 1) {\n          _this.text(\"\".concat(data, \"  \\u0442\\u043E\\u0432\\u0430\\u0440\"));\n        } else {\n          _this.text(\"\".concat(data, \"  \\u0442\\u043E\\u0432\\u0430\\u0440\\u043E\\u0432\"));\n        }\n      }\n    });\n  });\n  var url = $(location).attr('href');\n\n  if (url.indexOf('sort=') !== -1) {\n    var sort = url.split('sort=')[1].split('&')[0];\n    var city = url.split('city=')[1].split('&')[0];\n\n    if (url.indexOf('priceFrom')) {\n      var priceFrom = url.split('priceFrom=')[1].split('&')[0];\n      $('#priceFrom').val(priceFrom);\n    }\n\n    if (url.indexOf('priceTo')) {\n      var priceTo = url.split('priceTo=')[1].split('&')[0];\n      $('#priceTo').val(priceTo);\n    }\n\n    $(\".sort[data-sort=\".concat(sort, \"]\")).attr('checked', true);\n    $(\".city[data-city=\".concat(city, \"]\")).attr('checked', true);\n  }\n\n  $('.att-show').on('click', function () {\n    $('.att-show').removeClass('active');\n    $(this).addClass('active');\n  });\n  var urlMobi = $(location).attr('href');\n\n  if (url.indexOf('sort=') !== -1) {\n    var sortMobi = urlMobi.split('sort=')[1].split('&')[0];\n    var cityMobi = urlMobi.split('city=')[1].split('&')[0];\n\n    if (urlMobi.indexOf('priceFromMobi')) {\n      var priceFromMobi = urlMobi.split('priceFromMobi=')[1].split('&')[0];\n      $('#priceFromMobi').val(priceFromMobi);\n    }\n\n    if (urlMobi.indexOf('priceToMobi')) {\n      var priceToMobi = urlMobi.split('priceToMobi=')[1].split('&')[0];\n      $('#priceToMobi').val(priceToMobi);\n    }\n\n    $(\".sort[data-sort=\".concat(sortMobi, \"]\")).attr('checked', true);\n    $(\".city[data-city=\".concat(cityMobi, \"]\")).attr('checked', true);\n  }\n\n  $('.att-show').on('click', function () {\n    $('.att-show').removeClass('active');\n    $(this).addClass('active');\n  });\n});\n$('body').on('click', '#filter', function () {\n  var cat_id = $(this).data('cat-id');\n  var cat_slug = $(this).data('cat-slug');\n  var sort = $(\"input[name='sort']:checked\").data('sort');\n  var city = $(\"input[name='city']:checked\").data('city');\n  var priceFrom = $('#priceFrom').val();\n  var priceTo = $('#priceTo').val();\n\n  if (priceFrom.length > 0 && priceTo.length == 0) {\n    window.location.href = '/category/' + cat_slug + '?sort=' + sort + '&city=' + city + '&priceFrom=' + priceFrom;\n  } else if (priceTo.length > 0 && priceFrom.length == 0) {\n    window.location.href = '/category/' + cat_slug + '?sort=' + sort + '&city=' + city + '&priceTo=' + priceTo;\n  } else if (priceFrom.length > 0 && priceTo.length > 0) {\n    window.location.href = '/category/' + cat_slug + '?sort=' + sort + '&city=' + city + '&priceFrom=' + priceFrom + '&priceTo=' + priceTo;\n  } else {\n    window.location.href = '/category/' + cat_slug + '?sort=' + sort + '&city=' + city;\n  }\n});\n$('body').on('click', '#filterMobi', function () {\n  var cat_idMobi = $(this).data('cat-id');\n  var cat_slugMobi = $(this).data('cat-slug');\n  var sortMobi = $(\"#mobile-Filter input[name='sort']:checked\").attr('data-sort');\n  var cityMobi = $(\"#mobile-Filter input[name='cityM']:checked\").attr('data-city');\n  var priceFromMobi = $('#priceFromMobi').val();\n  var priceToMobi = $('#priceToMobi').val();\n\n  if (priceFromMobi.length > 0 && priceToMobi.length == 0) {\n    window.location.href = '/category/' + cat_slugMobi + '?sort=' + sortMobi + '&city=' + cityMobi + '&priceFrom=' + priceFromMobi;\n  } else if (priceToMobi.length > 0 && priceFromMobi.length == 0) {\n    window.location.href = '/category/' + cat_slugMobi + '?sort=' + sortMobi + '&city=' + cityMobi + '&priceTo=' + priceToMobi;\n  } else if (priceFromMobi.length > 0 && priceToMobi.length > 0) {\n    window.location.href = '/category/' + cat_slugMobi + '?sort=' + sortMobi + '&cityi=' + cityMobi + '&priceFrom=' + priceFromMobi + '&priceTo=' + priceToMobi;\n  } else {\n    window.location.href = '/category/' + cat_slugMobi + '?sort=' + sortMobi + '&city=' + cityMobi;\n  }\n});\n$('body').on('click', '#prevCategory', function () {\n  $('#subcategories').hide();\n  $('#categories').show();\n});\n$('body').on('click', '.subcategory', function () {\n  $('#attributes').empty();\n  var category = $(this).data('slug');\n  window.location.href = '/category/' + category;\n});\n$(document).on('change', '#cat_parent', function () {\n  $('#attributes').empty();\n  var this_ = $(this);\n  var id = $('#cat_parent option:selected').val();\n  $.ajax({\n    url: '/getSubcategories',\n    data: {\n      category: id\n    },\n    method: 'GET',\n    dataType: 'json',\n    success: function success(data) {\n      $('#categories-row').empty();\n\n      if (data != '') {\n        $('#subCategories').empty();\n        this_.attr('name', 'parent_cat');\n        $('#categories-row').append(\"\\n                    <div id=\\\"subCategories\\\">\\n                        <div class=\\\"form-group d-flex flex-column flex-md-row mb-4 justify-content-start justify-content-md-end align-items-start align-items-md-center\\\">\\n                            <label for=\\\"cat_child\\\" class=\\\"input_caption mr-2 text-left text-md-right\\\">\\u041F\\u043E\\u0434-\\u043A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u0438:</label>\\n                            <div class=\\\"w-75 input_placeholder_style input-group  w-md-100\\\">\\n                                <div class=\\\"input-group-prepend position-relative\\\">\\n                                    <div class=\\\"input-group-text px-1  btn-custom-fs bg-white \\\"></div>\\n                                </div>\\n                                <select class=\\\"input_placeholder_style custom-select position-relative\\\" id=\\\"cat_child\\\" name=\\\"category_id\\\" required>\\n                                </select>\\n                            </div>\\n                        </div>\\n                    </div>\\n                \");\n        $('#cat_child').empty().append(\"\\n                    <option>\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043F\\u043E\\u0434-\\u043A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u044E</option>\\n                \");\n        $('#child_div').remove();\n        data.forEach(function (element) {\n          $('#cat_child').append(\"\\n                        <option value=\\\"\".concat(element['id'], \"\\\">\").concat(element['name'], \"</option>\\n                    \"));\n        });\n      } else {\n        this_.attr('name', 'category_id');\n      }\n    }\n  });\n});\n$(document).on('change', '[name=\"category_id\"]', function () {\n  var id = $('[name=\"category_id\"] option:selected').val();\n  $.ajax({\n    url: '/getAttributes',\n    data: {\n      category_id: id\n    },\n    method: 'GET',\n    dataType: 'json',\n    success: function success(data) {\n      $('#attributes').empty();\n      data.forEach(function (element) {\n        $('#attributes').append(\"\\n                    <div class=\\\"form-check form-check w-75 p-0\\\">\\n                        <div class=\\\"d-flex justify-content-between align-items-center\\\">\\n                            <label class=\\\"form-check-label bg-secondary px-3 text-capitalize py-1 text-white cursor-pointer\\\">\".concat(element['at_name'], \":</label>\\n                            <div id=\\\"st-attribute_val\\\" class=\\\"font-weight-bold\\\"></div>\\n                            <label for=\\\"\").concat(element['at_slug'], \"Checkbox\").concat(element['at_id'], \"\\\" class=\\\"m-0 cursor-pointer\\\"><img src=\\\"/storage/theme/plus_add_attr.svg\\\" /></label>\\n                        </div>\\n                        \\n                        <input class=\\\"form-check-input js-attribute d-none\\\" name=\\\"attribute[\").concat(element['at_slug'], \"][id]\\\" type=\\\"checkbox\\\" id=\\\"\").concat(element['at_slug'], \"Checkbox\").concat(element['at_id'], \"\\\" value=\\\"\").concat(element['at_id'], \"\\\">\\n\\n                    </div>\\n                \"));\n      });\n    }\n  });\n});\n$('.input_placeholder_style').on('change', function () {\n  if ($('#image').val() != '' && $('#name').val() != '' && $('#description').val() != '' && $('#quantity').val() != '' && $('select[name=\"category_id\"]').val() != '' && $('#price').val() != '') {\n    $('.add-product-btn').removeAttr('disabled').addClass('btn-success').removeClass('btn-danger');\n  } else {\n    $('.add-product-btn').attr('disabled', true);\n  }\n});\n$(document).on('submit', '#add_product', function (event) {\n  $(this).addClass('was-validated'); //stop submitting the form to see the disabled button effect\n\n  if ($('#image').val() != '' && $('#name').val() != '' && $('#description').val() != '' && $('#quantity').val() != '' && $('select[name=\"category_id\"]').val() != '' && $('#price').val() != '') {\n    $('.add-product-btn').removeAttr('disabled').addClass('btn-success');\n  } else {\n    event.preventDefault();\n    $('.add-product-btn').attr('disabled', true);\n    return false;\n  } //disable the submit button\n  //disable a normal button\n\n}); // $(document).on('click', '.add-product-btn', function() {\n//   e.preventDefault()\n//   $(this).attr('disabled', true)\n//   if ($('#image').val() == '') $('#add_product').addClass('was-validated')\n//   $('#main-poster').addClass('border-danger')\n//   if ($('.was-validated .form-control:valid'))\n//     $('#main-poster').addClass('border-danger')\n//   return true\n// })\n\n$(document).on('change', '.st-attribute_add', function () {\n  $('#st-attribute_val').empty();\n  $('.st-attribute_add option:selected').each(function (el) {\n    $('#st-attribute_val').append($(this).text() + ' ');\n  });\n});\n$(document).on('click', '#btn-add_address', function () {\n  var formData = new FormData();\n  formData.append('_token', $('meta[name=csrf-token]').attr('content')); // var formData = new FormData($('#add_address'));\n\n  var phone = $('#phone').val();\n  var name = $(this).closest('form').find('input[name=\"name\"]').val();\n  var address = $(this).closest('form').find('input[name=\"address\"]').val();\n  var city_id = $(this).closest('form').find('input[name=\"city_id\"]').val();\n  var profile_photo_path = $(this).closest('form').find('input[name=\"profile_photo_path\"]')[0].files[0];\n  formData.append('phone', phone);\n  formData.append('name', name);\n  formData.append('address', address);\n  formData.append('city_id', city_id);\n  formData.append('profile_photo_path', profile_photo_path);\n  $.ajax({\n    url: '/users/contacts',\n    type: 'post',\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    },\n    contentType: false,\n    processData: false,\n    data: formData,\n    success: function success(data) {\n      location.reload(true);\n    },\n    error: function error(xhr, status, _error) {\n      console.log(status);\n    }\n  });\n});\n$(document).on('change', '.js-attribute', function () {\n  var _this = $(this);\n\n  $.ajax({\n    url: '/getAttributesValue',\n    data: {\n      attribute_id: _this.val()\n    },\n    method: 'GET',\n    dataType: 'json',\n    success: function success(data) {\n      if (!_this.is(':checked')) {\n        _this.closest('div').find('select').remove();\n\n        $('.Selects').remove();\n        $('#color_attr').empty();\n      } else {\n        if (data[0]['slug'] == 'cvet') {\n          $('#color_attr').append(\"\\n                        <input type=\\\"text\\\" id=\\\"colors_input\\\" name=\\\"cvet\\\" class=\\\"form-control d-none\\\" value=\\\"\\\">\\n                    \");\n\n          _this.closest('div').append(\"\\n                        <div class=\\\"Selects d-flex flex-wrap justify-content-between form-group\\\" name=\\\"attribute[\".concat(data[0]['slug'], \"][value]\\\">\\n                        </div>\\n                    \"));\n\n          _this.closest('div').find('.Selects').empty();\n\n          data.forEach(function (element) {\n            _this.closest('div').find('.Selects').append(\"\\n                        <label class=\\\"checkbox-container\\\">\\n                        <input cheked class=\\\"form-check-input\\\" name=\\\"cvet\\\" value=\\\"\".concat(element['id'], \"\\\" type=\\\"checkbox\\\">\\n                        <span class=\\\"checkmark\\\" style=\\\"background: \").concat(element['value'], \"; width: 25px; height: 25px;\\\"></span>\\n                        </label>\\n                    \")); // if(element['slug'] == 'cvet'){\n            //     $('#test').append(`\n            //         <div class=\"position-relative\">\n            //         <input class=\"form-check-input\" for=\"${element['name']}\" style=\"background: ${element['value']}; width: 10px; height: 10px;\" type=\"checkbox\">\n            //         <label id=\"${element['name']}\" class=\"form-check-label rounded-pill\" style=\"background: ${element['value']}; width: 50px; height: 50px;\"></label>\n            //         </div>\n            //     `);\n            // }\n\n          });\n        } else {\n          _this.closest('div').append(\"\\n                        <select class=\\\"input_placeholder_style form-control st-attribute_add mt-3\\\" name=\\\"attribute[\".concat(data[0]['slug'], \"][value][]\\\" multiple id=\\\"st-attribute_select\\\">\\n                            <option disabled>\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435</option>\\n                        </select>\\n                    \"));\n\n          data.forEach(function (element) {\n            _this.closest('div').find('select').append(\"\\n                            <option value=\\\"\".concat(element['id'], \"\\\">\").concat(element['name'], \"</option>\\n                        \"));\n          });\n        }\n      }\n    }\n  });\n});\n$(document).on('change', \"input[name='cvet'], input[name='checkSvet']\", function () {\n  var val = $(this).val();\n  var colors = $('#colors_input');\n\n  if (this.checked) {\n    if (colors.val().length < 1) {\n      colors.val(colors.val() + val);\n    } else {\n      colors.val(colors.val() + ',' + val);\n    }\n  } else {\n    var array = colors.val().split(',');\n    var index = array.indexOf(val);\n\n    if (index > -1) {\n      array.splice(index, 1);\n    }\n\n    colors.val(array);\n  }\n});\n$('body').on('change', '#cat_child', function () {\n  var id = $('#cat_child option:selected').val();\n  $.ajax({\n    url: '/getAttributes',\n    data: {\n      category_id: id\n    },\n    method: 'GET',\n    dataType: 'json',\n    success: function success(data) {\n      $('#attributes').empty();\n      data.forEach(function (element) {\n        $('#attributes').append(\"\\n                    <div class=\\\"form-check form-check\\\">\\n                        <input class=\\\"form-check-input js-attribute\\\" name=\\\"attribute[\".concat(element['at_slug'], \"][id]\\\" type=\\\"checkbox\\\" id=\\\"\").concat(element['at_slug'], \"Checkbox\").concat(element['at_id'], \"\\\" value=\\\"\").concat(element['at_id'], \"\\\">\\n                        <label class=\\\"form-check-label\\\" for=\\\"\").concat(element['at_slug'], \"Checkbox\").concat(element['at_id'], \"\\\">\").concat(element['at_name'], \"</label>\\n                    </div>\\n                \"));\n      });\n    }\n  });\n  $.ajax({\n    url: '/getSubcategories',\n    data: {\n      category: id\n    },\n    method: 'GET',\n    dataType: 'json',\n    success: function success(data) {\n      if (data.hasOwnProperty('0')) {\n        $('#cat_child').attr('name', 'subcategory');\n        $('#child_div').remove();\n        $('#subCategories').append(\"\\n                    <div id=\\\"child_div\\\" class=\\\"form-group  d-flex flex-column flex-md-row mb-4 justify-content-start justify-content-md-end align-items-start align-items-md-center\\\">\\n                        <label for=\\\"cat_child\\\" class=\\\"input_caption mr-2 text-left text-md-right\\\">\\u041F\\u043E\\u0434-\\u043A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u0438:</label>\\n                        <div class=\\\"w-75 input_placeholder_style input-group w-md-100\\\">\\n                            <div class=\\\"input-group-prepend position-relative\\\">\\n                                <div class=\\\"input-group-text px-1  btn-custom-fs bg-white \\\"></div>\\n                            </div>\\n                            <select class=\\\"input_placeholder_style custom-select position-relative\\\" id=\\\"grandchildren\\\" name=\\\"category_id\\\" required>\\n                                <option>\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043F\\u043E\\u0434-\\u043A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u044E</option>\\n                            </select>\\n                        </div>\\n                    </div>\\n                \");\n        data.forEach(function (element) {\n          $('#grandchildren').append(\"\\n                        <option value=\\\"\".concat(element['id'], \"\\\">\").concat(element['name'], \"</option>\\n                    \"));\n        });\n      } else {\n        $('#cat_child').attr('name', 'category_id');\n        $('#child_div').remove();\n      }\n    }\n  });\n});\n$('.select-color').on('click', function () {\n  $('.product-colors label').removeClass('color-active');\n  $(this).addClass('color-active');\n});\n$('.sizes .product-size').on('click', function () {\n  $('.product-size').removeClass('text-danger');\n  $(this).addClass('text-danger');\n}); // search\n\n$('.main-search').on('keyup keypress keydown change', function () {\n  var value = $(this).val();\n\n  if (value.length >= 3) {\n    $.ajax({\n      url: '/livesearch',\n      type: 'get',\n      headers: {\n        'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n      },\n      data: {\n        value: value\n      },\n      success: function success(data) {\n        $('.search-result').show();\n        $('.search-result').html(data);\n      },\n      error: function error(xhr, status, _error2) {}\n    });\n  } else {\n    $('.search-result').hide();\n  }\n});\n$('#buyBtn').on('click', function (e) {\n  var count = 0;\n  var questions = $('.desktopAttrs');\n  $('.selectedAttrs').empty();\n  questions.each(function () {\n    if ($(this).find('input').filter('[type=\"radio\"]').filter(':checked').length > 0) {\n      var attrValueName = $(this).find('input').filter('[type=\"radio\"]').filter(':checked').closest('label').text();\n      var attrName = $(this).find('input').filter('[type=\"radio\"]').filter(':checked').data('name');\n      $('.selectedAttrs').append(\"\\n                <h6 class=\\\"text\\\">\".concat(attrName, \" \").concat(attrValueName, \"</h6>\\n            \"));\n      count++;\n    }\n  });\n\n  if (count >= questions.length) {\n    $('#buyProduct').modal('show');\n  } else {\n    Toast.fire({\n      icon: 'error',\n      title: 'Выберите все параметры товара!'\n    });\n  }\n});\n$('#buyBtnMob').on('click', function (e) {\n  var count = 0;\n  var questions = $('.mobAttrs');\n  questions.each(function () {\n    if ($(this).find('input').filter('[type=\"radio\"]').filter(':checked').length > 0) {\n      var attrValueName = $(this).find('input').filter('[type=\"radio\"]').filter(':checked').closest('label').text();\n      var attrName = $(this).find('input').filter('[type=\"radio\"]').filter(':checked').data('name');\n      $('.selectedAttrs').append(\"\\n                <h6 class=\\\"text\\\">\".concat(attrName, \" \").concat(attrValueName, \"</h6>\\n            \"));\n      count++;\n    }\n  });\n\n  if (count >= questions.length) {\n    $('#buyProduct').modal('show');\n  } else {\n    Toast.fire({\n      icon: 'error',\n      title: 'Выберите все параметры товара!'\n    });\n  }\n}); // orders add\n\n$('.checkout-product').on('click', function () {\n  var total_price = $(this).closest('#buyProduct').find('.total-price').text();\n  var address = $('#checkout_address').val();\n  var quantity = $(this).closest('#buyProduct').find('.quantity-product').text();\n  var product_id = $(this).closest('#buyProduct').find('.checkout-id').attr('data-id');\n  var comment = $('#comment').val();\n  var attributes = [];\n  $('input[type=radio]:checked').each(function () {\n    attributes.push($(this).val());\n  });\n  $.ajax({\n    url: '/orders/store',\n    type: 'POST',\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    },\n    data: {\n      total_price: total_price,\n      address: address,\n      quantity: quantity,\n      product_id: product_id,\n      comment: comment,\n      attributes: attributes\n    },\n    success: function success(data) {\n      console.log(data);\n      $('.order-number').text('Номер вашего заказа: ' + data.order.id);\n    },\n    error: function error(xhr, status, _error3) {\n      console.log(status);\n    }\n  });\n}); // favorite add\n\n$('.favorite').on('click', function () {\n  if ($(this).hasClass('active')) {\n    var status = 0;\n  } else {\n    var status = 1;\n  }\n\n  var this_ = $(this);\n  var product_id = $(this).attr('data-id');\n  $.ajax({\n    url: '/add_to_favorite',\n    data: {\n      product_id: product_id,\n      status: status\n    },\n    method: 'GET',\n    dataType: 'json',\n    success: function success(data) {\n      this_.toggleClass('active');\n    },\n    error: function error(xhr, status, _error4) {\n      console.log(status);\n    }\n  }); // $.ajax({\n  //     url: '/add_to_favorite/' + product_id,\n  //     type: 'GET',\n  //     headers: {\n  //         'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n  //     },\n  //     data: {\n  //         product_id,\n  //         status,\n  //     },\n  //     success: (data) => {\n  //         console.log(data);\n  //     },\n  //     error: function (xhr, status, error) {\n  //         console.log(status);\n  //     }\n  // });\n}); // sms-congirm\n\n$('#btn-login').on('click', function () {\n  var phone = $('#phone').val();\n  var code = $('#code').val(); // console.log(code);\n\n  $('.wrong-code').hide();\n  $.ajax({\n    url: '/sms-confirmed',\n    type: 'post',\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    },\n    data: {\n      phone: phone,\n      code: code\n    },\n    success: function success(data) {\n      if (data == 'true') {\n        location.reload(true);\n      } else if (data == 'false') {\n        $('#enter_site').modal('hide');\n        $('#adressChange').modal('show');\n      } else if (data == 'wrong code') {\n        $('.wrong-code').show();\n      }\n    },\n    error: function error(xhr, status, _error5) {\n      console.log(status);\n    }\n  });\n});\n$('#sms-confirmed, #add_address').on('keyup keypress', function (e) {\n  var keyCode = e.keyCode || e.which;\n\n  if (keyCode === 13) {\n    e.preventDefault();\n    return false;\n  }\n}); // sms-code\n\n$('#send-code, .send-code').on('click', function () {\n  $(this).attr('disabled', true);\n  var phone = $('#phone').val();\n\n  if (phone.replace(/\\s/g, '').length == 9) {\n    $('#phone').closest('.btn-group-fs').find('.btn-custom-fs').attr('style', 'background-color: #e9ecef;');\n    $('#phone').attr('disabled', true);\n    $('.wrong-phone-number').hide();\n    $.ajax({\n      url: '/sms-send',\n      type: 'post',\n      headers: {\n        'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n      },\n      data: {\n        phone: phone\n      },\n      success: function success(data) {\n        $('#btn-login').prop('disabled', false);\n        $('#send-code').hide();\n        $('.enter-code').show();\n        $('.sms--true').show();\n        $('.sms--false').hide();\n\n        if (data == 1) {\n          $('#adressChange').remove();\n        }\n\n        var fiveMinutes = 6 * 10,\n            display = document.querySelector('#count-down');\n        return startTimer(fiveMinutes, display);\n      },\n      error: function error(xhr, status, _error6) {\n        console.log(status);\n      }\n    });\n  } else {\n    $('.wrong-phone-number').show();\n    $(this).attr('disabled', false);\n  }\n});\n\nfunction startTimer(duration, display) {\n  var timer = duration,\n      minutes,\n      seconds;\n  var time = setInterval(function () {\n    minutes = parseInt(timer / 60, 10);\n    seconds = parseInt(timer % 60, 10);\n    minutes = minutes < 10 ? '0' + minutes : minutes;\n    seconds = seconds < 10 ? '0' + seconds : seconds;\n    display.textContent = minutes + ':' + seconds;\n\n    if (--timer < 0) {\n      timer = duration;\n      $('.sms--true').hide();\n      $('.sms--false').show();\n      clearInterval(time);\n      $('#btn-login').prop('disabled', true);\n    }\n  }, 1000);\n} // preview image\n// $(function() {\n//     $(\"#gallery\").change(function() {\n//         if (typeof(FileReader) != \"undefined\") {\n//             var dvPreview = $(\"#preview-product-secondary\").find('#db-preview-image');\n//             dvPreview.html(\"\");\n//             var regex = /^([a-zA-Z0-9\\s_\\\\.\\-:])+(.jpg|.jpeg|.png|.bmp|.WebP|.webp|.bat|.svg|.jfif)$/;\n//             $($(this)[0].files).each(function(index) {\n//                 var file = $(this);\n//                 if (regex.test(file[0].name.toLowerCase())) {\n//                     var reader = new FileReader();\n//                     reader.onload = function(e) {\n//                         var img = $('<div class=\"col-3 text-center mb-4\"><img width=\"87\" height=\"87\" style=\"object-fit: contain\"/><button data-id=\"' + index + '\" type=\"button\" class=\"btn btn-danger my-3 db-preview-remove\">Удалить</div>');\n//                         img.find('img').addClass(\"mw-100\");\n//                         img.find('img').attr(\"src\", e.target.result);\n//                         dvPreview.append(img);\n//                     }\n//                     reader.readAsDataURL(file[0]);\n//                 } else {\n//                     alert(file[0].name + \" is not a valid image file.\");\n//                     dvPreview.html(\"\");\n//                     return false;\n//                 }\n//             });\n//         } else {\n//             alert(\"This browser does not support HTML5 FileReader.\");\n//         }\n//     });\n// });\n// $('.db-preview-remove').on('click', function() {\n//     let gallery = $(\"#gallery\")[0].files;\n//     let value = $(this).attr('data-id');\n//     function removeItemOnce(arr, value) {\n//         var index = arr.indexOf(value);\n//         if (index > -1) {\n//             arr.splice(index, 1);\n//         }\n//     };\n//     removeItemOnce(gallery.files, value);\n// });\n// $('body').on('click', '.deleteImage', function () {\n//     let images = $('#hello').val()\n//     images = JSON.parse(images)\n//     console.log(images)\n//     $(this).parent().find('img').remove()\n// })\n// single preview\n\n\nfunction avatar(input) {\n  if (input.files && input.files[0]) {\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n      $('#avatar-poster').attr('src', e.target.result);\n      $('#avatar-poster-mobile').attr('src', e.target.result);\n    };\n\n    reader.readAsDataURL(input.files[0]);\n  }\n}\n\nfunction cover(input) {\n  if (input.files && input.files[0]) {\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n      $('#cover-poster-mobile').attr('src', e.target.result);\n    };\n\n    reader.readAsDataURL(input.files[0]);\n  }\n}\n\nfunction user_avatar(input) {\n  if (input.files && input.files[0]) {\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n      $('.user_avatar svg').hide();\n      $('.user_avatar img').show().attr('src', e.target.result);\n    };\n\n    reader.readAsDataURL(input.files[0]);\n  }\n}\n\n$('#profile_photo_path').change(function () {\n  user_avatar(this);\n});\n$('#image').change(function () {\n  if ($(this).val() != '') $('#main-poster').removeClass('border-danger').addClass('border-success');else $('#main-poster').addClass('border-danger');\n});\n$('#avatar').change(function () {\n  avatar(this);\n});\n$('#cover').change(function () {\n  cover(this);\n});\n/* iteration number */\n//gets the input by element Id, gets min, max, and step from the markup. Gets the subtract and add buttons either by optional classnames, or by the next or last element sibling.\n\nvar NumberSpinner = function NumberSpinner(elemId, subtractClassName, addClassName) {\n  'use strict';\n\n  var spinnerInput = document.getElementById(elemId);\n  var btnSubtract = document.querySelector(addClassName) || spinnerInput.previousElementSibling;\n  var btnAdd = document.querySelector(subtractClassName) || spinnerInput.nextElementSibling;\n  var minLimit, maxLimit, step;\n\n  function init() {\n    ;\n    minLimit = makeNumber(getAttribute(spinnerInput, 'min')) || 0, maxLimit = makeNumber(getAttribute(spinnerInput, 'max')) || false, step = makeNumber(getAttribute(spinnerInput, 'step') || '1');\n    btnSubtract.addEventListener('click', changeSpinner, false);\n    btnAdd.addEventListener('click', changeSpinner, false);\n    btnSubtract.addEventListener('keyup', keySpinner, false);\n    btnAdd.addEventListener('keyup', keySpinner, false);\n\n    if (supportsTouch()) {\n      btnSubtract.addEventListener('touchend', removeClickDelay, false);\n      btnAdd.addEventListener('touchend', removeClickDelay, false);\n    }\n\n    if (supportsPointer()) {\n      btnSubtract.addEventListener('pointerup', removeClickDelay, false);\n      btnAdd.addEventListener('pointerup', removeClickDelay, false);\n    }\n  }\n\n  function removeClickDelay(e) {\n    e.preventDefault();\n    e.target.click();\n  }\n\n  function makeNumber(inputString) {\n    return parseInt(inputString, 10);\n  }\n\n  function update(direction) {\n    var num = makeNumber(spinnerInput.value);\n\n    if (direction === 'add') {\n      spinnerInput.value = num + step <= maxLimit ? num + step : spinnerInput.value;\n    } else if (direction === 'subtract') {\n      spinnerInput.value = num - step >= minLimit ? num - step : spinnerInput.value;\n    }\n  }\n\n  function getAttribute(el, attr) {\n    var hasGetAttr = el.getAttribute && el.getAttribute(attr) || null;\n\n    if (!hasGetAttr) {\n      var attrs = el.attributes;\n\n      for (var i = 0, len = attrs.length; i < len; i++) {\n        if (attrs[i].nodeName === attr) {\n          hasGetAttr = attrs[i].nodeValue;\n        }\n      }\n    }\n\n    return hasGetAttr;\n  }\n  /* Touch and Pointer support */\n\n\n  function supportsTouch() {\n    return 'ontouchstart' in window;\n  }\n\n  function supportsPointer() {\n    return 'pointerdown' in window;\n  }\n  /* Keyboard support */\n\n\n  function keySpinner(e) {\n    switch (e.keyCode) {\n      case 40:\n      case 37:\n        // Down, Left\n        update('subtract');\n        btnSubtract.focus();\n        break;\n\n      case 38:\n      case 39:\n        // Top, Right\n        update('add');\n        btnAdd.focus();\n        break;\n    }\n  }\n\n  function changeSpinner(e) {\n    e.preventDefault();\n    var increment = getAttribute(e.target, 'data-type');\n    update(increment);\n  }\n\n  init();\n};\n\nNumberSpinner('spinner-input', 'js-spinner-horizontal-subtract', 'js-spinner-horizontal-add');\nvar product_price = $('#price').text();\n$('.spinner__button').on('click', function () {\n  var count = $('#spinner-input').val();\n  var res = parseInt(product_price * count);\n  $('.total-price, .price').text(res);\n  $('.quantity-product').text(count);\n});\n$('#spinner-input').on('change', function () {\n  var count = $(this).val();\n  var res = parseInt(product_price * count);\n  $('.total-price, .price').text(res);\n  $('.quantity-product').text(count);\n});\n$('body').on('click', '.change-address', function () {\n  $('#checkout_address').prop('disabled', false);\n  $('#checkout_address').focus();\n}); ///product picture on hover change\n\n$('.add-product-secondary .pic-item').on('click', function () {\n  var imgSrc = $(this).attr('data-image-src');\n  $('.pic-main').attr('src', imgSrc);\n  $('.add-product-secondary .pic-item').removeClass('pic-item-active');\n  $(this).addClass('pic-item-active');\n});\n$('.add-product-secondary .pic-item').on('click', function () {\n  var imgSrc = $(this).attr('data-image-src');\n  $('.pic-main').attr('src', imgSrc);\n});\n$('.add-product-secondary .pic-item').on('click', function () {\n  var imgSrc = $(this).attr('data-image-src');\n  $('.pic-main').attr('src', imgSrc);\n}); // $(document).ready(function () {\n//     $(\".custom-radius\").on(\"click\", function () {\n//         var count = 0;\n//         var questions = $(\".xls\");\n//         questions.each(function () {\n//             if ($(this).find(\"input\").filter('[type=\"radio\"]').filter(\":checked\").length > 0) {\n//                 count++;\n//             }\n//         });\n//         if (count >= questions.length) {\n//             alert(\"all good\");\n//         } else {\n//             alert(\"something not checked\");\n//         }\n//     });\n// });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/main.js\n");

/***/ }),

/***/ "./resources/js/upload.js":
/*!********************************!*\
  !*** ./resources/js/upload.js ***!
  \********************************/
/*! exports provided: upload */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"upload\", function() { return upload; });\n/* harmony import */ var compressorjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! compressorjs */ \"./node_modules/compressorjs/dist/compressor.js\");\n/* harmony import */ var compressorjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(compressorjs__WEBPACK_IMPORTED_MODULE_0__);\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\nvar element = function element(tag) {\n  var classes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var content = arguments.length > 2 ? arguments[2] : undefined;\n  var node = document.createElement(tag);\n\n  if (classes.length) {\n    var _node$classList;\n\n    (_node$classList = node.classList).add.apply(_node$classList, _toConsumableArray(classes));\n  }\n\n  if (content) {\n    node.textContent = content;\n  }\n\n  return node;\n};\n\nfunction upload(selector) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var files = [];\n  var input = document.querySelector(selector);\n  var preview = element('div', ['preview', 'row']);\n  var open = document.createElement('IMG');\n  open.setAttribute('src', '/storage/theme/avatar_gallery.svg');\n  input.insertAdjacentElement('afterend', open);\n  input.insertAdjacentElement('afterend', preview);\n\n  if (document.getElementById('db-preview-image').dataset.edit == 'true') {\n    var els = document.querySelectorAll('.preview-image');\n    preview.insertAdjacentElement('afterbegin', open);\n    els.forEach(function (el) {\n      return preview.insertAdjacentElement('afterbegin', el);\n    });\n  }\n\n  if (options.multi) {\n    input.setAttribute('multiple', true);\n  }\n\n  if (options.accept && Array.isArray(options.accept)) {\n    input.setAttribute('accept', options.accept.join(','));\n  }\n\n  var triggerInput = function triggerInput() {\n    return input.click();\n  };\n\n  var changeHandler = function changeHandler(event) {\n    if (!event.target.files.length) {\n      return;\n    }\n\n    files = Array.from(event.target.files); // preview.innerHTML = '';\n\n    files.forEach(function (file) {\n      if (!file.type.match('image')) {\n        return;\n      }\n\n      new compressorjs__WEBPACK_IMPORTED_MODULE_0___default.a(file, {\n        strict: false,\n        checkOrientation: false,\n        quality: 0.8,\n        maxWidth: 700,\n        maxHeight: 700,\n        minWidth: 700,\n        minHeight: 700,\n        height: 700,\n        width: 700,\n        // beforeDraw(context, canvas) {\n        //   console.log(context);\n        //   canvas.width = 700;\n        //   canvas.height = 700;\n        //   context.fillStyle = '#fff';\n        //   context.fillRect(0, 0, canvas.width, canvas.height);\n        // },\n        // drew(context, canvas) {\n        //   var base_image = new Image();\n        //   base_image.src = '/storage/watermark.svg';\n        //   context.drawImage(base_image, canvas.width - 230, canvas.height - 80);\n        // },\n        success: function success(result) {\n          var reader = new FileReader();\n\n          reader.onload = function (ev) {\n            var src = ev.target.result;\n            preview.insertAdjacentHTML('afterbegin', \"\\n                        <div class=\\\"preview-image col-3\\\">\\n                          <div class=\\\"profile-pic\\\">\\n                            <img src=\\\"\".concat(src, \"\\\" alt=\\\"\").concat(result.name, \"\\\" class=\\\"preview-element-image\\\"/>\\n                            <div class=\\\"deleteImage text-white\\\" data-name=\\\"\").concat(result.name, \"\\\">&times;</div>\\n                          </div>\\n                        </div>\"));\n            preview.insertAdjacentElement('beforeend', open);\n            open.classList.add('col-3');\n          };\n\n          reader.readAsDataURL(result);\n        },\n        error: function error(err) {\n          console.log(err.message);\n        }\n      });\n    });\n    console.log(files);\n  };\n\n  var removeHandler = function removeHandler(event) {\n    if (!event.target.dataset.name) {\n      return;\n    }\n\n    if (files.length <= 8) {\n      open.classList.remove('d-none');\n    }\n\n    var name = event.target.dataset.name;\n    files = files.filter(function (file) {\n      return file.name !== name;\n    });\n    var block = preview.querySelector(\"[data-name=\\\"\".concat(name, \"\\\"]\")).closest('.preview-image');\n    block.classList.add('removing');\n    setTimeout(function () {\n      return block.remove();\n    }, 300);\n  };\n\n  open.addEventListener('click', triggerInput);\n  input.addEventListener('change', changeHandler);\n  preview.addEventListener('click', removeHandler);\n}\n$(document).on('click', '.add-product-btn', function () {\n  var formData = new FormData();\n  var check_page = document.getElementById('db-preview-image').dataset.edit;\n  var product_id = $(this).closest('form').find('input[name=\"product_id\"]').val();\n  var cat_id = $(this).closest('form').find('select[name=\"category_id\"]').val();\n  var name = $(this).closest('form').find('input[name=\"name\"]').val();\n  var description = $(this).closest('form').find('textarea[name=\"description\"]').val();\n  var quantity = $(this).closest('form').find('input[name=\"quantity\"]').val();\n  var price = $(this).closest('form').find('input[name=\"price\"]').val();\n  var store_id = $(this).closest('form').find('input[name=\"store_id\"]').val();\n  var image = $('#main-poster').attr('src');\n  var query_url = check_page == 'true' ? \"/products/edit/test/\".concat(product_id) : '/product/store/test';\n  var gallery = $('.preview-element-image');\n  var galleries = [];\n  var itemsProcessed = 0;\n\n  if (gallery.length > 0) {\n    Array.from(gallery).forEach(function (item, index, array) {\n      galleries.push(item.src);\n      itemsProcessed++;\n\n      if (itemsProcessed === array.length) {\n        callback();\n      }\n    });\n  } else {\n    callback();\n  }\n\n  function callback() {\n    formData.append('_token', $('meta[name=csrf-token]').attr('content'));\n    formData.append('_method', $('input[name=_method]').val());\n    formData.append('cat_id', cat_id);\n    formData.append('name', name);\n    formData.append('description', description);\n    formData.append('quantity', quantity);\n    formData.append('price', price);\n    formData.append('store_id', store_id);\n    formData.append('image', image);\n    formData.append('gallery', JSON.stringify(galleries));\n    $.ajax({\n      url: query_url,\n      type: 'POST',\n      headers: {\n        'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n      },\n      contentType: false,\n      processData: false,\n      data: formData,\n      success: function success(data) {\n        $('.content .container:eq(0)').addClass('bg-white').empty().html(\"<div class=\\\"my-5 p-4 text-center\\\"><img class=\\\"my-5\\\" src=\\\"/storage/theme/thanks.svg\\\" width=\\\"250px\\\" alt=\\\"\\\"><div class=\\\"mb-3 pb-5 pb-lg-0\\\"><h4>\\u0422\\u043E\\u0432\\u0430\\u0440 \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \".concat(check_page == 'true' ? 'обновлен' : 'добавлен', \" \\u0438 \\u043F\\u0440\\u043E\\u0445\\u043E\\u0434\\u0438\\u0442 \\u043C\\u043E\\u0434\\u0435\\u0440\\u0430\\u0446\\u0438\\u044E </h4><a class=\\\"rounded-11 btn btn-outline-danger ml-md-2 my-1\\\" href=\\\"/\\\">\\u041D\\u0430 \\u0433\\u043B\\u0430\\u0432\\u043D\\u0443\\u044E</a></div></div>\"));\n      },\n      error: function error(xhr, status, _error) {\n        console.log(status);\n      }\n    });\n  }\n});\n\nfunction readURL(input) {\n  if (input.files && input.files[0]) {\n    new compressorjs__WEBPACK_IMPORTED_MODULE_0___default.a(input.files[0], {\n      quality: 0.8,\n      maxWidth: 700,\n      maxHeight: 700,\n      minWidth: 700,\n      minHeight: 700,\n      height: 700,\n      width: 700,\n      success: function success(result) {\n        var reader = new FileReader();\n\n        reader.onload = function (ev) {\n          var src = ev.target.result;\n          $('#main-poster').attr('src', src);\n        };\n\n        reader.readAsDataURL(result);\n      },\n      error: function error(err) {\n        console.log(err.message);\n      }\n    });\n  }\n}\n\n$('#image').change(function () {\n  if ($(this).val() != '') $('#main-poster').removeClass('border-danger').addClass('border-success');else $('#main-poster').addClass('border-danger');\n  readURL(this);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/upload.js\n");

/***/ }),

/***/ 1:
/*!************************************!*\
  !*** multi ./resources/js/main.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\XAMPP\htdocs\fason.tj\resources\js\main.js */"./resources/js/main.js");


/***/ })

/******/ });